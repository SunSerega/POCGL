  
  
  
  {$region CLPlatform}
  
  CLPlatformProperties = partial class
    
    public constructor(ntv: cl_platform_id);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
    private function GetProfile: String;
    private function GetVersion: String;
    private function GetName: String;
    private function GetVendor: String;
    private function GetExtensions: String;
    private function GetHostTimerResolution: UInt64;
    
    public property Profile:             String read GetProfile;
    public property Version:             String read GetVersion;
    public property Name:                String read GetName;
    public property Vendor:              String read GetVendor;
    public property Extensions:          String read GetExtensions;
    public property HostTimerResolution: UInt64 read GetHostTimerResolution;
    
    public procedure ToString(res: StringBuilder); virtual;
    begin
      res += 'Profile             = ';
      try
        res += _ObjectToString(Profile);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Version             = ';
      try
        res += _ObjectToString(Version);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Name                = ';
      try
        res += _ObjectToString(Name);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Vendor              = ';
      try
        res += _ObjectToString(Vendor);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Extensions          = ';
      try
        res += _ObjectToString(Extensions);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'HostTimerResolution = ';
      try
        res += _ObjectToString(HostTimerResolution);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
    end;
    public function ToString: string; override;
    begin
      var res := new StringBuilder;
      ToString(res);
      Result := res.ToString;
    end;
    
  end;
  
  {$endregion CLPlatform}
  
  {$region CLDevice}
  
  CLDeviceProperties = partial class
    
    public constructor(ntv: cl_device_id);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
    private function GetType: DeviceType;
    private function GetVendorId: UInt32;
    private function GetMaxComputeUnits: UInt32;
    private function GetMaxWorkItemDimensions: UInt32;
    private function GetMaxWorkItemSizes: array of UIntPtr;
    private function GetMaxWorkGroupSize: UIntPtr;
    private function GetPreferredVectorWidthChar: UInt32;
    private function GetPreferredVectorWidthShort: UInt32;
    private function GetPreferredVectorWidthInt: UInt32;
    private function GetPreferredVectorWidthLong: UInt32;
    private function GetPreferredVectorWidthFloat: UInt32;
    private function GetPreferredVectorWidthDouble: UInt32;
    private function GetPreferredVectorWidthHalf: UInt32;
    private function GetNativeVectorWidthChar: UInt32;
    private function GetNativeVectorWidthShort: UInt32;
    private function GetNativeVectorWidthInt: UInt32;
    private function GetNativeVectorWidthLong: UInt32;
    private function GetNativeVectorWidthFloat: UInt32;
    private function GetNativeVectorWidthDouble: UInt32;
    private function GetNativeVectorWidthHalf: UInt32;
    private function GetMaxClockFrequency: UInt32;
    private function GetAddressBits: UInt32;
    private function GetMaxMemAllocSize: UInt64;
    private function GetImageSupport: Bool;
    private function GetMaxReadImageArgs: UInt32;
    private function GetMaxWriteImageArgs: UInt32;
    private function GetMaxReadWriteImageArgs: UInt32;
    private function GetIlVersion: String;
    private function GetImage2dMaxWidth: UIntPtr;
    private function GetImage2dMaxHeight: UIntPtr;
    private function GetImage3dMaxWidth: UIntPtr;
    private function GetImage3dMaxHeight: UIntPtr;
    private function GetImage3dMaxDepth: UIntPtr;
    private function GetImageMaxBufferSize: UIntPtr;
    private function GetImageMaxArraySize: UIntPtr;
    private function GetMaxSamplers: UInt32;
    private function GetImagePitchAlignment: UInt32;
    private function GetImageBaseAddressAlignment: UInt32;
    private function GetMaxPipeArgs: UInt32;
    private function GetPipeMaxActiveReservations: UInt32;
    private function GetPipeMaxPacketSize: UInt32;
    private function GetMaxParameterSize: UIntPtr;
    private function GetMemBaseAddrAlign: UInt32;
    private function GetMinDataTypeAlignSize: UInt32;
    private function GetSingleFpConfig: DeviceFPConfig;
    private function GetDoubleFpConfig: DeviceFPConfig;
    private function GetGlobalMemCacheType: DeviceMemCacheType;
    private function GetGlobalMemCachelineSize: UInt32;
    private function GetGlobalMemCacheSize: UInt64;
    private function GetGlobalMemSize: UInt64;
    private function GetMaxConstantBufferSize: UInt64;
    private function GetMaxConstantArgs: UInt32;
    private function GetMaxGlobalVariableSize: UIntPtr;
    private function GetGlobalVariablePreferredTotalSize: UIntPtr;
    private function GetLocalMemType: DeviceLocalMemType;
    private function GetLocalMemSize: UInt64;
    private function GetErrorCorrectionSupport: Bool;
    private function GetHostUnifiedMemory: Bool;
    private function GetProfilingTimerResolution: UIntPtr;
    private function GetEndianLittle: Bool;
    private function GetAvailable: Bool;
    private function GetCompilerAvailable: Bool;
    private function GetLinkerAvailable: Bool;
    private function GetExecutionCapabilities: DeviceExecCapabilities;
    private function GetQueueProperties: CommandQueueProperties;
    private function GetQueueOnHostProperties: CommandQueueProperties;
    private function GetQueueOnDeviceProperties: CommandQueueProperties;
    private function GetQueueOnDevicePreferredSize: UInt32;
    private function GetQueueOnDeviceMaxSize: UInt32;
    private function GetMaxOnDeviceQueues: UInt32;
    private function GetMaxOnDeviceEvents: UInt32;
    private function GetBuiltInKernels: String;
    private function GetName: String;
    private function GetVendor: String;
    private function GetDriverVersion: String;
    private function GetProfile: String;
    private function GetVersion: String;
    private function GetOpenclCVersion: String;
    private function GetExtensions: String;
    private function GetPrintfBufferSize: UIntPtr;
    private function GetPreferredInteropUserSync: Bool;
    private function GetPartitionMaxSubDevices: UInt32;
    private function GetPartitionProperties: array of DevicePartitionProperty;
    private function GetPartitionAffinityDomain: DeviceAffinityDomain;
    private function GetPartitionType: array of DevicePartitionProperty;
    private function GetReferenceCount: UInt32;
    private function GetSvmCapabilities: DeviceSVMCapabilities;
    private function GetPreferredPlatformAtomicAlignment: UInt32;
    private function GetPreferredGlobalAtomicAlignment: UInt32;
    private function GetPreferredLocalAtomicAlignment: UInt32;
    private function GetMaxNumSubGroups: UInt32;
    private function GetSubGroupIndependentForwardProgress: Bool;
    
    public property &Type:                              DeviceType                       read GetType;
    public property VendorId:                           UInt32                           read GetVendorId;
    public property MaxComputeUnits:                    UInt32                           read GetMaxComputeUnits;
    public property MaxWorkItemDimensions:              UInt32                           read GetMaxWorkItemDimensions;
    public property MaxWorkItemSizes:                   array of UIntPtr                 read GetMaxWorkItemSizes;
    public property MaxWorkGroupSize:                   UIntPtr                          read GetMaxWorkGroupSize;
    public property PreferredVectorWidthChar:           UInt32                           read GetPreferredVectorWidthChar;
    public property PreferredVectorWidthShort:          UInt32                           read GetPreferredVectorWidthShort;
    public property PreferredVectorWidthInt:            UInt32                           read GetPreferredVectorWidthInt;
    public property PreferredVectorWidthLong:           UInt32                           read GetPreferredVectorWidthLong;
    public property PreferredVectorWidthFloat:          UInt32                           read GetPreferredVectorWidthFloat;
    public property PreferredVectorWidthDouble:         UInt32                           read GetPreferredVectorWidthDouble;
    public property PreferredVectorWidthHalf:           UInt32                           read GetPreferredVectorWidthHalf;
    public property NativeVectorWidthChar:              UInt32                           read GetNativeVectorWidthChar;
    public property NativeVectorWidthShort:             UInt32                           read GetNativeVectorWidthShort;
    public property NativeVectorWidthInt:               UInt32                           read GetNativeVectorWidthInt;
    public property NativeVectorWidthLong:              UInt32                           read GetNativeVectorWidthLong;
    public property NativeVectorWidthFloat:             UInt32                           read GetNativeVectorWidthFloat;
    public property NativeVectorWidthDouble:            UInt32                           read GetNativeVectorWidthDouble;
    public property NativeVectorWidthHalf:              UInt32                           read GetNativeVectorWidthHalf;
    public property MaxClockFrequency:                  UInt32                           read GetMaxClockFrequency;
    public property AddressBits:                        UInt32                           read GetAddressBits;
    public property MaxMemAllocSize:                    UInt64                           read GetMaxMemAllocSize;
    public property ImageSupport:                       Bool                             read GetImageSupport;
    public property MaxReadImageArgs:                   UInt32                           read GetMaxReadImageArgs;
    public property MaxWriteImageArgs:                  UInt32                           read GetMaxWriteImageArgs;
    public property MaxReadWriteImageArgs:              UInt32                           read GetMaxReadWriteImageArgs;
    public property IlVersion:                          String                           read GetIlVersion;
    public property Image2dMaxWidth:                    UIntPtr                          read GetImage2dMaxWidth;
    public property Image2dMaxHeight:                   UIntPtr                          read GetImage2dMaxHeight;
    public property Image3dMaxWidth:                    UIntPtr                          read GetImage3dMaxWidth;
    public property Image3dMaxHeight:                   UIntPtr                          read GetImage3dMaxHeight;
    public property Image3dMaxDepth:                    UIntPtr                          read GetImage3dMaxDepth;
    public property ImageMaxBufferSize:                 UIntPtr                          read GetImageMaxBufferSize;
    public property ImageMaxArraySize:                  UIntPtr                          read GetImageMaxArraySize;
    public property MaxSamplers:                        UInt32                           read GetMaxSamplers;
    public property ImagePitchAlignment:                UInt32                           read GetImagePitchAlignment;
    public property ImageBaseAddressAlignment:          UInt32                           read GetImageBaseAddressAlignment;
    public property MaxPipeArgs:                        UInt32                           read GetMaxPipeArgs;
    public property PipeMaxActiveReservations:          UInt32                           read GetPipeMaxActiveReservations;
    public property PipeMaxPacketSize:                  UInt32                           read GetPipeMaxPacketSize;
    public property MaxParameterSize:                   UIntPtr                          read GetMaxParameterSize;
    public property MemBaseAddrAlign:                   UInt32                           read GetMemBaseAddrAlign;
    public property MinDataTypeAlignSize:               UInt32                           read GetMinDataTypeAlignSize;
    public property SingleFpConfig:                     DeviceFPConfig                   read GetSingleFpConfig;
    public property DoubleFpConfig:                     DeviceFPConfig                   read GetDoubleFpConfig;
    public property GlobalMemCacheType:                 DeviceMemCacheType               read GetGlobalMemCacheType;
    public property GlobalMemCachelineSize:             UInt32                           read GetGlobalMemCachelineSize;
    public property GlobalMemCacheSize:                 UInt64                           read GetGlobalMemCacheSize;
    public property GlobalMemSize:                      UInt64                           read GetGlobalMemSize;
    public property MaxConstantBufferSize:              UInt64                           read GetMaxConstantBufferSize;
    public property MaxConstantArgs:                    UInt32                           read GetMaxConstantArgs;
    public property MaxGlobalVariableSize:              UIntPtr                          read GetMaxGlobalVariableSize;
    public property GlobalVariablePreferredTotalSize:   UIntPtr                          read GetGlobalVariablePreferredTotalSize;
    public property LocalMemType:                       DeviceLocalMemType               read GetLocalMemType;
    public property LocalMemSize:                       UInt64                           read GetLocalMemSize;
    public property ErrorCorrectionSupport:             Bool                             read GetErrorCorrectionSupport;
    public property HostUnifiedMemory:                  Bool                             read GetHostUnifiedMemory;
    public property ProfilingTimerResolution:           UIntPtr                          read GetProfilingTimerResolution;
    public property EndianLittle:                       Bool                             read GetEndianLittle;
    public property Available:                          Bool                             read GetAvailable;
    public property CompilerAvailable:                  Bool                             read GetCompilerAvailable;
    public property LinkerAvailable:                    Bool                             read GetLinkerAvailable;
    public property ExecutionCapabilities:              DeviceExecCapabilities           read GetExecutionCapabilities;
    public property QueueProperties:                    CommandQueueProperties           read GetQueueProperties;
    public property QueueOnHostProperties:              CommandQueueProperties           read GetQueueOnHostProperties;
    public property QueueOnDeviceProperties:            CommandQueueProperties           read GetQueueOnDeviceProperties;
    public property QueueOnDevicePreferredSize:         UInt32                           read GetQueueOnDevicePreferredSize;
    public property QueueOnDeviceMaxSize:               UInt32                           read GetQueueOnDeviceMaxSize;
    public property MaxOnDeviceQueues:                  UInt32                           read GetMaxOnDeviceQueues;
    public property MaxOnDeviceEvents:                  UInt32                           read GetMaxOnDeviceEvents;
    public property BuiltInKernels:                     String                           read GetBuiltInKernels;
    public property Name:                               String                           read GetName;
    public property Vendor:                             String                           read GetVendor;
    public property DriverVersion:                      String                           read GetDriverVersion;
    public property Profile:                            String                           read GetProfile;
    public property Version:                            String                           read GetVersion;
    public property OpenclCVersion:                     String                           read GetOpenclCVersion;
    public property Extensions:                         String                           read GetExtensions;
    public property PrintfBufferSize:                   UIntPtr                          read GetPrintfBufferSize;
    public property PreferredInteropUserSync:           Bool                             read GetPreferredInteropUserSync;
    public property PartitionMaxSubDevices:             UInt32                           read GetPartitionMaxSubDevices;
    public property PartitionProperties:                array of DevicePartitionProperty read GetPartitionProperties;
    public property PartitionAffinityDomain:            DeviceAffinityDomain             read GetPartitionAffinityDomain;
    public property PartitionType:                      array of DevicePartitionProperty read GetPartitionType;
    public property ReferenceCount:                     UInt32                           read GetReferenceCount;
    public property SvmCapabilities:                    DeviceSVMCapabilities            read GetSvmCapabilities;
    public property PreferredPlatformAtomicAlignment:   UInt32                           read GetPreferredPlatformAtomicAlignment;
    public property PreferredGlobalAtomicAlignment:     UInt32                           read GetPreferredGlobalAtomicAlignment;
    public property PreferredLocalAtomicAlignment:      UInt32                           read GetPreferredLocalAtomicAlignment;
    public property MaxNumSubGroups:                    UInt32                           read GetMaxNumSubGroups;
    public property SubGroupIndependentForwardProgress: Bool                             read GetSubGroupIndependentForwardProgress;
    
    public procedure ToString(res: StringBuilder); virtual;
    begin
      res += 'Type                               = ';
      try
        res += _ObjectToString(&Type);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'VendorId                           = ';
      try
        res += _ObjectToString(VendorId);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxComputeUnits                    = ';
      try
        res += _ObjectToString(MaxComputeUnits);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxWorkItemDimensions              = ';
      try
        res += _ObjectToString(MaxWorkItemDimensions);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxWorkItemSizes                   = ';
      try
        res += _ObjectToString(MaxWorkItemSizes);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxWorkGroupSize                   = ';
      try
        res += _ObjectToString(MaxWorkGroupSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredVectorWidthChar           = ';
      try
        res += _ObjectToString(PreferredVectorWidthChar);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredVectorWidthShort          = ';
      try
        res += _ObjectToString(PreferredVectorWidthShort);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredVectorWidthInt            = ';
      try
        res += _ObjectToString(PreferredVectorWidthInt);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredVectorWidthLong           = ';
      try
        res += _ObjectToString(PreferredVectorWidthLong);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredVectorWidthFloat          = ';
      try
        res += _ObjectToString(PreferredVectorWidthFloat);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredVectorWidthDouble         = ';
      try
        res += _ObjectToString(PreferredVectorWidthDouble);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredVectorWidthHalf           = ';
      try
        res += _ObjectToString(PreferredVectorWidthHalf);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'NativeVectorWidthChar              = ';
      try
        res += _ObjectToString(NativeVectorWidthChar);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'NativeVectorWidthShort             = ';
      try
        res += _ObjectToString(NativeVectorWidthShort);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'NativeVectorWidthInt               = ';
      try
        res += _ObjectToString(NativeVectorWidthInt);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'NativeVectorWidthLong              = ';
      try
        res += _ObjectToString(NativeVectorWidthLong);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'NativeVectorWidthFloat             = ';
      try
        res += _ObjectToString(NativeVectorWidthFloat);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'NativeVectorWidthDouble            = ';
      try
        res += _ObjectToString(NativeVectorWidthDouble);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'NativeVectorWidthHalf              = ';
      try
        res += _ObjectToString(NativeVectorWidthHalf);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxClockFrequency                  = ';
      try
        res += _ObjectToString(MaxClockFrequency);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'AddressBits                        = ';
      try
        res += _ObjectToString(AddressBits);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxMemAllocSize                    = ';
      try
        res += _ObjectToString(MaxMemAllocSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ImageSupport                       = ';
      try
        res += _ObjectToString(ImageSupport);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxReadImageArgs                   = ';
      try
        res += _ObjectToString(MaxReadImageArgs);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxWriteImageArgs                  = ';
      try
        res += _ObjectToString(MaxWriteImageArgs);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxReadWriteImageArgs              = ';
      try
        res += _ObjectToString(MaxReadWriteImageArgs);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'IlVersion                          = ';
      try
        res += _ObjectToString(IlVersion);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Image2dMaxWidth                    = ';
      try
        res += _ObjectToString(Image2dMaxWidth);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Image2dMaxHeight                   = ';
      try
        res += _ObjectToString(Image2dMaxHeight);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Image3dMaxWidth                    = ';
      try
        res += _ObjectToString(Image3dMaxWidth);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Image3dMaxHeight                   = ';
      try
        res += _ObjectToString(Image3dMaxHeight);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Image3dMaxDepth                    = ';
      try
        res += _ObjectToString(Image3dMaxDepth);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ImageMaxBufferSize                 = ';
      try
        res += _ObjectToString(ImageMaxBufferSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ImageMaxArraySize                  = ';
      try
        res += _ObjectToString(ImageMaxArraySize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxSamplers                        = ';
      try
        res += _ObjectToString(MaxSamplers);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ImagePitchAlignment                = ';
      try
        res += _ObjectToString(ImagePitchAlignment);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ImageBaseAddressAlignment          = ';
      try
        res += _ObjectToString(ImageBaseAddressAlignment);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxPipeArgs                        = ';
      try
        res += _ObjectToString(MaxPipeArgs);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PipeMaxActiveReservations          = ';
      try
        res += _ObjectToString(PipeMaxActiveReservations);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PipeMaxPacketSize                  = ';
      try
        res += _ObjectToString(PipeMaxPacketSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxParameterSize                   = ';
      try
        res += _ObjectToString(MaxParameterSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MemBaseAddrAlign                   = ';
      try
        res += _ObjectToString(MemBaseAddrAlign);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MinDataTypeAlignSize               = ';
      try
        res += _ObjectToString(MinDataTypeAlignSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'SingleFpConfig                     = ';
      try
        res += _ObjectToString(SingleFpConfig);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'DoubleFpConfig                     = ';
      try
        res += _ObjectToString(DoubleFpConfig);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'GlobalMemCacheType                 = ';
      try
        res += _ObjectToString(GlobalMemCacheType);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'GlobalMemCachelineSize             = ';
      try
        res += _ObjectToString(GlobalMemCachelineSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'GlobalMemCacheSize                 = ';
      try
        res += _ObjectToString(GlobalMemCacheSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'GlobalMemSize                      = ';
      try
        res += _ObjectToString(GlobalMemSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxConstantBufferSize              = ';
      try
        res += _ObjectToString(MaxConstantBufferSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxConstantArgs                    = ';
      try
        res += _ObjectToString(MaxConstantArgs);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxGlobalVariableSize              = ';
      try
        res += _ObjectToString(MaxGlobalVariableSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'GlobalVariablePreferredTotalSize   = ';
      try
        res += _ObjectToString(GlobalVariablePreferredTotalSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'LocalMemType                       = ';
      try
        res += _ObjectToString(LocalMemType);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'LocalMemSize                       = ';
      try
        res += _ObjectToString(LocalMemSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ErrorCorrectionSupport             = ';
      try
        res += _ObjectToString(ErrorCorrectionSupport);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'HostUnifiedMemory                  = ';
      try
        res += _ObjectToString(HostUnifiedMemory);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ProfilingTimerResolution           = ';
      try
        res += _ObjectToString(ProfilingTimerResolution);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'EndianLittle                       = ';
      try
        res += _ObjectToString(EndianLittle);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Available                          = ';
      try
        res += _ObjectToString(Available);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'CompilerAvailable                  = ';
      try
        res += _ObjectToString(CompilerAvailable);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'LinkerAvailable                    = ';
      try
        res += _ObjectToString(LinkerAvailable);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ExecutionCapabilities              = ';
      try
        res += _ObjectToString(ExecutionCapabilities);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'QueueProperties                    = ';
      try
        res += _ObjectToString(QueueProperties);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'QueueOnHostProperties              = ';
      try
        res += _ObjectToString(QueueOnHostProperties);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'QueueOnDeviceProperties            = ';
      try
        res += _ObjectToString(QueueOnDeviceProperties);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'QueueOnDevicePreferredSize         = ';
      try
        res += _ObjectToString(QueueOnDevicePreferredSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'QueueOnDeviceMaxSize               = ';
      try
        res += _ObjectToString(QueueOnDeviceMaxSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxOnDeviceQueues                  = ';
      try
        res += _ObjectToString(MaxOnDeviceQueues);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxOnDeviceEvents                  = ';
      try
        res += _ObjectToString(MaxOnDeviceEvents);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'BuiltInKernels                     = ';
      try
        res += _ObjectToString(BuiltInKernels);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Name                               = ';
      try
        res += _ObjectToString(Name);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Vendor                             = ';
      try
        res += _ObjectToString(Vendor);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'DriverVersion                      = ';
      try
        res += _ObjectToString(DriverVersion);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Profile                            = ';
      try
        res += _ObjectToString(Profile);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Version                            = ';
      try
        res += _ObjectToString(Version);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'OpenclCVersion                     = ';
      try
        res += _ObjectToString(OpenclCVersion);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Extensions                         = ';
      try
        res += _ObjectToString(Extensions);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PrintfBufferSize                   = ';
      try
        res += _ObjectToString(PrintfBufferSize);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredInteropUserSync           = ';
      try
        res += _ObjectToString(PreferredInteropUserSync);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PartitionMaxSubDevices             = ';
      try
        res += _ObjectToString(PartitionMaxSubDevices);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PartitionProperties                = ';
      try
        res += _ObjectToString(PartitionProperties);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PartitionAffinityDomain            = ';
      try
        res += _ObjectToString(PartitionAffinityDomain);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PartitionType                      = ';
      try
        res += _ObjectToString(PartitionType);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ReferenceCount                     = ';
      try
        res += _ObjectToString(ReferenceCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'SvmCapabilities                    = ';
      try
        res += _ObjectToString(SvmCapabilities);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredPlatformAtomicAlignment   = ';
      try
        res += _ObjectToString(PreferredPlatformAtomicAlignment);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredGlobalAtomicAlignment     = ';
      try
        res += _ObjectToString(PreferredGlobalAtomicAlignment);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'PreferredLocalAtomicAlignment      = ';
      try
        res += _ObjectToString(PreferredLocalAtomicAlignment);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MaxNumSubGroups                    = ';
      try
        res += _ObjectToString(MaxNumSubGroups);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'SubGroupIndependentForwardProgress = ';
      try
        res += _ObjectToString(SubGroupIndependentForwardProgress);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
    end;
    public function ToString: string; override;
    begin
      var res := new StringBuilder;
      ToString(res);
      Result := res.ToString;
    end;
    
  end;
  
  {$endregion CLDevice}
  
  {$region CLSubDevice}
  
  CLSubDeviceProperties = partial class(CLDeviceProperties)
    
    public constructor(ntv: cl_device_id);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
  end;
  
  {$endregion CLSubDevice}
  
  {$region CLContext}
  
  CLContextProperties = partial class
    
    public constructor(ntv: cl_context);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
    private function GetReferenceCount: UInt32;
    private function GetNumDevices: UInt32;
    private function GetProperties: array of OpenCL.ContextProperties;
    
    public property ReferenceCount: UInt32                            read GetReferenceCount;
    public property NumDevices:     UInt32                            read GetNumDevices;
    public property Properties:     array of OpenCL.ContextProperties read GetProperties;
    
    public procedure ToString(res: StringBuilder); virtual;
    begin
      res += 'ReferenceCount = ';
      try
        res += _ObjectToString(ReferenceCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'NumDevices     = ';
      try
        res += _ObjectToString(NumDevices);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Properties     = ';
      try
        res += _ObjectToString(Properties);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
    end;
    public function ToString: string; override;
    begin
      var res := new StringBuilder;
      ToString(res);
      Result := res.ToString;
    end;
    
  end;
  
  {$endregion CLContext}
  
  {$region CLCode}
  
  CLCodeProperties = partial class
    
    public constructor(ntv: cl_program);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
    private function GetReferenceCount: UInt32;
    private function GetSource: String;
    private function GetIl: array of Byte;
    private function GetScopeGlobalCtorsPresent: Bool;
    private function GetScopeGlobalDtorsPresent: Bool;
    
    public property ReferenceCount:          UInt32        read GetReferenceCount;
    public property Source:                  String        read GetSource;
    public property Il:                      array of Byte read GetIl;
    public property ScopeGlobalCtorsPresent: Bool          read GetScopeGlobalCtorsPresent;
    public property ScopeGlobalDtorsPresent: Bool          read GetScopeGlobalDtorsPresent;
    
    public procedure ToString(res: StringBuilder); virtual;
    begin
      res += 'ReferenceCount          = ';
      try
        res += _ObjectToString(ReferenceCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Source                  = ';
      try
        res += _ObjectToString(Source);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'Il                      = ';
      try
        res += _ObjectToString(Il);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ScopeGlobalCtorsPresent = ';
      try
        res += _ObjectToString(ScopeGlobalCtorsPresent);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ScopeGlobalDtorsPresent = ';
      try
        res += _ObjectToString(ScopeGlobalDtorsPresent);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
    end;
    public function ToString: string; override;
    begin
      var res := new StringBuilder;
      ToString(res);
      Result := res.ToString;
    end;
    
  end;
  
  {$endregion CLCode}
  
  {$region CLMemory}
  
  CLMemoryProperties = partial class
    
    public constructor(ntv: cl_mem);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
    private function GetFlags: MemFlags;
    private function GetHostPtr: IntPtr;
    private function GetMapCount: UInt32;
    private function GetReferenceCount: UInt32;
    private function GetUsesSvmPointer: Bool;
    
    public property Flags:          MemFlags read GetFlags;
    public property HostPtr:        IntPtr   read GetHostPtr;
    public property MapCount:       UInt32   read GetMapCount;
    public property ReferenceCount: UInt32   read GetReferenceCount;
    public property UsesSvmPointer: Bool     read GetUsesSvmPointer;
    
    public procedure ToString(res: StringBuilder); virtual;
    begin
      res += 'Flags          = ';
      try
        res += _ObjectToString(Flags);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'HostPtr        = ';
      try
        res += _ObjectToString(HostPtr);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MapCount       = ';
      try
        res += _ObjectToString(MapCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ReferenceCount = ';
      try
        res += _ObjectToString(ReferenceCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'UsesSvmPointer = ';
      try
        res += _ObjectToString(UsesSvmPointer);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
    end;
    public function ToString: string; override;
    begin
      var res := new StringBuilder;
      ToString(res);
      Result := res.ToString;
    end;
    
  end;
  
  {$endregion CLMemory}
  
  {$region CLMemorySubSegment}
  
  CLMemorySubSegmentProperties = partial class(CLMemoryProperties)
    
    public constructor(ntv: cl_mem);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
    private function GetOffset: UIntPtr;
    
    public property Offset: UIntPtr read GetOffset;
    
    public procedure ToString(res: StringBuilder); override;
    begin
      inherited;
      res += #10;
      res += 'Offset = ';
      try
        res += _ObjectToString(Offset);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
    end;
    
  end;
  
  {$endregion CLMemorySubSegment}
  
  {$region CLValue}
  
  CLValueProperties = partial class
    
    public constructor(ntv: cl_mem);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
    private function GetFlags: MemFlags;
    private function GetHostPtr: IntPtr;
    private function GetMapCount: UInt32;
    private function GetReferenceCount: UInt32;
    private function GetUsesSvmPointer: Bool;
    
    public property Flags:          MemFlags read GetFlags;
    public property HostPtr:        IntPtr   read GetHostPtr;
    public property MapCount:       UInt32   read GetMapCount;
    public property ReferenceCount: UInt32   read GetReferenceCount;
    public property UsesSvmPointer: Bool     read GetUsesSvmPointer;
    
    public procedure ToString(res: StringBuilder); virtual;
    begin
      res += 'Flags          = ';
      try
        res += _ObjectToString(Flags);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'HostPtr        = ';
      try
        res += _ObjectToString(HostPtr);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MapCount       = ';
      try
        res += _ObjectToString(MapCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ReferenceCount = ';
      try
        res += _ObjectToString(ReferenceCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'UsesSvmPointer = ';
      try
        res += _ObjectToString(UsesSvmPointer);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
    end;
    public function ToString: string; override;
    begin
      var res := new StringBuilder;
      ToString(res);
      Result := res.ToString;
    end;
    
  end;
  
  {$endregion CLValue}
  
  {$region CLArray}
  
  CLArrayProperties = partial class
    
    public constructor(ntv: cl_mem);
    private constructor := raise new System.InvalidOperationException($'%Err:NoParamCtor%');
    
    private function GetFlags: MemFlags;
    private function GetHostPtr: IntPtr;
    private function GetMapCount: UInt32;
    private function GetReferenceCount: UInt32;
    private function GetUsesSvmPointer: Bool;
    
    public property Flags:          MemFlags read GetFlags;
    public property HostPtr:        IntPtr   read GetHostPtr;
    public property MapCount:       UInt32   read GetMapCount;
    public property ReferenceCount: UInt32   read GetReferenceCount;
    public property UsesSvmPointer: Bool     read GetUsesSvmPointer;
    
    public procedure ToString(res: StringBuilder); virtual;
    begin
      res += 'Flags          = ';
      try
        res += _ObjectToString(Flags);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'HostPtr        = ';
      try
        res += _ObjectToString(HostPtr);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'MapCount       = ';
      try
        res += _ObjectToString(MapCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'ReferenceCount = ';
      try
        res += _ObjectToString(ReferenceCount);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
      res += #10;
      res += 'UsesSvmPointer = ';
      try
        res += _ObjectToString(UsesSvmPointer);
      except
        on e: OpenCLException do
          res += e.Code.ToString;
      end;
    end;
    public function ToString: string; override;
    begin
      var res := new StringBuilder;
      ToString(res);
      Result := res.ToString;
    end;
    
  end;
  
  {$endregion CLArray}
  
  
  