


{$region Sync}

{$region Simple}

function CombineSyncQueueBase(params qs: array of CommandQueueBase) := QueueArrayUtils.ConstructSync(qs, true);

function CombineSyncQueueNil(params qs: array of CommandQueueNil) := QueueArrayUtils.ConstructSyncNil(qs.Cast&<CommandQueueBase>);
function CombineSyncQueueNil(qs: array of CommandQueueBase; last: CommandQueueNil) := QueueArrayUtils.ConstructSyncNil(qs.Append&<CommandQueueBase>(last));

function CombineSyncQueue<T>(params qs: array of CommandQueue<T>) := QueueArrayUtils.ConstructSync&<T>(qs.Cast&<CommandQueueBase>);
function CombineSyncQueue<T>(qs: array of CommandQueueBase; last: CommandQueue<T>) := QueueArrayUtils.ConstructSync&<T>(qs.Append&<CommandQueueBase>(last));

{$endregion Simple}

{$region Conv}

{$region NonContext}

function CombineConstConvSyncQueue<TInp, TRes>(conv: Func<array of TInp, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  if qs.All(q->q is ConstQueue<TInp>) then
  begin
    var res := qs.ConvertAll(q->ConstQueue&<TInp>(q).Value);
    Result := conv(res);
  end else
    Result := new CommandQueueConvertQuickArray<TInp, TRes, QueueArraySyncInvoker, SimpleFuncContainer<array of TInp, TRes>, TBooleanTrueFlag>(qs.ToArray, conv);
end;

function CombineConstConvSyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value);
  end else
    Result := new CommandQueueConvertQuickArray2<TInp1,TInp2,TRes, QueueArray2SyncInvoker, SimpleFunc2Container<TInp1,TInp2,TRes>, TBooleanTrueFlag>(q1,q2, conv);
end;
function CombineConstConvSyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value);
  end else
    Result := new CommandQueueConvertQuickArray3<TInp1,TInp2,TInp3,TRes, QueueArray3SyncInvoker, SimpleFunc3Container<TInp1,TInp2,TInp3,TRes>, TBooleanTrueFlag>(q1,q2,q3, conv);
end;
function CombineConstConvSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value);
  end else
    Result := new CommandQueueConvertQuickArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4SyncInvoker, SimpleFunc4Container<TInp1,TInp2,TInp3,TInp4,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4, conv);
end;
function CombineConstConvSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value);
  end else
    Result := new CommandQueueConvertQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5SyncInvoker, SimpleFunc5Container<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5, conv);
end;
function CombineConstConvSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value);
  end else
    Result := new CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6SyncInvoker, SimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineConstConvSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) and (q7 is ConstQueue<TInp7>(var c_q7)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value);
  end else
    Result := new CommandQueueConvertQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7SyncInvoker, SimpleFunc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

function CombineQuickConvSyncQueue<TInp, TRes>(conv: Func<array of TInp, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray<TInp, TRes, QueueArraySyncInvoker, SimpleFuncContainer<array of TInp, TRes>, TBooleanFalseFlag>(qs.ToArray, conv);
end;

function CombineQuickConvSyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray2<TInp1,TInp2,TRes, QueueArray2SyncInvoker, SimpleFunc2Container<TInp1,TInp2,TRes>, TBooleanFalseFlag>(q1,q2, conv);
end;
function CombineQuickConvSyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray3<TInp1,TInp2,TInp3,TRes, QueueArray3SyncInvoker, SimpleFunc3Container<TInp1,TInp2,TInp3,TRes>, TBooleanFalseFlag>(q1,q2,q3, conv);
end;
function CombineQuickConvSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4SyncInvoker, SimpleFunc4Container<TInp1,TInp2,TInp3,TInp4,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4, conv);
end;
function CombineQuickConvSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5SyncInvoker, SimpleFunc5Container<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5, conv);
end;
function CombineQuickConvSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6SyncInvoker, SimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineQuickConvSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7SyncInvoker, SimpleFunc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

function CombineThreadedConvSyncQueue<TInp, TRes>(conv: Func<array of TInp, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray<TInp, TRes, QueueArraySyncInvoker, SimpleFuncContainer<array of TInp, TRes>>(qs.ToArray, conv);
end;

function CombineThreadedConvSyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray2<TInp1,TInp2,TRes, QueueArray2SyncInvoker, SimpleFunc2Container<TInp1,TInp2,TRes>>(q1,q2, conv);
end;
function CombineThreadedConvSyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray3<TInp1,TInp2,TInp3,TRes, QueueArray3SyncInvoker, SimpleFunc3Container<TInp1,TInp2,TInp3,TRes>>(q1,q2,q3, conv);
end;
function CombineThreadedConvSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4SyncInvoker, SimpleFunc4Container<TInp1,TInp2,TInp3,TInp4,TRes>>(q1,q2,q3,q4, conv);
end;
function CombineThreadedConvSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5SyncInvoker, SimpleFunc5Container<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>>(q1,q2,q3,q4,q5, conv);
end;
function CombineThreadedConvSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6SyncInvoker, SimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineThreadedConvSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7SyncInvoker, SimpleFunc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

{$endregion NonContext}

{$region CLContext}

function CombineConstConvSyncQueue<TInp, TRes>(conv: Func<array of TInp, CLContext, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  if qs.All(q->q is ConstQueue<TInp>) then
  begin
    var res := qs.ConvertAll(q->ConstQueue&<TInp>(q).Value);
    Result := conv(res, nil);
  end else
    Result := new CommandQueueConvertQuickArray<TInp, TRes, QueueArraySyncInvoker, SimpleFuncContainerC<array of TInp, TRes>, TBooleanTrueFlag>(qs.ToArray, conv);
end;

function CombineConstConvSyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray2<TInp1,TInp2,TRes, QueueArray2SyncInvoker, SimpleFunc2ContainerC<TInp1,TInp2,TRes>, TBooleanTrueFlag>(q1,q2, conv);
end;
function CombineConstConvSyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray3<TInp1,TInp2,TInp3,TRes, QueueArray3SyncInvoker, SimpleFunc3ContainerC<TInp1,TInp2,TInp3,TRes>, TBooleanTrueFlag>(q1,q2,q3, conv);
end;
function CombineConstConvSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4SyncInvoker, SimpleFunc4ContainerC<TInp1,TInp2,TInp3,TInp4,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4, conv);
end;
function CombineConstConvSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5SyncInvoker, SimpleFunc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5, conv);
end;
function CombineConstConvSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6SyncInvoker, SimpleFunc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineConstConvSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) and (q7 is ConstQueue<TInp7>(var c_q7)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7SyncInvoker, SimpleFunc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

function CombineQuickConvSyncQueue<TInp, TRes>(conv: Func<array of TInp, CLContext, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray<TInp, TRes, QueueArraySyncInvoker, SimpleFuncContainerC<array of TInp, TRes>, TBooleanFalseFlag>(qs.ToArray, conv);
end;

function CombineQuickConvSyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray2<TInp1,TInp2,TRes, QueueArray2SyncInvoker, SimpleFunc2ContainerC<TInp1,TInp2,TRes>, TBooleanFalseFlag>(q1,q2, conv);
end;
function CombineQuickConvSyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray3<TInp1,TInp2,TInp3,TRes, QueueArray3SyncInvoker, SimpleFunc3ContainerC<TInp1,TInp2,TInp3,TRes>, TBooleanFalseFlag>(q1,q2,q3, conv);
end;
function CombineQuickConvSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4SyncInvoker, SimpleFunc4ContainerC<TInp1,TInp2,TInp3,TInp4,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4, conv);
end;
function CombineQuickConvSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5SyncInvoker, SimpleFunc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5, conv);
end;
function CombineQuickConvSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6SyncInvoker, SimpleFunc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineQuickConvSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7SyncInvoker, SimpleFunc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

function CombineThreadedConvSyncQueue<TInp, TRes>(conv: Func<array of TInp, CLContext, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray<TInp, TRes, QueueArraySyncInvoker, SimpleFuncContainerC<array of TInp, TRes>>(qs.ToArray, conv);
end;

function CombineThreadedConvSyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray2<TInp1,TInp2,TRes, QueueArray2SyncInvoker, SimpleFunc2ContainerC<TInp1,TInp2,TRes>>(q1,q2, conv);
end;
function CombineThreadedConvSyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray3<TInp1,TInp2,TInp3,TRes, QueueArray3SyncInvoker, SimpleFunc3ContainerC<TInp1,TInp2,TInp3,TRes>>(q1,q2,q3, conv);
end;
function CombineThreadedConvSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4SyncInvoker, SimpleFunc4ContainerC<TInp1,TInp2,TInp3,TInp4,TRes>>(q1,q2,q3,q4, conv);
end;
function CombineThreadedConvSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5SyncInvoker, SimpleFunc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>>(q1,q2,q3,q4,q5, conv);
end;
function CombineThreadedConvSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6SyncInvoker, SimpleFunc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineThreadedConvSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7SyncInvoker, SimpleFunc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

{$endregion CLContext}

{$endregion Conv}

{$region Use}

{$region NonContext}

function CombineConstUseSyncQueue<TInp>(use: Action<array of TInp>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  if qs.All(q->q is ConstQueue<TInp>) then
  begin
    var res := qs.ConvertAll(q->ConstQueue&<TInp>(q).Value);
    use(res);
    Result := res;
  end else
    Result := new CommandQueueUseQuickArray<TInp, QueueArraySyncInvoker, SimpleProcContainer<array of TInp>, TBooleanTrueFlag>(qs.ToArray, use);
end;

function CombineConstUseSyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) then
  begin
    use(c_q1.Value, c_q2.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value);
  end else
    Result := new CommandQueueUseQuickArray2<TInp1,TInp2, QueueArray2SyncInvoker, SimpleProc2Container<TInp1,TInp2>, TBooleanTrueFlag>(q1,q2, use);
end;
function CombineConstUseSyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value);
  end else
    Result := new CommandQueueUseQuickArray3<TInp1,TInp2,TInp3, QueueArray3SyncInvoker, SimpleProc3Container<TInp1,TInp2,TInp3>, TBooleanTrueFlag>(q1,q2,q3, use);
end;
function CombineConstUseSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value);
  end else
    Result := new CommandQueueUseQuickArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4SyncInvoker, SimpleProc4Container<TInp1,TInp2,TInp3,TInp4>, TBooleanTrueFlag>(q1,q2,q3,q4, use);
end;
function CombineConstUseSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value);
  end else
    Result := new CommandQueueUseQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5SyncInvoker, SimpleProc5Container<TInp1,TInp2,TInp3,TInp4,TInp5>, TBooleanTrueFlag>(q1,q2,q3,q4,q5, use);
end;
function CombineConstUseSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value);
  end else
    Result := new CommandQueueUseQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6SyncInvoker, SimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineConstUseSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) and (q7 is ConstQueue<TInp7>(var c_q7)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value);
  end else
    Result := new CommandQueueUseQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7SyncInvoker, SimpleProc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6,q7, use);
end;

function CombineQuickUseSyncQueue<TInp>(use: Action<array of TInp>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  Result := new CommandQueueUseQuickArray<TInp, QueueArraySyncInvoker, SimpleProcContainer<array of TInp>, TBooleanFalseFlag>(qs.ToArray, use);
end;

function CombineQuickUseSyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  Result := new CommandQueueUseQuickArray2<TInp1,TInp2, QueueArray2SyncInvoker, SimpleProc2Container<TInp1,TInp2>, TBooleanFalseFlag>(q1,q2, use);
end;
function CombineQuickUseSyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  Result := new CommandQueueUseQuickArray3<TInp1,TInp2,TInp3, QueueArray3SyncInvoker, SimpleProc3Container<TInp1,TInp2,TInp3>, TBooleanFalseFlag>(q1,q2,q3, use);
end;
function CombineQuickUseSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  Result := new CommandQueueUseQuickArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4SyncInvoker, SimpleProc4Container<TInp1,TInp2,TInp3,TInp4>, TBooleanFalseFlag>(q1,q2,q3,q4, use);
end;
function CombineQuickUseSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  Result := new CommandQueueUseQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5SyncInvoker, SimpleProc5Container<TInp1,TInp2,TInp3,TInp4,TInp5>, TBooleanFalseFlag>(q1,q2,q3,q4,q5, use);
end;
function CombineQuickUseSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  Result := new CommandQueueUseQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6SyncInvoker, SimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineQuickUseSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  Result := new CommandQueueUseQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7SyncInvoker, SimpleProc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6,q7, use);
end;

function CombineThreadedUseSyncQueue<TInp>(use: Action<array of TInp>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  Result := new CommandQueueUseThreadedArray<TInp, QueueArraySyncInvoker, SimpleProcContainer<array of TInp>>(qs.ToArray, use);
end;

function CombineThreadedUseSyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  Result := new CommandQueueUseThreadedArray2<TInp1,TInp2, QueueArray2SyncInvoker, SimpleProc2Container<TInp1,TInp2>>(q1,q2, use);
end;
function CombineThreadedUseSyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  Result := new CommandQueueUseThreadedArray3<TInp1,TInp2,TInp3, QueueArray3SyncInvoker, SimpleProc3Container<TInp1,TInp2,TInp3>>(q1,q2,q3, use);
end;
function CombineThreadedUseSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  Result := new CommandQueueUseThreadedArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4SyncInvoker, SimpleProc4Container<TInp1,TInp2,TInp3,TInp4>>(q1,q2,q3,q4, use);
end;
function CombineThreadedUseSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  Result := new CommandQueueUseThreadedArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5SyncInvoker, SimpleProc5Container<TInp1,TInp2,TInp3,TInp4,TInp5>>(q1,q2,q3,q4,q5, use);
end;
function CombineThreadedUseSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  Result := new CommandQueueUseThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6SyncInvoker, SimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineThreadedUseSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  Result := new CommandQueueUseThreadedArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7SyncInvoker, SimpleProc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>(q1,q2,q3,q4,q5,q6,q7, use);
end;

{$endregion NonContext}

{$region CLContext}

function CombineConstUseSyncQueue<TInp>(use: Action<array of TInp, CLContext>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  if qs.All(q->q is ConstQueue<TInp>) then
  begin
    var res := qs.ConvertAll(q->ConstQueue&<TInp>(q).Value);
    use(res, nil);
    Result := res;
  end else
    Result := new CommandQueueUseQuickArray<TInp, QueueArraySyncInvoker, SimpleProcContainerC<array of TInp>, TBooleanTrueFlag>(qs.ToArray, use);
end;

function CombineConstUseSyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) then
  begin
    use(c_q1.Value, c_q2.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value);
  end else
    Result := new CommandQueueUseQuickArray2<TInp1,TInp2, QueueArray2SyncInvoker, SimpleProc2ContainerC<TInp1,TInp2>, TBooleanTrueFlag>(q1,q2, use);
end;
function CombineConstUseSyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value);
  end else
    Result := new CommandQueueUseQuickArray3<TInp1,TInp2,TInp3, QueueArray3SyncInvoker, SimpleProc3ContainerC<TInp1,TInp2,TInp3>, TBooleanTrueFlag>(q1,q2,q3, use);
end;
function CombineConstUseSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value);
  end else
    Result := new CommandQueueUseQuickArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4SyncInvoker, SimpleProc4ContainerC<TInp1,TInp2,TInp3,TInp4>, TBooleanTrueFlag>(q1,q2,q3,q4, use);
end;
function CombineConstUseSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value);
  end else
    Result := new CommandQueueUseQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5SyncInvoker, SimpleProc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5>, TBooleanTrueFlag>(q1,q2,q3,q4,q5, use);
end;
function CombineConstUseSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value);
  end else
    Result := new CommandQueueUseQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6SyncInvoker, SimpleProc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineConstUseSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) and (q7 is ConstQueue<TInp7>(var c_q7)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value);
  end else
    Result := new CommandQueueUseQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7SyncInvoker, SimpleProc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6,q7, use);
end;

function CombineQuickUseSyncQueue<TInp>(use: Action<array of TInp, CLContext>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  Result := new CommandQueueUseQuickArray<TInp, QueueArraySyncInvoker, SimpleProcContainerC<array of TInp>, TBooleanFalseFlag>(qs.ToArray, use);
end;

function CombineQuickUseSyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  Result := new CommandQueueUseQuickArray2<TInp1,TInp2, QueueArray2SyncInvoker, SimpleProc2ContainerC<TInp1,TInp2>, TBooleanFalseFlag>(q1,q2, use);
end;
function CombineQuickUseSyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  Result := new CommandQueueUseQuickArray3<TInp1,TInp2,TInp3, QueueArray3SyncInvoker, SimpleProc3ContainerC<TInp1,TInp2,TInp3>, TBooleanFalseFlag>(q1,q2,q3, use);
end;
function CombineQuickUseSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  Result := new CommandQueueUseQuickArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4SyncInvoker, SimpleProc4ContainerC<TInp1,TInp2,TInp3,TInp4>, TBooleanFalseFlag>(q1,q2,q3,q4, use);
end;
function CombineQuickUseSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  Result := new CommandQueueUseQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5SyncInvoker, SimpleProc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5>, TBooleanFalseFlag>(q1,q2,q3,q4,q5, use);
end;
function CombineQuickUseSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  Result := new CommandQueueUseQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6SyncInvoker, SimpleProc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineQuickUseSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  Result := new CommandQueueUseQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7SyncInvoker, SimpleProc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6,q7, use);
end;

function CombineThreadedUseSyncQueue<TInp>(use: Action<array of TInp, CLContext>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  Result := new CommandQueueUseThreadedArray<TInp, QueueArraySyncInvoker, SimpleProcContainerC<array of TInp>>(qs.ToArray, use);
end;

function CombineThreadedUseSyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  Result := new CommandQueueUseThreadedArray2<TInp1,TInp2, QueueArray2SyncInvoker, SimpleProc2ContainerC<TInp1,TInp2>>(q1,q2, use);
end;
function CombineThreadedUseSyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  Result := new CommandQueueUseThreadedArray3<TInp1,TInp2,TInp3, QueueArray3SyncInvoker, SimpleProc3ContainerC<TInp1,TInp2,TInp3>>(q1,q2,q3, use);
end;
function CombineThreadedUseSyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  Result := new CommandQueueUseThreadedArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4SyncInvoker, SimpleProc4ContainerC<TInp1,TInp2,TInp3,TInp4>>(q1,q2,q3,q4, use);
end;
function CombineThreadedUseSyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  Result := new CommandQueueUseThreadedArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5SyncInvoker, SimpleProc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5>>(q1,q2,q3,q4,q5, use);
end;
function CombineThreadedUseSyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  Result := new CommandQueueUseThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6SyncInvoker, SimpleProc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineThreadedUseSyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  Result := new CommandQueueUseThreadedArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7SyncInvoker, SimpleProc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>(q1,q2,q3,q4,q5,q6,q7, use);
end;

{$endregion CLContext}

{$endregion Use}

{$endregion Sync}

{$region Async}

{$region Simple}

function CombineAsyncQueueBase(params qs: array of CommandQueueBase) := QueueArrayUtils.ConstructAsync(qs, true);

function CombineAsyncQueueNil(params qs: array of CommandQueueNil) := QueueArrayUtils.ConstructAsyncNil(qs.Cast&<CommandQueueBase>);
function CombineAsyncQueueNil(qs: array of CommandQueueBase; last: CommandQueueNil) := QueueArrayUtils.ConstructAsyncNil(qs.Append&<CommandQueueBase>(last));

function CombineAsyncQueue<T>(params qs: array of CommandQueue<T>) := QueueArrayUtils.ConstructAsync&<T>(qs.Cast&<CommandQueueBase>);
function CombineAsyncQueue<T>(qs: array of CommandQueueBase; last: CommandQueue<T>) := QueueArrayUtils.ConstructAsync&<T>(qs.Append&<CommandQueueBase>(last));

{$endregion Simple}

{$region Conv}

{$region NonContext}

function CombineConstConvAsyncQueue<TInp, TRes>(conv: Func<array of TInp, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  if qs.All(q->q is ConstQueue<TInp>) then
  begin
    var res := qs.ConvertAll(q->ConstQueue&<TInp>(q).Value);
    Result := conv(res);
  end else
    Result := new CommandQueueConvertQuickArray<TInp, TRes, QueueArrayAsyncInvoker, SimpleFuncContainer<array of TInp, TRes>, TBooleanTrueFlag>(qs.ToArray, conv);
end;

function CombineConstConvAsyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value);
  end else
    Result := new CommandQueueConvertQuickArray2<TInp1,TInp2,TRes, QueueArray2AsyncInvoker, SimpleFunc2Container<TInp1,TInp2,TRes>, TBooleanTrueFlag>(q1,q2, conv);
end;
function CombineConstConvAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value);
  end else
    Result := new CommandQueueConvertQuickArray3<TInp1,TInp2,TInp3,TRes, QueueArray3AsyncInvoker, SimpleFunc3Container<TInp1,TInp2,TInp3,TRes>, TBooleanTrueFlag>(q1,q2,q3, conv);
end;
function CombineConstConvAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value);
  end else
    Result := new CommandQueueConvertQuickArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4AsyncInvoker, SimpleFunc4Container<TInp1,TInp2,TInp3,TInp4,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4, conv);
end;
function CombineConstConvAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value);
  end else
    Result := new CommandQueueConvertQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5AsyncInvoker, SimpleFunc5Container<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5, conv);
end;
function CombineConstConvAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value);
  end else
    Result := new CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6AsyncInvoker, SimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineConstConvAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) and (q7 is ConstQueue<TInp7>(var c_q7)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value);
  end else
    Result := new CommandQueueConvertQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7AsyncInvoker, SimpleFunc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

function CombineQuickConvAsyncQueue<TInp, TRes>(conv: Func<array of TInp, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray<TInp, TRes, QueueArrayAsyncInvoker, SimpleFuncContainer<array of TInp, TRes>, TBooleanFalseFlag>(qs.ToArray, conv);
end;

function CombineQuickConvAsyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray2<TInp1,TInp2,TRes, QueueArray2AsyncInvoker, SimpleFunc2Container<TInp1,TInp2,TRes>, TBooleanFalseFlag>(q1,q2, conv);
end;
function CombineQuickConvAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray3<TInp1,TInp2,TInp3,TRes, QueueArray3AsyncInvoker, SimpleFunc3Container<TInp1,TInp2,TInp3,TRes>, TBooleanFalseFlag>(q1,q2,q3, conv);
end;
function CombineQuickConvAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4AsyncInvoker, SimpleFunc4Container<TInp1,TInp2,TInp3,TInp4,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4, conv);
end;
function CombineQuickConvAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5AsyncInvoker, SimpleFunc5Container<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5, conv);
end;
function CombineQuickConvAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6AsyncInvoker, SimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineQuickConvAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7AsyncInvoker, SimpleFunc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

function CombineThreadedConvAsyncQueue<TInp, TRes>(conv: Func<array of TInp, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray<TInp, TRes, QueueArrayAsyncInvoker, SimpleFuncContainer<array of TInp, TRes>>(qs.ToArray, conv);
end;

function CombineThreadedConvAsyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray2<TInp1,TInp2,TRes, QueueArray2AsyncInvoker, SimpleFunc2Container<TInp1,TInp2,TRes>>(q1,q2, conv);
end;
function CombineThreadedConvAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray3<TInp1,TInp2,TInp3,TRes, QueueArray3AsyncInvoker, SimpleFunc3Container<TInp1,TInp2,TInp3,TRes>>(q1,q2,q3, conv);
end;
function CombineThreadedConvAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4AsyncInvoker, SimpleFunc4Container<TInp1,TInp2,TInp3,TInp4,TRes>>(q1,q2,q3,q4, conv);
end;
function CombineThreadedConvAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5AsyncInvoker, SimpleFunc5Container<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>>(q1,q2,q3,q4,q5, conv);
end;
function CombineThreadedConvAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6AsyncInvoker, SimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineThreadedConvAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7AsyncInvoker, SimpleFunc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

{$endregion NonContext}

{$region CLContext}

function CombineConstConvAsyncQueue<TInp, TRes>(conv: Func<array of TInp, CLContext, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  if qs.All(q->q is ConstQueue<TInp>) then
  begin
    var res := qs.ConvertAll(q->ConstQueue&<TInp>(q).Value);
    Result := conv(res, nil);
  end else
    Result := new CommandQueueConvertQuickArray<TInp, TRes, QueueArrayAsyncInvoker, SimpleFuncContainerC<array of TInp, TRes>, TBooleanTrueFlag>(qs.ToArray, conv);
end;

function CombineConstConvAsyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray2<TInp1,TInp2,TRes, QueueArray2AsyncInvoker, SimpleFunc2ContainerC<TInp1,TInp2,TRes>, TBooleanTrueFlag>(q1,q2, conv);
end;
function CombineConstConvAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray3<TInp1,TInp2,TInp3,TRes, QueueArray3AsyncInvoker, SimpleFunc3ContainerC<TInp1,TInp2,TInp3,TRes>, TBooleanTrueFlag>(q1,q2,q3, conv);
end;
function CombineConstConvAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4AsyncInvoker, SimpleFunc4ContainerC<TInp1,TInp2,TInp3,TInp4,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4, conv);
end;
function CombineConstConvAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5AsyncInvoker, SimpleFunc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5, conv);
end;
function CombineConstConvAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6AsyncInvoker, SimpleFunc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineConstConvAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) and (q7 is ConstQueue<TInp7>(var c_q7)) then
  begin
    Result := conv(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value, nil);
  end else
    Result := new CommandQueueConvertQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7AsyncInvoker, SimpleFunc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

function CombineQuickConvAsyncQueue<TInp, TRes>(conv: Func<array of TInp, CLContext, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray<TInp, TRes, QueueArrayAsyncInvoker, SimpleFuncContainerC<array of TInp, TRes>, TBooleanFalseFlag>(qs.ToArray, conv);
end;

function CombineQuickConvAsyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray2<TInp1,TInp2,TRes, QueueArray2AsyncInvoker, SimpleFunc2ContainerC<TInp1,TInp2,TRes>, TBooleanFalseFlag>(q1,q2, conv);
end;
function CombineQuickConvAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray3<TInp1,TInp2,TInp3,TRes, QueueArray3AsyncInvoker, SimpleFunc3ContainerC<TInp1,TInp2,TInp3,TRes>, TBooleanFalseFlag>(q1,q2,q3, conv);
end;
function CombineQuickConvAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4AsyncInvoker, SimpleFunc4ContainerC<TInp1,TInp2,TInp3,TInp4,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4, conv);
end;
function CombineQuickConvAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5AsyncInvoker, SimpleFunc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5, conv);
end;
function CombineQuickConvAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6AsyncInvoker, SimpleFunc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineQuickConvAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7AsyncInvoker, SimpleFunc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

function CombineThreadedConvAsyncQueue<TInp, TRes>(conv: Func<array of TInp, CLContext, TRes>; params qs: array of CommandQueue<TInp>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray<TInp, TRes, QueueArrayAsyncInvoker, SimpleFuncContainerC<array of TInp, TRes>>(qs.ToArray, conv);
end;

function CombineThreadedConvAsyncQueueN2<TInp1, TInp2, TRes>(conv: Func<TInp1, TInp2, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray2<TInp1,TInp2,TRes, QueueArray2AsyncInvoker, SimpleFunc2ContainerC<TInp1,TInp2,TRes>>(q1,q2, conv);
end;
function CombineThreadedConvAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(conv: Func<TInp1, TInp2, TInp3, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray3<TInp1,TInp2,TInp3,TRes, QueueArray3AsyncInvoker, SimpleFunc3ContainerC<TInp1,TInp2,TInp3,TRes>>(q1,q2,q3, conv);
end;
function CombineThreadedConvAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray4<TInp1,TInp2,TInp3,TInp4,TRes, QueueArray4AsyncInvoker, SimpleFunc4ContainerC<TInp1,TInp2,TInp3,TInp4,TRes>>(q1,q2,q3,q4, conv);
end;
function CombineThreadedConvAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray5<TInp1,TInp2,TInp3,TInp4,TInp5,TRes, QueueArray5AsyncInvoker, SimpleFunc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TRes>>(q1,q2,q3,q4,q5, conv);
end;
function CombineThreadedConvAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, QueueArray6AsyncInvoker, SimpleFunc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>>(q1,q2,q3,q4,q5,q6, conv);
end;
function CombineThreadedConvAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(conv: Func<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext, TRes>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<TRes>;
begin
  Result := new CommandQueueConvertThreadedArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes, QueueArray7AsyncInvoker, SimpleFunc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7,TRes>>(q1,q2,q3,q4,q5,q6,q7, conv);
end;

{$endregion CLContext}

{$endregion Conv}

{$region Use}

{$region NonContext}

function CombineConstUseAsyncQueue<TInp>(use: Action<array of TInp>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  if qs.All(q->q is ConstQueue<TInp>) then
  begin
    var res := qs.ConvertAll(q->ConstQueue&<TInp>(q).Value);
    use(res);
    Result := res;
  end else
    Result := new CommandQueueUseQuickArray<TInp, QueueArrayAsyncInvoker, SimpleProcContainer<array of TInp>, TBooleanTrueFlag>(qs.ToArray, use);
end;

function CombineConstUseAsyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) then
  begin
    use(c_q1.Value, c_q2.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value);
  end else
    Result := new CommandQueueUseQuickArray2<TInp1,TInp2, QueueArray2AsyncInvoker, SimpleProc2Container<TInp1,TInp2>, TBooleanTrueFlag>(q1,q2, use);
end;
function CombineConstUseAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value);
  end else
    Result := new CommandQueueUseQuickArray3<TInp1,TInp2,TInp3, QueueArray3AsyncInvoker, SimpleProc3Container<TInp1,TInp2,TInp3>, TBooleanTrueFlag>(q1,q2,q3, use);
end;
function CombineConstUseAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value);
  end else
    Result := new CommandQueueUseQuickArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4AsyncInvoker, SimpleProc4Container<TInp1,TInp2,TInp3,TInp4>, TBooleanTrueFlag>(q1,q2,q3,q4, use);
end;
function CombineConstUseAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value);
  end else
    Result := new CommandQueueUseQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5AsyncInvoker, SimpleProc5Container<TInp1,TInp2,TInp3,TInp4,TInp5>, TBooleanTrueFlag>(q1,q2,q3,q4,q5, use);
end;
function CombineConstUseAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value);
  end else
    Result := new CommandQueueUseQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6AsyncInvoker, SimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineConstUseAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) and (q7 is ConstQueue<TInp7>(var c_q7)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value);
  end else
    Result := new CommandQueueUseQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7AsyncInvoker, SimpleProc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6,q7, use);
end;

function CombineQuickUseAsyncQueue<TInp>(use: Action<array of TInp>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  Result := new CommandQueueUseQuickArray<TInp, QueueArrayAsyncInvoker, SimpleProcContainer<array of TInp>, TBooleanFalseFlag>(qs.ToArray, use);
end;

function CombineQuickUseAsyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  Result := new CommandQueueUseQuickArray2<TInp1,TInp2, QueueArray2AsyncInvoker, SimpleProc2Container<TInp1,TInp2>, TBooleanFalseFlag>(q1,q2, use);
end;
function CombineQuickUseAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  Result := new CommandQueueUseQuickArray3<TInp1,TInp2,TInp3, QueueArray3AsyncInvoker, SimpleProc3Container<TInp1,TInp2,TInp3>, TBooleanFalseFlag>(q1,q2,q3, use);
end;
function CombineQuickUseAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  Result := new CommandQueueUseQuickArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4AsyncInvoker, SimpleProc4Container<TInp1,TInp2,TInp3,TInp4>, TBooleanFalseFlag>(q1,q2,q3,q4, use);
end;
function CombineQuickUseAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  Result := new CommandQueueUseQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5AsyncInvoker, SimpleProc5Container<TInp1,TInp2,TInp3,TInp4,TInp5>, TBooleanFalseFlag>(q1,q2,q3,q4,q5, use);
end;
function CombineQuickUseAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  Result := new CommandQueueUseQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6AsyncInvoker, SimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineQuickUseAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  Result := new CommandQueueUseQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7AsyncInvoker, SimpleProc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6,q7, use);
end;

function CombineThreadedUseAsyncQueue<TInp>(use: Action<array of TInp>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  Result := new CommandQueueUseThreadedArray<TInp, QueueArrayAsyncInvoker, SimpleProcContainer<array of TInp>>(qs.ToArray, use);
end;

function CombineThreadedUseAsyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  Result := new CommandQueueUseThreadedArray2<TInp1,TInp2, QueueArray2AsyncInvoker, SimpleProc2Container<TInp1,TInp2>>(q1,q2, use);
end;
function CombineThreadedUseAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  Result := new CommandQueueUseThreadedArray3<TInp1,TInp2,TInp3, QueueArray3AsyncInvoker, SimpleProc3Container<TInp1,TInp2,TInp3>>(q1,q2,q3, use);
end;
function CombineThreadedUseAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  Result := new CommandQueueUseThreadedArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4AsyncInvoker, SimpleProc4Container<TInp1,TInp2,TInp3,TInp4>>(q1,q2,q3,q4, use);
end;
function CombineThreadedUseAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  Result := new CommandQueueUseThreadedArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5AsyncInvoker, SimpleProc5Container<TInp1,TInp2,TInp3,TInp4,TInp5>>(q1,q2,q3,q4,q5, use);
end;
function CombineThreadedUseAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  Result := new CommandQueueUseThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6AsyncInvoker, SimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineThreadedUseAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  Result := new CommandQueueUseThreadedArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7AsyncInvoker, SimpleProc7Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>(q1,q2,q3,q4,q5,q6,q7, use);
end;

{$endregion NonContext}

{$region CLContext}

function CombineConstUseAsyncQueue<TInp>(use: Action<array of TInp, CLContext>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  if qs.All(q->q is ConstQueue<TInp>) then
  begin
    var res := qs.ConvertAll(q->ConstQueue&<TInp>(q).Value);
    use(res, nil);
    Result := res;
  end else
    Result := new CommandQueueUseQuickArray<TInp, QueueArrayAsyncInvoker, SimpleProcContainerC<array of TInp>, TBooleanTrueFlag>(qs.ToArray, use);
end;

function CombineConstUseAsyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) then
  begin
    use(c_q1.Value, c_q2.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value);
  end else
    Result := new CommandQueueUseQuickArray2<TInp1,TInp2, QueueArray2AsyncInvoker, SimpleProc2ContainerC<TInp1,TInp2>, TBooleanTrueFlag>(q1,q2, use);
end;
function CombineConstUseAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value);
  end else
    Result := new CommandQueueUseQuickArray3<TInp1,TInp2,TInp3, QueueArray3AsyncInvoker, SimpleProc3ContainerC<TInp1,TInp2,TInp3>, TBooleanTrueFlag>(q1,q2,q3, use);
end;
function CombineConstUseAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value);
  end else
    Result := new CommandQueueUseQuickArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4AsyncInvoker, SimpleProc4ContainerC<TInp1,TInp2,TInp3,TInp4>, TBooleanTrueFlag>(q1,q2,q3,q4, use);
end;
function CombineConstUseAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value);
  end else
    Result := new CommandQueueUseQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5AsyncInvoker, SimpleProc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5>, TBooleanTrueFlag>(q1,q2,q3,q4,q5, use);
end;
function CombineConstUseAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value);
  end else
    Result := new CommandQueueUseQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6AsyncInvoker, SimpleProc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineConstUseAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  if (q1 is ConstQueue<TInp1>(var c_q1)) and (q2 is ConstQueue<TInp2>(var c_q2)) and (q3 is ConstQueue<TInp3>(var c_q3)) and (q4 is ConstQueue<TInp4>(var c_q4)) and (q5 is ConstQueue<TInp5>(var c_q5)) and (q6 is ConstQueue<TInp6>(var c_q6)) and (q7 is ConstQueue<TInp7>(var c_q7)) then
  begin
    use(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value, nil);
    Result := ValueTuple.Create(c_q1.Value, c_q2.Value, c_q3.Value, c_q4.Value, c_q5.Value, c_q6.Value, c_q7.Value);
  end else
    Result := new CommandQueueUseQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7AsyncInvoker, SimpleProc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>, TBooleanTrueFlag>(q1,q2,q3,q4,q5,q6,q7, use);
end;

function CombineQuickUseAsyncQueue<TInp>(use: Action<array of TInp, CLContext>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  Result := new CommandQueueUseQuickArray<TInp, QueueArrayAsyncInvoker, SimpleProcContainerC<array of TInp>, TBooleanFalseFlag>(qs.ToArray, use);
end;

function CombineQuickUseAsyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  Result := new CommandQueueUseQuickArray2<TInp1,TInp2, QueueArray2AsyncInvoker, SimpleProc2ContainerC<TInp1,TInp2>, TBooleanFalseFlag>(q1,q2, use);
end;
function CombineQuickUseAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  Result := new CommandQueueUseQuickArray3<TInp1,TInp2,TInp3, QueueArray3AsyncInvoker, SimpleProc3ContainerC<TInp1,TInp2,TInp3>, TBooleanFalseFlag>(q1,q2,q3, use);
end;
function CombineQuickUseAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  Result := new CommandQueueUseQuickArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4AsyncInvoker, SimpleProc4ContainerC<TInp1,TInp2,TInp3,TInp4>, TBooleanFalseFlag>(q1,q2,q3,q4, use);
end;
function CombineQuickUseAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  Result := new CommandQueueUseQuickArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5AsyncInvoker, SimpleProc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5>, TBooleanFalseFlag>(q1,q2,q3,q4,q5, use);
end;
function CombineQuickUseAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  Result := new CommandQueueUseQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6AsyncInvoker, SimpleProc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineQuickUseAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  Result := new CommandQueueUseQuickArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7AsyncInvoker, SimpleProc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>, TBooleanFalseFlag>(q1,q2,q3,q4,q5,q6,q7, use);
end;

function CombineThreadedUseAsyncQueue<TInp>(use: Action<array of TInp, CLContext>; params qs: array of CommandQueue<TInp>): CommandQueue<array of TInp>;
begin
  Result := new CommandQueueUseThreadedArray<TInp, QueueArrayAsyncInvoker, SimpleProcContainerC<array of TInp>>(qs.ToArray, use);
end;

function CombineThreadedUseAsyncQueueN2<TInp1, TInp2, TRes>(use: Action<TInp1, TInp2, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>): CommandQueue<ValueTuple<TInp1,TInp2>>;
begin
  Result := new CommandQueueUseThreadedArray2<TInp1,TInp2, QueueArray2AsyncInvoker, SimpleProc2ContainerC<TInp1,TInp2>>(q1,q2, use);
end;
function CombineThreadedUseAsyncQueueN3<TInp1, TInp2, TInp3, TRes>(use: Action<TInp1, TInp2, TInp3, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3>>;
begin
  Result := new CommandQueueUseThreadedArray3<TInp1,TInp2,TInp3, QueueArray3AsyncInvoker, SimpleProc3ContainerC<TInp1,TInp2,TInp3>>(q1,q2,q3, use);
end;
function CombineThreadedUseAsyncQueueN4<TInp1, TInp2, TInp3, TInp4, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4>>;
begin
  Result := new CommandQueueUseThreadedArray4<TInp1,TInp2,TInp3,TInp4, QueueArray4AsyncInvoker, SimpleProc4ContainerC<TInp1,TInp2,TInp3,TInp4>>(q1,q2,q3,q4, use);
end;
function CombineThreadedUseAsyncQueueN5<TInp1, TInp2, TInp3, TInp4, TInp5, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5>>;
begin
  Result := new CommandQueueUseThreadedArray5<TInp1,TInp2,TInp3,TInp4,TInp5, QueueArray5AsyncInvoker, SimpleProc5ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5>>(q1,q2,q3,q4,q5, use);
end;
function CombineThreadedUseAsyncQueueN6<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>;
begin
  Result := new CommandQueueUseThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, QueueArray6AsyncInvoker, SimpleProc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>>(q1,q2,q3,q4,q5,q6, use);
end;
function CombineThreadedUseAsyncQueueN7<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, TRes>(use: Action<TInp1, TInp2, TInp3, TInp4, TInp5, TInp6, TInp7, CLContext>; q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; q7: CommandQueue<TInp7>): CommandQueue<ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>;
begin
  Result := new CommandQueueUseThreadedArray7<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7, QueueArray7AsyncInvoker, SimpleProc7ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TInp7>>(q1,q2,q3,q4,q5,q6,q7, use);
end;

{$endregion CLContext}

{$endregion Use}

{$endregion Async}


