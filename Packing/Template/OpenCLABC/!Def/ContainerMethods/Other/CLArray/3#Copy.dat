


# Copy[%direction:To,From%]!CLMemory[%AutoSize:AutoSize,%]
mem: CommandQueue<CLMemory>{%AutoSize?:; mem_offset, ind, len\: CommandQueue<integer>%}
!Enqueue
var uptr_mem_offset := {%AutoSize? UIntPtr.Zero : new UIntPtr(!mem_offset!) %};
var uptr_own_offset := {%AutoSize? UIntPtr.Zero : new UIntPtr(!ind!*Marshal.SizeOf(default(T))) %};
var ec := cl.EnqueueCopyBuffer(
  cq, {%direction? o.Native,!mem!.Native : !mem!.Native,o.Native %},
  {%direction? uptr_own_offset,uptr_mem_offset : uptr_mem_offset,uptr_own_offset %},
  new UIntPtr({%AutoSize? Min(o.ByteSize, !mem!.Size64) : !len!*Marshal.SizeOf(default(T)) %}),
  !evs!
);
OpenCLABCInternalException.RaiseIfError(ec);



# Copy[%direction:To,From%]!CLValue
val: CommandQueue<CLValue<&T>>; ind: CommandQueue<integer>
!Enqueue
var ec := cl.EnqueueCopyBuffer(
  cq, {%direction? o.Native,!val!.Native : !val!.Native,o.Native %},
  {%direction? new UIntPtr(!ind!*Marshal.SizeOf(default(T))),UIntPtr.Zero : UIntPtr.Zero,new UIntPtr(!ind!*Marshal.SizeOf(default(T))) %},
  new UIntPtr(Marshal.SizeOf(default(T))),
  !evs!
);
OpenCLABCInternalException.RaiseIfError(ec);



# Copy[%direction:To,From%]!CLArray[%AutoSize:AutoSize,%]
a: CommandQueue<CLArray<&T>>{%AutoSize?:; from_ind, to_ind, len\: CommandQueue<integer>%}
!Enqueue
var ec := cl.EnqueueCopyBuffer(
  cq, {%direction? o.Native,!a!.Native : !a!.Native,o.Native %},
  {%AutoSize? UIntPtr.Zero, UIntPtr.Zero : new UIntPtr(!from_ind!*Marshal.SizeOf(default(T))), new UIntPtr(!to_ind!*Marshal.SizeOf(default(T))) %},
  new UIntPtr({%AutoSize? Min(o.ByteSize, a.ByteSize) : !len!*Marshal.SizeOf(default(T)) %}),
  !evs!
);
OpenCLABCInternalException.RaiseIfError(ec);


