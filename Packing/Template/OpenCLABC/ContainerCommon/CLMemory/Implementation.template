


constructor CLMemoryCCQ.Create(q: CommandQueue<CLMemory>) := inherited;
constructor CLMemoryCCQ.Create := inherited;

function MakeCCQ(self: CommandQueue<CLMemory>): CLMemoryCCQ; extensionmethod;
begin
  Result := new CLMemoryCCQ(self);
end;

{$region Special .Add's}

function CLMemoryCCQ.ThenQueue(q: CommandQueueBase): CLMemoryCCQ;
begin
  var comm := QueueCommandConstructor&<CLMemory>.Make(q);
  Result := if comm=nil then self else AddCommand(self, comm);
end;

function CLMemoryCCQ.ThenProc(p: CLMemory->(); need_own_thread, can_pre_calc: boolean) := AddCommand(self, ProcCommandConstructor&<CLMemory>.Make&<SimpleProcContainer<CLMemory>>(p, need_own_thread, can_pre_calc));
function CLMemoryCCQ.ThenProc(p: (CLMemory, CLContext)->(); need_own_thread, can_pre_calc: boolean) := AddCommand(self, ProcCommandConstructor&<CLMemory>.Make&<SimpleProcContainerC<CLMemory>>(p, need_own_thread, can_pre_calc));

function CLMemoryCCQ.ThenWait(marker: WaitMarker) := AddCommand(self, WaitCommandConstructor&<CLMemory>.Make(marker));

{$endregion Special .Add's}


