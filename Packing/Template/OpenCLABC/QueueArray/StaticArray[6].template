  
  
  
  {$region Common}
  
  CommandQueueArray6WithWork<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TDelegate> = abstract class(CommandQueue<TRes>)  where TDelegate: ISimpleDelegateContainer;
    protected q1: CommandQueue<TInp1>;
    protected q2: CommandQueue<TInp2>;
    protected q3: CommandQueue<TInp3>;
    protected q4: CommandQueue<TInp4>;
    protected q5: CommandQueue<TInp5>;
    protected q6: CommandQueue<TInp6>;
    protected d: TDelegate;
    
    public constructor(q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; d: TDelegate);
    begin
      self.q1 := q1;
      self.q2 := q2;
      self.q3 := q3;
      self.q4 := q4;
      self.q5 := q5;
      self.q6 := q6;
      self.d := d;
    end;
    private constructor := raise new OpenCLABCInternalException;
    
    protected procedure InitBeforeInvoke(g: CLTaskGlobalData; inited_hubs: HashSet<IMultiusableCommandQueueHub>); override :=
    begin
      q1.InitBeforeInvoke(g, inited_hubs);
      q2.InitBeforeInvoke(g, inited_hubs);
      q3.InitBeforeInvoke(g, inited_hubs);
      q4.InitBeforeInvoke(g, inited_hubs);
      q5.InitBeforeInvoke(g, inited_hubs);
      q6.InitBeforeInvoke(g, inited_hubs);
    end;
    
    private procedure ToStringImpl(sb: StringBuilder; tabs: integer; index: Dictionary<object,integer>; delayed: HashSet<CommandQueueBase>); override;
    begin
      sb += #10;
      q1.ToString(sb, tabs, index, delayed);
      q2.ToString(sb, tabs, index, delayed);
      q3.ToString(sb, tabs, index, delayed);
      q4.ToString(sb, tabs, index, delayed);
      q5.ToString(sb, tabs, index, delayed);
      q6.ToString(sb, tabs, index, delayed);
      sb.Append(#9, tabs);
      d.ToStringB(sb);
      sb += #10;
    end;
    
  end;
  
  ISimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes> = interface(ISimpleDelegateContainer)
    
    function Invoke(inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext): TRes;
    
  end;
  
  SimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes> = record(ISimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>)
    private d: (TInp1,TInp2,TInp3,TInp4,TInp5,TInp6)->TRes;
    
    public static function operator implicit(d: (TInp1,TInp2,TInp3,TInp4,TInp5,TInp6)->TRes): SimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>;
    begin
      Result.d := d;
    end;
    
    public function Invoke(inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext) := d(inp1,inp2,inp3,inp4,inp5,inp6);
    
    public procedure ToStringB(sb: StringBuilder) :=
    CommandQueueBase.ToStringWriteDelegate(sb, d);
    
  end;
  SimpleFunc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes> = record(ISimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>)
    private d: (TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, CLContext)->TRes;
    
    public static function operator implicit(d: (TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, CLContext)->TRes): SimpleFunc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>;
    begin
      Result.d := d;
    end;
    
    public function Invoke(inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext) := d(inp1,inp2,inp3,inp4,inp5,inp6,c);
    
    public procedure ToStringB(sb: StringBuilder) :=
    CommandQueueBase.ToStringWriteDelegate(sb, d);
    
  end;
  
  ISimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6> = interface(ISimpleDelegateContainer)
    
    procedure Invoke(inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext);
    
  end;
  
  SimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6> = record(ISimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>)
    private d: (TInp1,TInp2,TInp3,TInp4,TInp5,TInp6)->();
    
    public static function operator implicit(d: (TInp1,TInp2,TInp3,TInp4,TInp5,TInp6)->()): SimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>;
    begin
      Result.d := d;
    end;
    
    public procedure Invoke(inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext) := d(inp1,inp2,inp3,inp4,inp5,inp6);
    
    public procedure ToStringB(sb: StringBuilder) :=
    CommandQueueBase.ToStringWriteDelegate(sb, d);
    
  end;
  SimpleProc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6> = record(ISimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>)
    private d: (TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, CLContext)->();
    
    public static function operator implicit(d: (TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, CLContext)->()): SimpleProc6ContainerC<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>;
    begin
      Result.d := d;
    end;
    
    public procedure Invoke(inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext) := d(inp1,inp2,inp3,inp4,inp5,inp6,c);
    
    public procedure ToStringB(sb: StringBuilder) :=
    CommandQueueBase.ToStringWriteDelegate(sb, d);
    
  end;
  
  {$endregion Common}
  
  {$region Invokers}
  
  QueueArray6InvokerData<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6> = record
    public all_qrs_const := true;
    public next_l: CLTaskLocalData;
    public qr1: QueueRes<TInp1>;
    public qr2: QueueRes<TInp2>;
    public qr3: QueueRes<TInp3>;
    public qr4: QueueRes<TInp4>;
    public qr5: QueueRes<TInp5>;
    public qr6: QueueRes<TInp6>;
  end;
  
  IQueueArray6Invoker = interface
    
    function Invoke<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>(q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; g: CLTaskGlobalData; l: CLTaskLocalData): QueueArray6InvokerData<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>;
    
  end;
  
  QueueArray6SyncInvoker = record(IQueueArray6Invoker)
    
    public [MethodImpl(MethodImplOptions.AggressiveInlining)]
    function Invoke<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>(q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; g: CLTaskGlobalData; l: CLTaskLocalData): QueueArray6InvokerData<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>;
    begin
      
      Result.qr1 := q1.InvokeToAny(g, l);
      if not Result.qr1.IsConst then Result.all_qrs_const := false;
      l := Result.qr1.TakeBaseOut;
      
      Result.qr2 := q2.InvokeToAny(g, l);
      if not Result.qr2.IsConst then Result.all_qrs_const := false;
      l := Result.qr2.TakeBaseOut;
      
      Result.qr3 := q3.InvokeToAny(g, l);
      if not Result.qr3.IsConst then Result.all_qrs_const := false;
      l := Result.qr3.TakeBaseOut;
      
      Result.qr4 := q4.InvokeToAny(g, l);
      if not Result.qr4.IsConst then Result.all_qrs_const := false;
      l := Result.qr4.TakeBaseOut;
      
      Result.qr5 := q5.InvokeToAny(g, l);
      if not Result.qr5.IsConst then Result.all_qrs_const := false;
      l := Result.qr5.TakeBaseOut;
      
      Result.qr6 := q6.InvokeToAny(g, l);
      if not Result.qr6.IsConst then Result.all_qrs_const := false;
      l := Result.qr6.TakeBaseOut;
      
      Result.next_l := l;
    end;
    
  end;
  
  QueueArray6AsyncInvoker = record(IQueueArray6Invoker)
    
    public [MethodImpl(MethodImplOptions.AggressiveInlining)]
    function Invoke<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>(q1: CommandQueue<TInp1>; q2: CommandQueue<TInp2>; q3: CommandQueue<TInp3>; q4: CommandQueue<TInp4>; q5: CommandQueue<TInp5>; q6: CommandQueue<TInp6>; g: CLTaskGlobalData; l: CLTaskLocalData): QueueArray6InvokerData<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>;
    begin
      
      var res: QueueArray6InvokerData<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>;
      g.ParallelInvoke(l, 6, invoker->
      begin
        res.qr1 := invoker.InvokeBranch(q1.InvokeToAny);
        res.qr2 := invoker.InvokeBranch(q2.InvokeToAny);
        res.qr3 := invoker.InvokeBranch(q3.InvokeToAny);
        res.qr4 := invoker.InvokeBranch(q4.InvokeToAny);
        res.qr5 := invoker.InvokeBranch(q5.InvokeToAny);
        res.qr6 := invoker.InvokeBranch(q6.InvokeToAny);
      end);
      Result := res;
      
      Result.all_qrs_const := Result.qr1.IsConst and Result.qr2.IsConst and Result.qr3.IsConst and Result.qr4.IsConst and Result.qr5.IsConst and Result.qr6.IsConst;
      Result.next_l := new CLTaskLocalData(EventList.Combine(|Result.qr1.AttachInvokeActions(g), Result.qr2.AttachInvokeActions(g), Result.qr3.AttachInvokeActions(g), Result.qr4.AttachInvokeActions(g), Result.qr5.AttachInvokeActions(g), Result.qr6.AttachInvokeActions(g)|));
    end;
    
  end;
  
  {$endregion Invokers}
  
  {$region Work}
  
  IQueueArray6Work<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TDelegate> = interface
  where TDelegate: ISimpleDelegateContainer;
    
    function Invoke(d: TDelegate; err_handler: CLTaskErrHandler; inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext): TRes;
    
  end;
  
  QueueArray6WorkConvert<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TFunc> = record(IQueueArray6Work<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TFunc>)
  where TFunc: ISimpleFunc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes>;
    
    public [MethodImpl(MethodImplOptions.AggressiveInlining)]
    function Invoke(f: TFunc; err_handler: CLTaskErrHandler; inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext): TRes;
    begin
      if err_handler.HadError then exit;
      try
        Result := f.Invoke(inp1,inp2,inp3,inp4,inp5,inp6, c);
      except
        on e: Exception do err_handler.AddErr(e)
      end;
    end;
    
  end;
  
  QueueArray6WorkUse<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, TProc> = record(IQueueArray6Work<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TProc>)
  where TProc: ISimpleProc6Container<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>;
    
    public [MethodImpl(MethodImplOptions.AggressiveInlining)]
    function Invoke(p: TProc; err_handler: CLTaskErrHandler; inp1: TInp1; inp2: TInp2; inp3: TInp3; inp4: TInp4; inp5: TInp5; inp6: TInp6; c: CLContext): ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>;
    begin
      if err_handler.HadError then exit;
      try
        p.Invoke(inp1,inp2,inp3,inp4,inp5,inp6, c);
        Result := ValueTuple.Create(inp1,inp2,inp3,inp4,inp5,inp6);
      except
        on e: Exception do err_handler.AddErr(e)
      end;
    end;
    
  end;
  
  {$endregion Work}
  
  {$region Quick}
  
  CommandQueueQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TInv, TDelegate, TWork, FPreCall> = sealed class(CommandQueueArray6WithWork<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TDelegate>)
  where TInv: IQueueArray6Invoker, constructor;
  where TDelegate: ISimpleDelegateContainer;
  where TWork: IQueueArray6Work<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TDelegate>, constructor;
  where FPreCall: IBooleanFlag, constructor;
    
    private [MethodImpl(MethodImplOptions.AggressiveInlining)]
    function Invoke<TR>(g: CLTaskGlobalData; l: CLTaskLocalData; factory: IQueueResDirectFactory<TRes,TR>): TR; where TR: IQueueRes;
    begin
      var inv_data := TInv.Create.Invoke(q1,q2,q3,q4,q5,q6, g, l);
      l := inv_data.next_l;
      
      var should_make_const := if FPreCall.Create.val then
        inv_data.all_qrs_const else
        l.ShouldInstaCallAction;
      
      var err_handler := g.curr_err_handler;
      var qr1 := inv_data.qr1;
      var qr2 := inv_data.qr2;
      var qr3 := inv_data.qr3;
      var qr4 := inv_data.qr4;
      var qr5 := inv_data.qr5;
      var qr6 := inv_data.qr6;
      Result := if should_make_const then
        factory.MakeConst(l, TWork.Create.Invoke(d,
          err_handler, qr1.GetResDirect,qr2.GetResDirect,qr3.GetResDirect,qr4.GetResDirect,qr5.GetResDirect,qr6.GetResDirect, g.c
        )) else
        factory.MakeDelayed(l, qr->c->qr.SetRes(TWork.Create.Invoke(d,
          err_handler, qr1.GetResDirect,qr2.GetResDirect,qr3.GetResDirect,qr4.GetResDirect,qr5.GetResDirect,qr6.GetResDirect, c
        )));
      
    end;
    
    protected function InvokeToNil(g: CLTaskGlobalData; l: CLTaskLocalData): QueueResNil;       override := Invoke(g, l, qr_nil_factory);
    protected function InvokeToAny(g: CLTaskGlobalData; l: CLTaskLocalData): QueueRes   <TRes>; override := Invoke(g, l, qr_val_factory);
    protected function InvokeToPtr(g: CLTaskGlobalData; l: CLTaskLocalData): QueueResPtr<TRes>; override := Invoke(g, l, qr_ptr_factory);
    
  end;
  
  CommandQueueConvertQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TInv, TFunc, FPreCall> = CommandQueueQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TInv, TFunc, QueueArray6WorkConvert<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TFunc>, FPreCall>;
  CommandQueueUseQuickArray6    <TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,      TInv, TProc, FPreCall> = CommandQueueQuickArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TInv, TProc, QueueArray6WorkUse<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, TProc>, FPreCall>;
  
  {$endregion Quick}
  
  {$region Threaded}
  
  DCommandQueueThreadedArray6MakeBody<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, TR> = function(acts: QueueResComplDelegateData; qr1: QueueRes<TInp1>; qr2: QueueRes<TInp2>; qr3: QueueRes<TInp3>; qr4: QueueRes<TInp4>; qr5: QueueRes<TInp5>; qr6: QueueRes<TInp6>; err_handler: CLTaskErrHandler; c: CLContext; own_qr: TR): Action;
  CommandQueueThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TInv, TDelegate, TWork> = sealed class(CommandQueueArray6WithWork<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TDelegate>)
  where TInv: IQueueArray6Invoker, constructor;
  where TDelegate: ISimpleDelegateContainer;
  where TWork: IQueueArray6Work<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TDelegate>, constructor;
    
    private [MethodImpl(MethodImplOptions.AggressiveInlining)]
    function MakeNilBody    (acts: QueueResComplDelegateData; qr1: QueueRes<TInp1>; qr2: QueueRes<TInp2>; qr3: QueueRes<TInp3>; qr4: QueueRes<TInp4>; qr5: QueueRes<TInp5>; qr6: QueueRes<TInp6>; err_handler: CLTaskErrHandler; c: CLContext; own_qr: QueueResNil): Action;
    begin
      Result := ()->
      begin
        acts.Invoke(c);
        TWork.Create.Invoke(d, err_handler, qr1.GetResDirect, qr2.GetResDirect, qr3.GetResDirect, qr4.GetResDirect, qr5.GetResDirect, qr6.GetResDirect, c);
      end;
    end;
    
    private [MethodImpl(MethodImplOptions.AggressiveInlining)]
    function MakeResBody<TR>(acts: QueueResComplDelegateData; qr1: QueueRes<TInp1>; qr2: QueueRes<TInp2>; qr3: QueueRes<TInp3>; qr4: QueueRes<TInp4>; qr5: QueueRes<TInp5>; qr6: QueueRes<TInp6>; err_handler: CLTaskErrHandler; c: CLContext; own_qr: TR): Action; where TR: QueueRes<TRes>;
    begin
      Result := ()->
      begin
        acts.Invoke(c);
        own_qr.SetRes(TWork.Create.Invoke(d, err_handler, qr1.GetResDirect, qr2.GetResDirect, qr3.GetResDirect, qr4.GetResDirect, qr5.GetResDirect, qr6.GetResDirect, c));
      end;
    end;
    
    private [MethodImpl(MethodImplOptions.AggressiveInlining)]
    function Invoke<TR>(g: CLTaskGlobalData; l: CLTaskLocalData; make_qr: Func<TR,CLTaskLocalData>->TR; make_body: DCommandQueueThreadedArray6MakeBody<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, TR>): TR; where TR: IQueueRes;
    begin
      var inv_data := TInv.Create.Invoke(q1,q2,q3,q4,q5,q6, g, l);
      l := inv_data.next_l;
      
      var prev_ev := l.prev_ev;
      var acts := l.prev_delegate;
      var qr1 := inv_data.qr1;
      var qr2 := inv_data.qr2;
      var qr3 := inv_data.qr3;
      var qr4 := inv_data.qr4;
      var qr5 := inv_data.qr5;
      var qr6 := inv_data.qr6;
      Result := make_qr(qr->new CLTaskLocalData(UserEvent.StartWorkThread(
        prev_ev, make_body(acts, qr1,qr2,qr3,qr4,qr5,qr6, g.curr_err_handler, g.c, qr), g.cl_c
        {$ifdef EventDebug}, $'body of {TypeName(self)}'{$endif}
      )));
      
    end;
    
    protected function InvokeToNil(g: CLTaskGlobalData; l: CLTaskLocalData): QueueResNil;       override := Invoke(g, l, qr_nil_factory.MakeDelayed, MakeNilBody);
    protected function InvokeToAny(g: CLTaskGlobalData; l: CLTaskLocalData): QueueRes   <TRes>; override := Invoke(g, l, qr_val_factory.MakeDelayed, MakeResBody&<QueueResValDirect<TRes>>);
    protected function InvokeToPtr(g: CLTaskGlobalData; l: CLTaskLocalData): QueueResPtr<TRes>; override := Invoke(g, l, qr_ptr_factory.MakeDelayed, MakeResBody&<QueueResPtr<TRes>>);
    
  end;
  
  CommandQueueConvertThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TInv, TFunc> = CommandQueueThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TInv, TFunc, QueueArray6WorkConvert<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,TRes, TFunc>>;
  CommandQueueUseThreadedArray6    <TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,      TInv, TProc> = CommandQueueThreadedArray6<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6,ValueTuple<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6>, TInv, TProc, QueueArray6WorkUse<TInp1,TInp2,TInp3,TInp4,TInp5,TInp6, TProc>>;
  
  {$endregion Threaded}
  
  
  