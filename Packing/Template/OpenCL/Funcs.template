  
  
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  cl = static class
    
    // added in cl1.0
    private static function z_BuildProgram_1(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clBuildProgram';
    private static function z_BuildProgram_2(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clBuildProgram';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BuildProgram(&program: cl_program; num_devices: UInt32; device_list: array of cl_device_id; options: string; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    type Pcl_device_id=^cl_device_id;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := if (device_list<>nil) and (device_list.Length<>0) then
          z_BuildProgram_2(&program, num_devices, device_list[0], options_str_ptr, pfn_notify, user_data) else
          z_BuildProgram_2(&program, num_devices, Pcl_device_id(nil)^, options_str_ptr, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BuildProgram(&program: cl_program; num_devices: UInt32; device_list: array of cl_device_id; options: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    type Pcl_device_id=^cl_device_id;
    begin
      Result := if (device_list<>nil) and (device_list.Length<>0) then
        z_BuildProgram_2(&program, num_devices, device_list[0], options, pfn_notify, user_data) else
        z_BuildProgram_2(&program, num_devices, Pcl_device_id(nil)^, options, pfn_notify, user_data);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BuildProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: string; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_BuildProgram_2(&program, num_devices, device_list, options_str_ptr, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BuildProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_BuildProgram_2(&program, num_devices, device_list, options, pfn_notify, user_data);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BuildProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: string; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_BuildProgram_1(&program, num_devices, device_list, options_str_ptr, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function BuildProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_BuildProgram_1(&program, num_devices, device_list, options, pfn_notify, user_data);
    
    // added in cl2.1
    private static function z_CloneKernel_1(source_kernel: cl_kernel; var errcode_ret: ErrorCode): cl_kernel;
    external 'opencl' name 'clCloneKernel';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CloneKernel(source_kernel: cl_kernel; var errcode_ret: ErrorCode): cl_kernel :=
    z_CloneKernel_1(source_kernel, errcode_ret);
    
    // added in cl1.2
    private static function z_CompileProgram_1(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_headers: UInt32; input_headers: IntPtr; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clCompileProgram';
    private static function z_CompileProgram_2(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_headers: UInt32; input_headers: IntPtr; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clCompileProgram';
    private static function z_CompileProgram_3(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_headers: UInt32; var input_headers: cl_program; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clCompileProgram';
    private static function z_CompileProgram_4(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_headers: UInt32; var input_headers: cl_program; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clCompileProgram';
    private static function z_CompileProgram_5(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_headers: UInt32; input_headers: IntPtr; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clCompileProgram';
    private static function z_CompileProgram_6(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_headers: UInt32; input_headers: IntPtr; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clCompileProgram';
    private static function z_CompileProgram_7(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_headers: UInt32; var input_headers: cl_program; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clCompileProgram';
    private static function z_CompileProgram_8(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_headers: UInt32; var input_headers: cl_program; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clCompileProgram';
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_CompileProgram_1(&program: cl_program; num_devices: UInt32; device_list: array of cl_device_id; options: IntPtr; num_input_headers: UInt32; input_headers: array of cl_program; header_include_names: array of IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    type Pcl_device_id=^cl_device_id;
    type Pcl_program=^cl_program;
    type PIntPtr=^IntPtr;
    begin
      Result := if (header_include_names<>nil) and (header_include_names.Length<>0) then
        if (input_headers<>nil) and (input_headers.Length<>0) then
          if (device_list<>nil) and (device_list.Length<>0) then
            z_CompileProgram_8(&program, num_devices, device_list[0], options, num_input_headers, input_headers[0], header_include_names[0], pfn_notify, user_data) else
            z_CompileProgram_8(&program, num_devices, Pcl_device_id(nil)^, options, num_input_headers, input_headers[0], header_include_names[0], pfn_notify, user_data) else
          if (device_list<>nil) and (device_list.Length<>0) then
            z_CompileProgram_8(&program, num_devices, device_list[0], options, num_input_headers, Pcl_program(nil)^, header_include_names[0], pfn_notify, user_data) else
            z_CompileProgram_8(&program, num_devices, Pcl_device_id(nil)^, options, num_input_headers, Pcl_program(nil)^, header_include_names[0], pfn_notify, user_data) else
        if (input_headers<>nil) and (input_headers.Length<>0) then
          if (device_list<>nil) and (device_list.Length<>0) then
            z_CompileProgram_8(&program, num_devices, device_list[0], options, num_input_headers, input_headers[0], PIntPtr(nil)^, pfn_notify, user_data) else
            z_CompileProgram_8(&program, num_devices, Pcl_device_id(nil)^, options, num_input_headers, input_headers[0], PIntPtr(nil)^, pfn_notify, user_data) else
          if (device_list<>nil) and (device_list.Length<>0) then
            z_CompileProgram_8(&program, num_devices, device_list[0], options, num_input_headers, Pcl_program(nil)^, PIntPtr(nil)^, pfn_notify, user_data) else
            z_CompileProgram_8(&program, num_devices, Pcl_device_id(nil)^, options, num_input_headers, Pcl_program(nil)^, PIntPtr(nil)^, pfn_notify, user_data);
    end;
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_CompileProgram_2(&program: cl_program; num_devices: UInt32; device_list: array of cl_device_id; options: string; num_input_headers: UInt32; input_headers: array of cl_program; header_include_names: array of IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    type Pcl_device_id=^cl_device_id;
    type Pcl_program=^cl_program;
    type PIntPtr=^IntPtr;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := if (header_include_names<>nil) and (header_include_names.Length<>0) then
          if (input_headers<>nil) and (input_headers.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CompileProgram_8(&program, num_devices, device_list[0], options_str_ptr, num_input_headers, input_headers[0], header_include_names[0], pfn_notify, user_data) else
              z_CompileProgram_8(&program, num_devices, Pcl_device_id(nil)^, options_str_ptr, num_input_headers, input_headers[0], header_include_names[0], pfn_notify, user_data) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CompileProgram_8(&program, num_devices, device_list[0], options_str_ptr, num_input_headers, Pcl_program(nil)^, header_include_names[0], pfn_notify, user_data) else
              z_CompileProgram_8(&program, num_devices, Pcl_device_id(nil)^, options_str_ptr, num_input_headers, Pcl_program(nil)^, header_include_names[0], pfn_notify, user_data) else
          if (input_headers<>nil) and (input_headers.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CompileProgram_8(&program, num_devices, device_list[0], options_str_ptr, num_input_headers, input_headers[0], PIntPtr(nil)^, pfn_notify, user_data) else
              z_CompileProgram_8(&program, num_devices, Pcl_device_id(nil)^, options_str_ptr, num_input_headers, input_headers[0], PIntPtr(nil)^, pfn_notify, user_data) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CompileProgram_8(&program, num_devices, device_list[0], options_str_ptr, num_input_headers, Pcl_program(nil)^, PIntPtr(nil)^, pfn_notify, user_data) else
              z_CompileProgram_8(&program, num_devices, Pcl_device_id(nil)^, options_str_ptr, num_input_headers, Pcl_program(nil)^, PIntPtr(nil)^, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: array of cl_device_id; options: string; num_input_headers: UInt32; input_headers: array of cl_program; header_include_names: array of string; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var header_include_names_str_ptrs: array of IntPtr;
      try
        header_include_names_str_ptrs := header_include_names?.ConvertAll(arr_el1->
          Marshal.StringToHGlobalAnsi(arr_el1)
        );
        Result := temp_CompileProgram_2(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names_str_ptrs, pfn_notify, user_data);
      finally
        if header_include_names_str_ptrs<>nil then foreach var arr_el1 in header_include_names_str_ptrs do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: array of cl_device_id; options: IntPtr; num_input_headers: UInt32; input_headers: array of cl_program; header_include_names: array of string; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var header_include_names_str_ptrs: array of IntPtr;
      try
        header_include_names_str_ptrs := header_include_names?.ConvertAll(arr_el1->
          Marshal.StringToHGlobalAnsi(arr_el1)
        );
        Result := temp_CompileProgram_1(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names_str_ptrs, pfn_notify, user_data);
      finally
        if header_include_names_str_ptrs<>nil then foreach var arr_el1 in header_include_names_str_ptrs do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: string; num_input_headers: UInt32; var input_headers: cl_program; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_CompileProgram_8(&program, num_devices, device_list, options_str_ptr, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: string; num_input_headers: UInt32; var input_headers: cl_program; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_CompileProgram_7(&program, num_devices, device_list, options_str_ptr, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: string; num_input_headers: UInt32; input_headers: IntPtr; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_CompileProgram_6(&program, num_devices, device_list, options_str_ptr, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: string; num_input_headers: UInt32; input_headers: IntPtr; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_CompileProgram_5(&program, num_devices, device_list, options_str_ptr, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_headers: UInt32; var input_headers: cl_program; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_CompileProgram_8(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_headers: UInt32; var input_headers: cl_program; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_CompileProgram_7(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_headers: UInt32; input_headers: IntPtr; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_CompileProgram_6(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_headers: UInt32; input_headers: IntPtr; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_CompileProgram_5(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: string; num_input_headers: UInt32; var input_headers: cl_program; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_CompileProgram_4(&program, num_devices, device_list, options_str_ptr, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: string; num_input_headers: UInt32; var input_headers: cl_program; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_CompileProgram_3(&program, num_devices, device_list, options_str_ptr, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: string; num_input_headers: UInt32; input_headers: IntPtr; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_CompileProgram_2(&program, num_devices, device_list, options_str_ptr, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: string; num_input_headers: UInt32; input_headers: IntPtr; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_CompileProgram_1(&program, num_devices, device_list, options_str_ptr, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_headers: UInt32; var input_headers: cl_program; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_CompileProgram_4(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_headers: UInt32; var input_headers: cl_program; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_CompileProgram_3(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_headers: UInt32; input_headers: IntPtr; var header_include_names: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_CompileProgram_2(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CompileProgram(&program: cl_program; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_headers: UInt32; input_headers: IntPtr; header_include_names: pointer; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_CompileProgram_1(&program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
    
    // added in cl1.0
    private static function z_CreateBuffer_1(context: cl_context; flags: MemFlags; size: UIntPtr; host_ptr: pointer; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateBuffer';
    private static function z_CreateBuffer_2(context: cl_context; flags: MemFlags; size: UIntPtr; var host_ptr: Byte; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBuffer<T>(context: cl_context; flags: MemFlags; size: UIntPtr; host_ptr: array of T; var errcode_ret: ErrorCode): cl_mem; where T: record;
    type PT=^T;
    begin
      Result := if (host_ptr<>nil) and (host_ptr.Length<>0) then
        CreateBuffer(context, flags, size, host_ptr[0], errcode_ret) else
        CreateBuffer(context, flags, size, PT(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBuffer<T>(context: cl_context; flags: MemFlags; size: UIntPtr; var host_ptr: T; var errcode_ret: ErrorCode): cl_mem; where T: record;
    begin
      Result := z_CreateBuffer_2(context, flags, size, PByte(pointer(@host_ptr))^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBuffer(context: cl_context; flags: MemFlags; size: UIntPtr; host_ptr: pointer; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateBuffer_1(context, flags, size, host_ptr, errcode_ret);
    
    // added in cl3.0
    private static function z_CreateBufferWithProperties_1(context: cl_context; properties: IntPtr; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateBufferWithProperties';
    private static function z_CreateBufferWithProperties_2(context: cl_context; var properties: MemProperties; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateBufferWithProperties';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBufferWithProperties(context: cl_context; properties: array of MemProperties; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    type PMemProperties=^MemProperties;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateBufferWithProperties_2(context, properties[0], flags, size, host_ptr, errcode_ret) else
        z_CreateBufferWithProperties_2(context, PMemProperties(nil)^, flags, size, host_ptr, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBufferWithProperties(context: cl_context; var properties: MemProperties; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateBufferWithProperties_2(context, properties, flags, size, host_ptr, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBufferWithProperties(context: cl_context; properties: IntPtr; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateBufferWithProperties_1(context, properties, flags, size, host_ptr, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateCommandQueue_1(context: cl_context; device: cl_device_id; properties: CommandQueueProperties; var errcode_ret: ErrorCode): cl_command_queue;
    external 'opencl' name 'clCreateCommandQueue';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandQueue(context: cl_context; device: cl_device_id; properties: CommandQueueProperties; var errcode_ret: ErrorCode): cl_command_queue :=
    z_CreateCommandQueue_1(context, device, properties, errcode_ret);
    
    // added in cl2.0
    private static function z_CreateCommandQueueWithProperties_1(context: cl_context; device: cl_device_id; properties: IntPtr; var errcode_ret: ErrorCode): cl_command_queue;
    external 'opencl' name 'clCreateCommandQueueWithProperties';
    private static function z_CreateCommandQueueWithProperties_2(context: cl_context; device: cl_device_id; var properties: QueueProperties; var errcode_ret: ErrorCode): cl_command_queue;
    external 'opencl' name 'clCreateCommandQueueWithProperties';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandQueueWithProperties(context: cl_context; device: cl_device_id; properties: array of QueueProperties; var errcode_ret: ErrorCode): cl_command_queue;
    type PQueueProperties=^QueueProperties;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateCommandQueueWithProperties_2(context, device, properties[0], errcode_ret) else
        z_CreateCommandQueueWithProperties_2(context, device, PQueueProperties(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandQueueWithProperties(context: cl_context; device: cl_device_id; var properties: QueueProperties; var errcode_ret: ErrorCode): cl_command_queue :=
    z_CreateCommandQueueWithProperties_2(context, device, properties, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandQueueWithProperties(context: cl_context; device: cl_device_id; properties: IntPtr; var errcode_ret: ErrorCode): cl_command_queue :=
    z_CreateCommandQueueWithProperties_1(context, device, properties, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateContext_1(properties: IntPtr; num_devices: UInt32; devices: IntPtr; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context;
    external 'opencl' name 'clCreateContext';
    private static function z_CreateContext_2(properties: IntPtr; num_devices: UInt32; var devices: cl_device_id; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context;
    external 'opencl' name 'clCreateContext';
    private static function z_CreateContext_3(var properties: ContextProperties; num_devices: UInt32; devices: IntPtr; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context;
    external 'opencl' name 'clCreateContext';
    private static function z_CreateContext_4(var properties: ContextProperties; num_devices: UInt32; var devices: cl_device_id; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context;
    external 'opencl' name 'clCreateContext';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContext(properties: array of ContextProperties; num_devices: UInt32; devices: array of cl_device_id; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context;
    type PContextProperties=^ContextProperties;
    type Pcl_device_id=^cl_device_id;
    begin
      Result := if (devices<>nil) and (devices.Length<>0) then
        if (properties<>nil) and (properties.Length<>0) then
          z_CreateContext_4(properties[0], num_devices, devices[0], pfn_notify, user_data, errcode_ret) else
          z_CreateContext_4(PContextProperties(nil)^, num_devices, devices[0], pfn_notify, user_data, errcode_ret) else
        if (properties<>nil) and (properties.Length<>0) then
          z_CreateContext_4(properties[0], num_devices, Pcl_device_id(nil)^, pfn_notify, user_data, errcode_ret) else
          z_CreateContext_4(PContextProperties(nil)^, num_devices, Pcl_device_id(nil)^, pfn_notify, user_data, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContext(var properties: ContextProperties; num_devices: UInt32; var devices: cl_device_id; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context :=
    z_CreateContext_4(properties, num_devices, devices, pfn_notify, user_data, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContext(var properties: ContextProperties; num_devices: UInt32; devices: IntPtr; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context :=
    z_CreateContext_3(properties, num_devices, devices, pfn_notify, user_data, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContext(properties: IntPtr; num_devices: UInt32; var devices: cl_device_id; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context :=
    z_CreateContext_2(properties, num_devices, devices, pfn_notify, user_data, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContext(properties: IntPtr; num_devices: UInt32; devices: IntPtr; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context :=
    z_CreateContext_1(properties, num_devices, devices, pfn_notify, user_data, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateContextFromType_1(properties: IntPtr; device_type: DeviceType; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context;
    external 'opencl' name 'clCreateContextFromType';
    private static function z_CreateContextFromType_2(var properties: ContextProperties; device_type: DeviceType; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context;
    external 'opencl' name 'clCreateContextFromType';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContextFromType(properties: array of ContextProperties; device_type: DeviceType; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context;
    type PContextProperties=^ContextProperties;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateContextFromType_2(properties[0], device_type, pfn_notify, user_data, errcode_ret) else
        z_CreateContextFromType_2(PContextProperties(nil)^, device_type, pfn_notify, user_data, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContextFromType(var properties: ContextProperties; device_type: DeviceType; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context :=
    z_CreateContextFromType_2(properties, device_type, pfn_notify, user_data, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateContextFromType(properties: IntPtr; device_type: DeviceType; pfn_notify: CreateContextCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_context :=
    z_CreateContextFromType_1(properties, device_type, pfn_notify, user_data, errcode_ret);
    
    // added in cl1.2
    private static function z_CreateImage_1(context: cl_context; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; host_ptr: pointer; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateImage';
    private static function z_CreateImage_2(context: cl_context; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; var host_ptr: Byte; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateImage';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImage<T>(context: cl_context; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; host_ptr: array of T; var errcode_ret: ErrorCode): cl_mem; where T: record;
    type PT=^T;
    begin
      Result := if (host_ptr<>nil) and (host_ptr.Length<>0) then
        CreateImage(context, flags, image_format, image_desc, host_ptr[0], errcode_ret) else
        CreateImage(context, flags, image_format, image_desc, PT(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImage<T>(context: cl_context; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; var host_ptr: T; var errcode_ret: ErrorCode): cl_mem; where T: record;
    begin
      Result := z_CreateImage_2(context, flags, image_format, image_desc, PByte(pointer(@host_ptr))^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImage(context: cl_context; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; host_ptr: pointer; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateImage_1(context, flags, image_format, image_desc, host_ptr, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateImage2D_1(context: cl_context; flags: MemFlags; var image_format: cl_image_format; image_width: UIntPtr; image_height: UIntPtr; image_row_pitch: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateImage2D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImage2D(context: cl_context; flags: MemFlags; var image_format: cl_image_format; image_width: UIntPtr; image_height: UIntPtr; image_row_pitch: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateImage2D_1(context, flags, image_format, image_width, image_height, image_row_pitch, host_ptr, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateImage3D_1(context: cl_context; flags: MemFlags; var image_format: cl_image_format; image_width: UIntPtr; image_height: UIntPtr; image_depth: UIntPtr; image_row_pitch: UIntPtr; image_slice_pitch: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateImage3D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImage3D(context: cl_context; flags: MemFlags; var image_format: cl_image_format; image_width: UIntPtr; image_height: UIntPtr; image_depth: UIntPtr; image_row_pitch: UIntPtr; image_slice_pitch: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateImage3D_1(context, flags, image_format, image_width, image_height, image_depth, image_row_pitch, image_slice_pitch, host_ptr, errcode_ret);
    
    // added in cl3.0
    private static function z_CreateImageWithProperties_1(context: cl_context; properties: IntPtr; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; host_ptr: pointer; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateImageWithProperties';
    private static function z_CreateImageWithProperties_2(context: cl_context; properties: IntPtr; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; var host_ptr: Byte; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateImageWithProperties';
    private static function z_CreateImageWithProperties_3(context: cl_context; var properties: MemProperties; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; host_ptr: pointer; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateImageWithProperties';
    private static function z_CreateImageWithProperties_4(context: cl_context; var properties: MemProperties; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; var host_ptr: Byte; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateImageWithProperties';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImageWithProperties<T>(context: cl_context; properties: array of MemProperties; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; host_ptr: array of T; var errcode_ret: ErrorCode): cl_mem; where T: record;
    type PMemProperties=^MemProperties;
    type PT=^T;
    begin
      Result := if (host_ptr<>nil) and (host_ptr.Length<>0) then
        if (properties<>nil) and (properties.Length<>0) then
          CreateImageWithProperties(context, properties[0], flags, image_format, image_desc, host_ptr[0], errcode_ret) else
          CreateImageWithProperties(context, PMemProperties(nil)^, flags, image_format, image_desc, host_ptr[0], errcode_ret) else
        if (properties<>nil) and (properties.Length<>0) then
          CreateImageWithProperties(context, properties[0], flags, image_format, image_desc, PT(nil)^, errcode_ret) else
          CreateImageWithProperties(context, PMemProperties(nil)^, flags, image_format, image_desc, PT(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImageWithProperties<T>(context: cl_context; var properties: MemProperties; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; var host_ptr: T; var errcode_ret: ErrorCode): cl_mem; where T: record;
    begin
      Result := z_CreateImageWithProperties_4(context, properties, flags, image_format, image_desc, PByte(pointer(@host_ptr))^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImageWithProperties(context: cl_context; var properties: MemProperties; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; host_ptr: pointer; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateImageWithProperties_3(context, properties, flags, image_format, image_desc, host_ptr, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImageWithProperties<T>(context: cl_context; properties: IntPtr; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; var host_ptr: T; var errcode_ret: ErrorCode): cl_mem; where T: record;
    begin
      Result := z_CreateImageWithProperties_2(context, properties, flags, image_format, image_desc, PByte(pointer(@host_ptr))^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateImageWithProperties(context: cl_context; properties: IntPtr; flags: MemFlags; var image_format: cl_image_format; var image_desc: cl_image_desc; host_ptr: pointer; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateImageWithProperties_1(context, properties, flags, image_format, image_desc, host_ptr, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateKernel_1(&program: cl_program; kernel_name: IntPtr; var errcode_ret: ErrorCode): cl_kernel;
    external 'opencl' name 'clCreateKernel';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateKernel(&program: cl_program; kernel_name: string; var errcode_ret: ErrorCode): cl_kernel;
    begin
      var kernel_name_str_ptr: IntPtr;
      try
        kernel_name_str_ptr := Marshal.StringToHGlobalAnsi(kernel_name);
        Result := z_CreateKernel_1(&program, kernel_name_str_ptr, errcode_ret);
      finally
        Marshal.FreeHGlobal(kernel_name_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateKernel(&program: cl_program; kernel_name: IntPtr; var errcode_ret: ErrorCode): cl_kernel :=
    z_CreateKernel_1(&program, kernel_name, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateKernelsInProgram_1(&program: cl_program; num_kernels: UInt32; kernels: IntPtr; num_kernels_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateKernelsInProgram';
    private static function z_CreateKernelsInProgram_2(&program: cl_program; num_kernels: UInt32; kernels: IntPtr; var num_kernels_ret: UInt32): ErrorCode;
    external 'opencl' name 'clCreateKernelsInProgram';
    private static function z_CreateKernelsInProgram_3(&program: cl_program; num_kernels: UInt32; var kernels: cl_kernel; num_kernels_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateKernelsInProgram';
    private static function z_CreateKernelsInProgram_4(&program: cl_program; num_kernels: UInt32; var kernels: cl_kernel; var num_kernels_ret: UInt32): ErrorCode;
    external 'opencl' name 'clCreateKernelsInProgram';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateKernelsInProgram(&program: cl_program; num_kernels: UInt32; var kernels: cl_kernel; var num_kernels_ret: UInt32): ErrorCode :=
    z_CreateKernelsInProgram_4(&program, num_kernels, kernels, num_kernels_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateKernelsInProgram(&program: cl_program; num_kernels: UInt32; var kernels: cl_kernel; num_kernels_ret: IntPtr): ErrorCode :=
    z_CreateKernelsInProgram_3(&program, num_kernels, kernels, num_kernels_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateKernelsInProgram(&program: cl_program; num_kernels: UInt32; kernels: IntPtr; var num_kernels_ret: UInt32): ErrorCode :=
    z_CreateKernelsInProgram_2(&program, num_kernels, kernels, num_kernels_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateKernelsInProgram(&program: cl_program; num_kernels: UInt32; kernels: IntPtr; num_kernels_ret: IntPtr): ErrorCode :=
    z_CreateKernelsInProgram_1(&program, num_kernels, kernels, num_kernels_ret);
    
    // added in cl2.0
    private static function z_CreatePipe_1(context: cl_context; flags: MemFlags; pipe_packet_size: UInt32; pipe_max_packets: UInt32; properties: pointer; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreatePipe';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreatePipe(context: cl_context; flags: MemFlags; pipe_packet_size: UInt32; pipe_max_packets: UInt32; properties: pointer; var errcode_ret: ErrorCode): cl_mem :=
    z_CreatePipe_1(context, flags, pipe_packet_size, pipe_max_packets, properties, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateProgramWithBinary_1(context: cl_context; num_devices: UInt32; device_list: IntPtr; lengths: IntPtr; binaries: pointer; binary_status: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithBinary';
    private static function z_CreateProgramWithBinary_2(context: cl_context; num_devices: UInt32; device_list: IntPtr; lengths: IntPtr; binaries: pointer; var binary_status: ErrorCode; errcode_ret: IntPtr): cl_program;
    external 'opencl' name 'clCreateProgramWithBinary';
    private static function z_CreateProgramWithBinary_3(context: cl_context; num_devices: UInt32; device_list: IntPtr; lengths: IntPtr; binaries: pointer; var binary_status: ErrorCode; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithBinary';
    private static function z_CreateProgramWithBinary_4(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; var lengths: UIntPtr; var binaries: IntPtr; binary_status: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithBinary';
    private static function z_CreateProgramWithBinary_5(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; var lengths: UIntPtr; var binaries: IntPtr; var binary_status: ErrorCode; errcode_ret: IntPtr): cl_program;
    external 'opencl' name 'clCreateProgramWithBinary';
    private static function z_CreateProgramWithBinary_6(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; var lengths: UIntPtr; var binaries: IntPtr; var binary_status: ErrorCode; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithBinary';
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_CreateProgramWithBinary_1(context: cl_context; num_devices: UInt32; device_list: array of cl_device_id; lengths: array of UIntPtr; binaries: array of IntPtr; binary_status: array of ErrorCode; errcode_ret: IntPtr): cl_program;
    type Pcl_device_id=^cl_device_id;
    type PUIntPtr=^UIntPtr;
    type PIntPtr=^IntPtr;
    type PErrorCode=^ErrorCode;
    begin
      Result := if (binary_status<>nil) and (binary_status.Length<>0) then
        if (binaries<>nil) and (binaries.Length<>0) then
          if (lengths<>nil) and (lengths.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_5(context, num_devices, device_list[0], lengths[0], binaries[0], binary_status[0], errcode_ret) else
              z_CreateProgramWithBinary_5(context, num_devices, Pcl_device_id(nil)^, lengths[0], binaries[0], binary_status[0], errcode_ret) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_5(context, num_devices, device_list[0], PUIntPtr(nil)^, binaries[0], binary_status[0], errcode_ret) else
              z_CreateProgramWithBinary_5(context, num_devices, Pcl_device_id(nil)^, PUIntPtr(nil)^, binaries[0], binary_status[0], errcode_ret) else
          if (lengths<>nil) and (lengths.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_5(context, num_devices, device_list[0], lengths[0], PIntPtr(nil)^, binary_status[0], errcode_ret) else
              z_CreateProgramWithBinary_5(context, num_devices, Pcl_device_id(nil)^, lengths[0], PIntPtr(nil)^, binary_status[0], errcode_ret) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_5(context, num_devices, device_list[0], PUIntPtr(nil)^, PIntPtr(nil)^, binary_status[0], errcode_ret) else
              z_CreateProgramWithBinary_5(context, num_devices, Pcl_device_id(nil)^, PUIntPtr(nil)^, PIntPtr(nil)^, binary_status[0], errcode_ret) else
        if (binaries<>nil) and (binaries.Length<>0) then
          if (lengths<>nil) and (lengths.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_5(context, num_devices, device_list[0], lengths[0], binaries[0], PErrorCode(nil)^, errcode_ret) else
              z_CreateProgramWithBinary_5(context, num_devices, Pcl_device_id(nil)^, lengths[0], binaries[0], PErrorCode(nil)^, errcode_ret) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_5(context, num_devices, device_list[0], PUIntPtr(nil)^, binaries[0], PErrorCode(nil)^, errcode_ret) else
              z_CreateProgramWithBinary_5(context, num_devices, Pcl_device_id(nil)^, PUIntPtr(nil)^, binaries[0], PErrorCode(nil)^, errcode_ret) else
          if (lengths<>nil) and (lengths.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_5(context, num_devices, device_list[0], lengths[0], PIntPtr(nil)^, PErrorCode(nil)^, errcode_ret) else
              z_CreateProgramWithBinary_5(context, num_devices, Pcl_device_id(nil)^, lengths[0], PIntPtr(nil)^, PErrorCode(nil)^, errcode_ret) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_5(context, num_devices, device_list[0], PUIntPtr(nil)^, PIntPtr(nil)^, PErrorCode(nil)^, errcode_ret) else
              z_CreateProgramWithBinary_5(context, num_devices, Pcl_device_id(nil)^, PUIntPtr(nil)^, PIntPtr(nil)^, PErrorCode(nil)^, errcode_ret);
    end;
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_CreateProgramWithBinary_2(context: cl_context; num_devices: UInt32; device_list: array of cl_device_id; lengths: array of UIntPtr; binaries: array of IntPtr; binary_status: array of ErrorCode; var errcode_ret: ErrorCode): cl_program;
    type Pcl_device_id=^cl_device_id;
    type PUIntPtr=^UIntPtr;
    type PIntPtr=^IntPtr;
    type PErrorCode=^ErrorCode;
    begin
      Result := if (binary_status<>nil) and (binary_status.Length<>0) then
        if (binaries<>nil) and (binaries.Length<>0) then
          if (lengths<>nil) and (lengths.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_6(context, num_devices, device_list[0], lengths[0], binaries[0], binary_status[0], errcode_ret) else
              z_CreateProgramWithBinary_6(context, num_devices, Pcl_device_id(nil)^, lengths[0], binaries[0], binary_status[0], errcode_ret) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_6(context, num_devices, device_list[0], PUIntPtr(nil)^, binaries[0], binary_status[0], errcode_ret) else
              z_CreateProgramWithBinary_6(context, num_devices, Pcl_device_id(nil)^, PUIntPtr(nil)^, binaries[0], binary_status[0], errcode_ret) else
          if (lengths<>nil) and (lengths.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_6(context, num_devices, device_list[0], lengths[0], PIntPtr(nil)^, binary_status[0], errcode_ret) else
              z_CreateProgramWithBinary_6(context, num_devices, Pcl_device_id(nil)^, lengths[0], PIntPtr(nil)^, binary_status[0], errcode_ret) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_6(context, num_devices, device_list[0], PUIntPtr(nil)^, PIntPtr(nil)^, binary_status[0], errcode_ret) else
              z_CreateProgramWithBinary_6(context, num_devices, Pcl_device_id(nil)^, PUIntPtr(nil)^, PIntPtr(nil)^, binary_status[0], errcode_ret) else
        if (binaries<>nil) and (binaries.Length<>0) then
          if (lengths<>nil) and (lengths.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_6(context, num_devices, device_list[0], lengths[0], binaries[0], PErrorCode(nil)^, errcode_ret) else
              z_CreateProgramWithBinary_6(context, num_devices, Pcl_device_id(nil)^, lengths[0], binaries[0], PErrorCode(nil)^, errcode_ret) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_6(context, num_devices, device_list[0], PUIntPtr(nil)^, binaries[0], PErrorCode(nil)^, errcode_ret) else
              z_CreateProgramWithBinary_6(context, num_devices, Pcl_device_id(nil)^, PUIntPtr(nil)^, binaries[0], PErrorCode(nil)^, errcode_ret) else
          if (lengths<>nil) and (lengths.Length<>0) then
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_6(context, num_devices, device_list[0], lengths[0], PIntPtr(nil)^, PErrorCode(nil)^, errcode_ret) else
              z_CreateProgramWithBinary_6(context, num_devices, Pcl_device_id(nil)^, lengths[0], PIntPtr(nil)^, PErrorCode(nil)^, errcode_ret) else
            if (device_list<>nil) and (device_list.Length<>0) then
              z_CreateProgramWithBinary_6(context, num_devices, device_list[0], PUIntPtr(nil)^, PIntPtr(nil)^, PErrorCode(nil)^, errcode_ret) else
              z_CreateProgramWithBinary_6(context, num_devices, Pcl_device_id(nil)^, PUIntPtr(nil)^, PIntPtr(nil)^, PErrorCode(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBinary(context: cl_context; num_devices: UInt32; device_list: array of cl_device_id; lengths: array of UIntPtr; binaries: array of array of Byte; binary_status: array of ErrorCode; var errcode_ret: ErrorCode): cl_program;
    begin
      var binaries_temp_arr: array of IntPtr;
      try
        binaries_temp_arr := binaries?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<Byte>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_CreateProgramWithBinary_2(context, num_devices, device_list, lengths, binaries_temp_arr, binary_status, errcode_ret);
      finally
        if binaries_temp_arr<>nil then foreach var arr_el1 in binaries_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBinary(context: cl_context; num_devices: UInt32; device_list: array of cl_device_id; lengths: array of UIntPtr; binaries: array of array of Byte; binary_status: array of ErrorCode; errcode_ret: IntPtr): cl_program;
    begin
      var binaries_temp_arr: array of IntPtr;
      try
        binaries_temp_arr := binaries?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<Byte>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_CreateProgramWithBinary_1(context, num_devices, device_list, lengths, binaries_temp_arr, binary_status, errcode_ret);
      finally
        if binaries_temp_arr<>nil then foreach var arr_el1 in binaries_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBinary(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; var lengths: UIntPtr; var binaries: IntPtr; var binary_status: ErrorCode; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithBinary_6(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBinary(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; var lengths: UIntPtr; var binaries: IntPtr; var binary_status: ErrorCode; errcode_ret: IntPtr): cl_program :=
    z_CreateProgramWithBinary_5(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBinary(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; var lengths: UIntPtr; var binaries: IntPtr; binary_status: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithBinary_4(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBinary(context: cl_context; num_devices: UInt32; device_list: IntPtr; lengths: IntPtr; binaries: pointer; var binary_status: ErrorCode; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithBinary_3(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBinary(context: cl_context; num_devices: UInt32; device_list: IntPtr; lengths: IntPtr; binaries: pointer; var binary_status: ErrorCode; errcode_ret: IntPtr): cl_program :=
    z_CreateProgramWithBinary_2(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBinary(context: cl_context; num_devices: UInt32; device_list: IntPtr; lengths: IntPtr; binaries: pointer; binary_status: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithBinary_1(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
    
    // added in cl1.2
    private static function z_CreateProgramWithBuiltInKernels_1(context: cl_context; num_devices: UInt32; device_list: IntPtr; kernel_names: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithBuiltInKernels';
    private static function z_CreateProgramWithBuiltInKernels_2(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; kernel_names: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithBuiltInKernels';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBuiltInKernels(context: cl_context; num_devices: UInt32; device_list: array of cl_device_id; kernel_names: string; var errcode_ret: ErrorCode): cl_program;
    type Pcl_device_id=^cl_device_id;
    begin
      var kernel_names_str_ptr: IntPtr;
      try
        kernel_names_str_ptr := Marshal.StringToHGlobalAnsi(kernel_names);
        Result := if (device_list<>nil) and (device_list.Length<>0) then
          z_CreateProgramWithBuiltInKernels_2(context, num_devices, device_list[0], kernel_names_str_ptr, errcode_ret) else
          z_CreateProgramWithBuiltInKernels_2(context, num_devices, Pcl_device_id(nil)^, kernel_names_str_ptr, errcode_ret);
      finally
        Marshal.FreeHGlobal(kernel_names_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBuiltInKernels(context: cl_context; num_devices: UInt32; device_list: array of cl_device_id; kernel_names: IntPtr; var errcode_ret: ErrorCode): cl_program;
    type Pcl_device_id=^cl_device_id;
    begin
      Result := if (device_list<>nil) and (device_list.Length<>0) then
        z_CreateProgramWithBuiltInKernels_2(context, num_devices, device_list[0], kernel_names, errcode_ret) else
        z_CreateProgramWithBuiltInKernels_2(context, num_devices, Pcl_device_id(nil)^, kernel_names, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBuiltInKernels(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; kernel_names: string; var errcode_ret: ErrorCode): cl_program;
    begin
      var kernel_names_str_ptr: IntPtr;
      try
        kernel_names_str_ptr := Marshal.StringToHGlobalAnsi(kernel_names);
        Result := z_CreateProgramWithBuiltInKernels_2(context, num_devices, device_list, kernel_names_str_ptr, errcode_ret);
      finally
        Marshal.FreeHGlobal(kernel_names_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBuiltInKernels(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; kernel_names: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithBuiltInKernels_2(context, num_devices, device_list, kernel_names, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBuiltInKernels(context: cl_context; num_devices: UInt32; device_list: IntPtr; kernel_names: string; var errcode_ret: ErrorCode): cl_program;
    begin
      var kernel_names_str_ptr: IntPtr;
      try
        kernel_names_str_ptr := Marshal.StringToHGlobalAnsi(kernel_names);
        Result := z_CreateProgramWithBuiltInKernels_1(context, num_devices, device_list, kernel_names_str_ptr, errcode_ret);
      finally
        Marshal.FreeHGlobal(kernel_names_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithBuiltInKernels(context: cl_context; num_devices: UInt32; device_list: IntPtr; kernel_names: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithBuiltInKernels_1(context, num_devices, device_list, kernel_names, errcode_ret);
    
    // added in cl2.1
    private static function z_CreateProgramWithIL_1(context: cl_context; il: IntPtr; length: UIntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithIL';
    private static function z_CreateProgramWithIL_2(context: cl_context; var il: byte; length: UIntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithIL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithIL(context: cl_context; il: array of byte; length: UIntPtr; var errcode_ret: ErrorCode): cl_program;
    type Pbyte=^byte;
    begin
      Result := if (il<>nil) and (il.Length<>0) then
        z_CreateProgramWithIL_2(context, il[0], length, errcode_ret) else
        z_CreateProgramWithIL_2(context, Pbyte(nil)^, length, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithIL(context: cl_context; var il: byte; length: UIntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithIL_2(context, il, length, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithIL(context: cl_context; il: IntPtr; length: UIntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithIL_1(context, il, length, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateProgramWithSource_1(context: cl_context; count: UInt32; strings: pointer; lengths: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithSource';
    private static function z_CreateProgramWithSource_2(context: cl_context; count: UInt32; strings: pointer; var lengths: UIntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithSource';
    private static function z_CreateProgramWithSource_3(context: cl_context; count: UInt32; var strings: IntPtr; lengths: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithSource';
    private static function z_CreateProgramWithSource_4(context: cl_context; count: UInt32; var strings: IntPtr; var lengths: UIntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithSource';
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_CreateProgramWithSource_1(context: cl_context; count: UInt32; strings: array of IntPtr; lengths: array of UIntPtr; var errcode_ret: ErrorCode): cl_program;
    type PIntPtr=^IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (lengths<>nil) and (lengths.Length<>0) then
        if (strings<>nil) and (strings.Length<>0) then
          z_CreateProgramWithSource_4(context, count, strings[0], lengths[0], errcode_ret) else
          z_CreateProgramWithSource_4(context, count, PIntPtr(nil)^, lengths[0], errcode_ret) else
        if (strings<>nil) and (strings.Length<>0) then
          z_CreateProgramWithSource_4(context, count, strings[0], PUIntPtr(nil)^, errcode_ret) else
          z_CreateProgramWithSource_4(context, count, PIntPtr(nil)^, PUIntPtr(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithSource(context: cl_context; count: UInt32; strings: array of string; lengths: array of UIntPtr; var errcode_ret: ErrorCode): cl_program;
    begin
      var strings_str_ptrs: array of IntPtr;
      try
        strings_str_ptrs := strings?.ConvertAll(arr_el1->
          Marshal.StringToHGlobalAnsi(arr_el1)
        );
        Result := temp_CreateProgramWithSource_1(context, count, strings_str_ptrs, lengths, errcode_ret);
      finally
        if strings_str_ptrs<>nil then foreach var arr_el1 in strings_str_ptrs do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithSource(context: cl_context; count: UInt32; var strings: IntPtr; var lengths: UIntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithSource_4(context, count, strings, lengths, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithSource(context: cl_context; count: UInt32; var strings: IntPtr; lengths: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithSource_3(context, count, strings, lengths, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithSource(context: cl_context; count: UInt32; strings: pointer; var lengths: UIntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithSource_2(context, count, strings, lengths, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithSource(context: cl_context; count: UInt32; strings: pointer; lengths: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithSource_1(context, count, strings, lengths, errcode_ret);
    
    // added in cl1.0
    private static function z_CreateSampler_1(context: cl_context; normalized_coords: Bool; addressing_mode: AddressingMode; filter_mode: FilterMode; var errcode_ret: ErrorCode): cl_sampler;
    external 'opencl' name 'clCreateSampler';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSampler(context: cl_context; normalized_coords: Bool; addressing_mode: AddressingMode; filter_mode: FilterMode; var errcode_ret: ErrorCode): cl_sampler :=
    z_CreateSampler_1(context, normalized_coords, addressing_mode, filter_mode, errcode_ret);
    
    // added in cl2.0
    private static function z_CreateSamplerWithProperties_1(context: cl_context; sampler_properties: IntPtr; var errcode_ret: ErrorCode): cl_sampler;
    external 'opencl' name 'clCreateSamplerWithProperties';
    private static function z_CreateSamplerWithProperties_2(context: cl_context; var sampler_properties: SamplerProperties; var errcode_ret: ErrorCode): cl_sampler;
    external 'opencl' name 'clCreateSamplerWithProperties';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSamplerWithProperties(context: cl_context; sampler_properties: array of SamplerProperties; var errcode_ret: ErrorCode): cl_sampler;
    type PSamplerProperties=^SamplerProperties;
    begin
      Result := if (sampler_properties<>nil) and (sampler_properties.Length<>0) then
        z_CreateSamplerWithProperties_2(context, sampler_properties[0], errcode_ret) else
        z_CreateSamplerWithProperties_2(context, PSamplerProperties(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSamplerWithProperties(context: cl_context; var sampler_properties: SamplerProperties; var errcode_ret: ErrorCode): cl_sampler :=
    z_CreateSamplerWithProperties_2(context, sampler_properties, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSamplerWithProperties(context: cl_context; sampler_properties: IntPtr; var errcode_ret: ErrorCode): cl_sampler :=
    z_CreateSamplerWithProperties_1(context, sampler_properties, errcode_ret);
    
    // added in cl1.1
    private static function z_CreateSubBuffer_1(buffer: cl_mem; flags: MemFlags; buffer_create_type: BufferCreateType; buffer_create_info: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateSubBuffer';
    private static function z_CreateSubBuffer_2(buffer: cl_mem; flags: MemFlags; buffer_create_type: BufferCreateType; var buffer_create_info: cl_buffer_region; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateSubBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubBuffer(buffer: cl_mem; flags: MemFlags; buffer_create_type: BufferCreateType; var buffer_create_info: cl_buffer_region; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateSubBuffer_2(buffer, flags, buffer_create_type, buffer_create_info, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubBuffer(buffer: cl_mem; flags: MemFlags; buffer_create_type: BufferCreateType; buffer_create_info: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateSubBuffer_1(buffer, flags, buffer_create_type, buffer_create_info, errcode_ret);
    
    // added in cl1.2
    private static function z_CreateSubDevices_1(in_device: cl_device_id; properties: IntPtr; num_devices: UInt32; out_devices: IntPtr; num_devices_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateSubDevices';
    private static function z_CreateSubDevices_2(in_device: cl_device_id; properties: IntPtr; num_devices: UInt32; out_devices: IntPtr; var num_devices_ret: UInt32): ErrorCode;
    external 'opencl' name 'clCreateSubDevices';
    private static function z_CreateSubDevices_3(in_device: cl_device_id; properties: IntPtr; num_devices: UInt32; var out_devices: cl_device_id; num_devices_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateSubDevices';
    private static function z_CreateSubDevices_4(in_device: cl_device_id; properties: IntPtr; num_devices: UInt32; var out_devices: cl_device_id; var num_devices_ret: UInt32): ErrorCode;
    external 'opencl' name 'clCreateSubDevices';
    private static function z_CreateSubDevices_5(in_device: cl_device_id; var properties: DevicePartitionProperty; num_devices: UInt32; out_devices: IntPtr; num_devices_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateSubDevices';
    private static function z_CreateSubDevices_6(in_device: cl_device_id; var properties: DevicePartitionProperty; num_devices: UInt32; out_devices: IntPtr; var num_devices_ret: UInt32): ErrorCode;
    external 'opencl' name 'clCreateSubDevices';
    private static function z_CreateSubDevices_7(in_device: cl_device_id; var properties: DevicePartitionProperty; num_devices: UInt32; var out_devices: cl_device_id; num_devices_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateSubDevices';
    private static function z_CreateSubDevices_8(in_device: cl_device_id; var properties: DevicePartitionProperty; num_devices: UInt32; var out_devices: cl_device_id; var num_devices_ret: UInt32): ErrorCode;
    external 'opencl' name 'clCreateSubDevices';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; properties: array of DevicePartitionProperty; num_devices: UInt32; var out_devices: cl_device_id; var num_devices_ret: UInt32): ErrorCode;
    type PDevicePartitionProperty=^DevicePartitionProperty;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateSubDevices_8(in_device, properties[0], num_devices, out_devices, num_devices_ret) else
        z_CreateSubDevices_8(in_device, PDevicePartitionProperty(nil)^, num_devices, out_devices, num_devices_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; properties: array of DevicePartitionProperty; num_devices: UInt32; var out_devices: cl_device_id; num_devices_ret: IntPtr): ErrorCode;
    type PDevicePartitionProperty=^DevicePartitionProperty;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateSubDevices_7(in_device, properties[0], num_devices, out_devices, num_devices_ret) else
        z_CreateSubDevices_7(in_device, PDevicePartitionProperty(nil)^, num_devices, out_devices, num_devices_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; properties: array of DevicePartitionProperty; num_devices: UInt32; out_devices: IntPtr; var num_devices_ret: UInt32): ErrorCode;
    type PDevicePartitionProperty=^DevicePartitionProperty;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateSubDevices_6(in_device, properties[0], num_devices, out_devices, num_devices_ret) else
        z_CreateSubDevices_6(in_device, PDevicePartitionProperty(nil)^, num_devices, out_devices, num_devices_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; properties: array of DevicePartitionProperty; num_devices: UInt32; out_devices: IntPtr; num_devices_ret: IntPtr): ErrorCode;
    type PDevicePartitionProperty=^DevicePartitionProperty;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateSubDevices_5(in_device, properties[0], num_devices, out_devices, num_devices_ret) else
        z_CreateSubDevices_5(in_device, PDevicePartitionProperty(nil)^, num_devices, out_devices, num_devices_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; var properties: DevicePartitionProperty; num_devices: UInt32; var out_devices: cl_device_id; var num_devices_ret: UInt32): ErrorCode :=
    z_CreateSubDevices_8(in_device, properties, num_devices, out_devices, num_devices_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; var properties: DevicePartitionProperty; num_devices: UInt32; var out_devices: cl_device_id; num_devices_ret: IntPtr): ErrorCode :=
    z_CreateSubDevices_7(in_device, properties, num_devices, out_devices, num_devices_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; var properties: DevicePartitionProperty; num_devices: UInt32; out_devices: IntPtr; var num_devices_ret: UInt32): ErrorCode :=
    z_CreateSubDevices_6(in_device, properties, num_devices, out_devices, num_devices_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; var properties: DevicePartitionProperty; num_devices: UInt32; out_devices: IntPtr; num_devices_ret: IntPtr): ErrorCode :=
    z_CreateSubDevices_5(in_device, properties, num_devices, out_devices, num_devices_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; properties: IntPtr; num_devices: UInt32; var out_devices: cl_device_id; var num_devices_ret: UInt32): ErrorCode :=
    z_CreateSubDevices_4(in_device, properties, num_devices, out_devices, num_devices_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; properties: IntPtr; num_devices: UInt32; var out_devices: cl_device_id; num_devices_ret: IntPtr): ErrorCode :=
    z_CreateSubDevices_3(in_device, properties, num_devices, out_devices, num_devices_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; properties: IntPtr; num_devices: UInt32; out_devices: IntPtr; var num_devices_ret: UInt32): ErrorCode :=
    z_CreateSubDevices_2(in_device, properties, num_devices, out_devices, num_devices_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevices(in_device: cl_device_id; properties: IntPtr; num_devices: UInt32; out_devices: IntPtr; num_devices_ret: IntPtr): ErrorCode :=
    z_CreateSubDevices_1(in_device, properties, num_devices, out_devices, num_devices_ret);
    
    // added in cl1.1
    private static function z_CreateUserEvent_1(context: cl_context; var errcode_ret: ErrorCode): cl_event;
    external 'opencl' name 'clCreateUserEvent';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateUserEvent(context: cl_context; var errcode_ret: ErrorCode): cl_event :=
    z_CreateUserEvent_1(context, errcode_ret);
    
    // added in cl1.0
    private static function z_EnqueueBarrier_1(command_queue: cl_command_queue): ErrorCode;
    external 'opencl' name 'clEnqueueBarrier';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueBarrier(command_queue: cl_command_queue): ErrorCode :=
    z_EnqueueBarrier_1(command_queue);
    
    // added in cl1.2
    private static function z_EnqueueBarrierWithWaitList_1(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueBarrierWithWaitList';
    private static function z_EnqueueBarrierWithWaitList_2(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueBarrierWithWaitList';
    private static function z_EnqueueBarrierWithWaitList_3(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueBarrierWithWaitList';
    private static function z_EnqueueBarrierWithWaitList_4(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueBarrierWithWaitList';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueBarrierWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueBarrierWithWaitList_4(command_queue, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueBarrierWithWaitList_4(command_queue, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueBarrierWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueBarrierWithWaitList_3(command_queue, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueBarrierWithWaitList_3(command_queue, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueBarrierWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueBarrierWithWaitList_4(command_queue, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueBarrierWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueBarrierWithWaitList_3(command_queue, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueBarrierWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueBarrierWithWaitList_2(command_queue, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueBarrierWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueBarrierWithWaitList_1(command_queue, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueCopyBuffer_1(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBuffer';
    private static function z_EnqueueCopyBuffer_2(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBuffer';
    private static function z_EnqueueCopyBuffer_3(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBuffer';
    private static function z_EnqueueCopyBuffer_4(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBuffer(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyBuffer_4(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyBuffer_4(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBuffer(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyBuffer_3(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyBuffer_3(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBuffer(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyBuffer_4(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBuffer(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyBuffer_3(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBuffer(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyBuffer_2(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBuffer(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyBuffer_1(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.1
    private static function z_EnqueueCopyBufferRect_1(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBufferRect';
    private static function z_EnqueueCopyBufferRect_2(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBufferRect';
    private static function z_EnqueueCopyBufferRect_3(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBufferRect';
    private static function z_EnqueueCopyBufferRect_4(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBufferRect';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, src_origin[0], dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyBufferRect_4(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyBufferRect_3(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyBufferRect_2(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferRect(command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyBufferRect_1(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueCopyBufferToImage_1(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBufferToImage';
    private static function z_EnqueueCopyBufferToImage_2(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBufferToImage';
    private static function z_EnqueueCopyBufferToImage_3(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBufferToImage';
    private static function z_EnqueueCopyBufferToImage_4(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyBufferToImage';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          z_EnqueueCopyBufferToImage_2(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyBufferToImage_2(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          z_EnqueueCopyBufferToImage_2(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyBufferToImage_2(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          z_EnqueueCopyBufferToImage_1(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyBufferToImage_1(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          z_EnqueueCopyBufferToImage_1(command_queue, src_buffer, dst_image, src_offset, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyBufferToImage_1(command_queue, src_buffer, dst_image, src_offset, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyBufferToImage_4(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyBufferToImage_3(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyBufferToImage_2(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyBufferToImage(command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyBufferToImage_1(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueCopyImage_1(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyImage';
    private static function z_EnqueueCopyImage_2(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyImage';
    private static function z_EnqueueCopyImage_3(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyImage';
    private static function z_EnqueueCopyImage_4(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyImage';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], region[0], num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list[0], &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], region[0], num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list[0], &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (region<>nil) and (region.Length<>0) then
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (dst_origin<>nil) and (dst_origin.Length<>0) then
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (src_origin<>nil) and (src_origin.Length<>0) then
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_4(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_3(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_2(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_2(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_2(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_2(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_2(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_2(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_2(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_2(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: array of UIntPtr; dst_origin: array of UIntPtr; region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_1(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_1(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], region[0], num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_1(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_1(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (dst_origin<>nil) and (dst_origin.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_1(command_queue, src_image, dst_image, src_origin[0], dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_1(command_queue, src_image, dst_image, PUIntPtr(nil)^, dst_origin[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImage_1(command_queue, src_image, dst_image, src_origin[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueCopyImage_1(command_queue, src_image, dst_image, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyImage_4(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyImage_3(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyImage_2(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImage(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyImage_1(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueCopyImageToBuffer_1(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyImageToBuffer';
    private static function z_EnqueueCopyImageToBuffer_2(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyImageToBuffer';
    private static function z_EnqueueCopyImageToBuffer_3(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCopyImageToBuffer';
    private static function z_EnqueueCopyImageToBuffer_4(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCopyImageToBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; region: array of UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin[0], region[0], dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, region[0], dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin[0], PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
        if (region<>nil) and (region.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin[0], region[0], dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, region[0], dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin[0], PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; region: array of UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin[0], region[0], dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, region[0], dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin[0], PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
        if (region<>nil) and (region.Length<>0) then
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin[0], region[0], dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, region[0], dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (src_origin<>nil) and (src_origin.Length<>0) then
            z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin[0], PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; region: array of UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (src_origin<>nil) and (src_origin.Length<>0) then
          z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin[0], region[0], dst_offset, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, region[0], dst_offset, num_events_in_wait_list, event_wait_list, &event) else
        if (src_origin<>nil) and (src_origin.Length<>0) then
          z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin[0], PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; region: array of UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (src_origin<>nil) and (src_origin.Length<>0) then
          z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin[0], region[0], dst_offset, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, region[0], dst_offset, num_events_in_wait_list, event_wait_list, &event) else
        if (src_origin<>nil) and (src_origin.Length<>0) then
          z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin[0], PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; region: array of UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (src_origin<>nil) and (src_origin.Length<>0) then
          z_EnqueueCopyImageToBuffer_2(command_queue, src_image, dst_buffer, src_origin[0], region[0], dst_offset, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyImageToBuffer_2(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, region[0], dst_offset, num_events_in_wait_list, event_wait_list, &event) else
        if (src_origin<>nil) and (src_origin.Length<>0) then
          z_EnqueueCopyImageToBuffer_2(command_queue, src_image, dst_buffer, src_origin[0], PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyImageToBuffer_2(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: array of UIntPtr; region: array of UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (src_origin<>nil) and (src_origin.Length<>0) then
          z_EnqueueCopyImageToBuffer_1(command_queue, src_image, dst_buffer, src_origin[0], region[0], dst_offset, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyImageToBuffer_1(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, region[0], dst_offset, num_events_in_wait_list, event_wait_list, &event) else
        if (src_origin<>nil) and (src_origin.Length<>0) then
          z_EnqueueCopyImageToBuffer_1(command_queue, src_image, dst_buffer, src_origin[0], PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueCopyImageToBuffer_1(command_queue, src_image, dst_buffer, PUIntPtr(nil)^, PUIntPtr(nil)^, dst_offset, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyImageToBuffer_4(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyImageToBuffer_3(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueCopyImageToBuffer_2(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCopyImageToBuffer(command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueCopyImageToBuffer_1(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.2
    private static function z_EnqueueFillBuffer_1(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueFillBuffer';
    private static function z_EnqueueFillBuffer_2(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueFillBuffer';
    private static function z_EnqueueFillBuffer_3(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueFillBuffer';
    private static function z_EnqueueFillBuffer_4(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueFillBuffer';
    private static function z_EnqueueFillBuffer_5(command_queue: cl_command_queue; buffer: cl_mem; var pattern: Byte; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueFillBuffer';
    private static function z_EnqueueFillBuffer_6(command_queue: cl_command_queue; buffer: cl_mem; var pattern: Byte; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueFillBuffer';
    private static function z_EnqueueFillBuffer_7(command_queue: cl_command_queue; buffer: cl_mem; var pattern: Byte; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueFillBuffer';
    private static function z_EnqueueFillBuffer_8(command_queue: cl_command_queue; buffer: cl_mem; var pattern: Byte; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueFillBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; pattern: array of T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueFillBuffer(command_queue, buffer, pattern[0], pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueFillBuffer(command_queue, buffer, PT(nil)^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; pattern: array of T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueFillBuffer(command_queue, buffer, pattern[0], pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueFillBuffer(command_queue, buffer, PT(nil)^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; pattern: array of T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueFillBuffer(command_queue, buffer, pattern[0], pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueFillBuffer(command_queue, buffer, PT(nil)^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; pattern: array of T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueFillBuffer(command_queue, buffer, pattern[0], pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueFillBuffer(command_queue, buffer, PT(nil)^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; pattern: array of T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueFillBuffer(command_queue, buffer, pattern[0], pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueFillBuffer(command_queue, buffer, PT(nil)^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; pattern: array of T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueFillBuffer(command_queue, buffer, pattern[0], pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueFillBuffer(command_queue, buffer, PT(nil)^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; var pattern: T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueFillBuffer_8(command_queue, buffer, PByte(pointer(@pattern))^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueFillBuffer_8(command_queue, buffer, PByte(pointer(@pattern))^, pattern_size, offset, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; var pattern: T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueFillBuffer_7(command_queue, buffer, PByte(pointer(@pattern))^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueFillBuffer_7(command_queue, buffer, PByte(pointer(@pattern))^, pattern_size, offset, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; var pattern: T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueFillBuffer_8(command_queue, buffer, PByte(pointer(@pattern))^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; var pattern: T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueFillBuffer_7(command_queue, buffer, PByte(pointer(@pattern))^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; var pattern: T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueFillBuffer_6(command_queue, buffer, PByte(pointer(@pattern))^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; var pattern: T; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueFillBuffer_5(command_queue, buffer, PByte(pointer(@pattern))^, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueFillBuffer_4(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueFillBuffer_4(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueFillBuffer_3(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueFillBuffer_3(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueFillBuffer_4(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueFillBuffer_3(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueFillBuffer_2(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillBuffer(command_queue: cl_command_queue; buffer: cl_mem; pattern: pointer; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueFillBuffer_1(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.2
    private static function z_EnqueueFillImage_1(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueFillImage';
    private static function z_EnqueueFillImage_2(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueFillImage';
    private static function z_EnqueueFillImage_3(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueFillImage';
    private static function z_EnqueueFillImage_4(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueFillImage';
    private static function z_EnqueueFillImage_5(command_queue: cl_command_queue; image: cl_mem; var fill_color: Byte; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueFillImage';
    private static function z_EnqueueFillImage_6(command_queue: cl_command_queue; image: cl_mem; var fill_color: Byte; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueFillImage';
    private static function z_EnqueueFillImage_7(command_queue: cl_command_queue; image: cl_mem; var fill_color: Byte; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueFillImage';
    private static function z_EnqueueFillImage_8(command_queue: cl_command_queue; image: cl_mem; var fill_color: Byte; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueFillImage';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage<T>(command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueFillImage_8(command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueFillImage_8(command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage<T>(command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueFillImage_7(command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueFillImage_7(command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage<T>(command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueFillImage_8(command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage<T>(command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueFillImage_7(command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage<T>(command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueFillImage_6(command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage<T>(command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueFillImage_5(command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueFillImage_4(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueFillImage_4(command_queue, image, fill_color, origin, region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueFillImage_3(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueFillImage_3(command_queue, image, fill_color, origin, region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueFillImage_4(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueFillImage_3(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueFillImage_2(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueFillImage(command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueFillImage_1(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueMapBuffer_1(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapBuffer';
    private static function z_EnqueueMapBuffer_2(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapBuffer';
    private static function z_EnqueueMapBuffer_3(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapBuffer';
    private static function z_EnqueueMapBuffer_4(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMapBuffer_4(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
        z_EnqueueMapBuffer_4(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMapBuffer_3(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
        z_EnqueueMapBuffer_3(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapBuffer_4(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapBuffer_3(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapBuffer_2(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_map: Bool; map_flags: MapFlags; offset: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapBuffer_1(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    
    // added in cl1.0
    private static function z_EnqueueMapImage_1(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapImage';
    private static function z_EnqueueMapImage_2(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapImage';
    private static function z_EnqueueMapImage_3(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapImage';
    private static function z_EnqueueMapImage_4(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapImage';
    private static function z_EnqueueMapImage_5(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapImage';
    private static function z_EnqueueMapImage_6(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapImage';
    private static function z_EnqueueMapImage_7(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapImage';
    private static function z_EnqueueMapImage_8(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clEnqueueMapImage';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: array of UIntPtr; region: array of UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (origin<>nil) and (origin.Length<>0) then
            z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin[0], region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
            z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
          if (origin<>nil) and (origin.Length<>0) then
            z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin[0], PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
            z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
        if (region<>nil) and (region.Length<>0) then
          if (origin<>nil) and (origin.Length<>0) then
            z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin[0], region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret) else
            z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret) else
          if (origin<>nil) and (origin.Length<>0) then
            z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin[0], PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret) else
            z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: array of UIntPtr; region: array of UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (region<>nil) and (region.Length<>0) then
          if (origin<>nil) and (origin.Length<>0) then
            z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin[0], region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
            z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
          if (origin<>nil) and (origin.Length<>0) then
            z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin[0], PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
            z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
        if (region<>nil) and (region.Length<>0) then
          if (origin<>nil) and (origin.Length<>0) then
            z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin[0], region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret) else
            z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret) else
          if (origin<>nil) and (origin.Length<>0) then
            z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin[0], PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret) else
            z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: array of UIntPtr; region: array of UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (origin<>nil) and (origin.Length<>0) then
          z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin[0], region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
          z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
        if (origin<>nil) and (origin.Length<>0) then
          z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin[0], PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
          z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: array of UIntPtr; region: array of UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (origin<>nil) and (origin.Length<>0) then
          z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin[0], region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
          z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
        if (origin<>nil) and (origin.Length<>0) then
          z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin[0], PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
          z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: array of UIntPtr; region: array of UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (origin<>nil) and (origin.Length<>0) then
          z_EnqueueMapImage_6(command_queue, image, blocking_map, map_flags, origin[0], region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
          z_EnqueueMapImage_6(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
        if (origin<>nil) and (origin.Length<>0) then
          z_EnqueueMapImage_6(command_queue, image, blocking_map, map_flags, origin[0], PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
          z_EnqueueMapImage_6(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: array of UIntPtr; region: array of UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (region<>nil) and (region.Length<>0) then
        if (origin<>nil) and (origin.Length<>0) then
          z_EnqueueMapImage_5(command_queue, image, blocking_map, map_flags, origin[0], region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
          z_EnqueueMapImage_5(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, region[0], image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
        if (origin<>nil) and (origin.Length<>0) then
          z_EnqueueMapImage_5(command_queue, image, blocking_map, map_flags, origin[0], PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret) else
          z_EnqueueMapImage_5(command_queue, image, blocking_map, map_flags, PUIntPtr(nil)^, PUIntPtr(nil)^, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
        z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
        z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapImage_8(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapImage_7(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapImage_6(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; var origin: UIntPtr; var region: UIntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapImage_5(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMapImage_4(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
        z_EnqueueMapImage_4(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMapImage_3(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list[0], &event, errcode_ret) else
        z_EnqueueMapImage_3(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, Pcl_event(nil)^, &event, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapImage_4(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapImage_3(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapImage_2(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMapImage(command_queue: cl_command_queue; image: cl_mem; blocking_map: Bool; map_flags: MapFlags; origin: IntPtr; region: IntPtr; var image_row_pitch: UIntPtr; var image_slice_pitch: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr; var errcode_ret: ErrorCode): IntPtr :=
    z_EnqueueMapImage_1(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, &event, errcode_ret);
    
    // added in cl1.0
    private static function z_EnqueueMarker_1(command_queue: cl_command_queue; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMarker';
    private static function z_EnqueueMarker_2(command_queue: cl_command_queue; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMarker';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMarker(command_queue: cl_command_queue; &event: array of cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (&event<>nil) and (&event.Length<>0) then
        z_EnqueueMarker_2(command_queue, &event[0]) else
        z_EnqueueMarker_2(command_queue, Pcl_event(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMarker(command_queue: cl_command_queue; var &event: cl_event): ErrorCode :=
    z_EnqueueMarker_2(command_queue, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMarker(command_queue: cl_command_queue; &event: IntPtr): ErrorCode :=
    z_EnqueueMarker_1(command_queue, &event);
    
    // added in cl1.2
    private static function z_EnqueueMarkerWithWaitList_1(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMarkerWithWaitList';
    private static function z_EnqueueMarkerWithWaitList_2(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMarkerWithWaitList';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMarkerWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMarkerWithWaitList_2(command_queue, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMarkerWithWaitList_2(command_queue, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMarkerWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMarkerWithWaitList_2(command_queue, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMarkerWithWaitList(command_queue: cl_command_queue; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMarkerWithWaitList_1(command_queue, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.2
    private static function z_EnqueueMigrateMemObjects_1(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjects';
    private static function z_EnqueueMigrateMemObjects_2(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjects';
    private static function z_EnqueueMigrateMemObjects_3(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjects';
    private static function z_EnqueueMigrateMemObjects_4(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjects';
    private static function z_EnqueueMigrateMemObjects_5(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjects';
    private static function z_EnqueueMigrateMemObjects_6(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjects';
    private static function z_EnqueueMigrateMemObjects_7(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjects';
    private static function z_EnqueueMigrateMemObjects_8(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjects';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueMigrateMemObjects_6(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueMigrateMemObjects_6(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueMigrateMemObjects_5(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueMigrateMemObjects_5(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemObjects_8(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemObjects_7(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemObjects_6(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemObjects_5(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemObjects_4(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemObjects_4(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemObjects_3(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemObjects_3(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemObjects_4(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemObjects_3(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemObjects_2(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjects(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemObjects_1(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueNativeKernel_1(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNativeKernel';
    private static function z_EnqueueNativeKernel_2(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNativeKernel';
    private static function z_EnqueueNativeKernel_3(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNativeKernel';
    private static function z_EnqueueNativeKernel_4(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNativeKernel';
    private static function z_EnqueueNativeKernel_5(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNativeKernel';
    private static function z_EnqueueNativeKernel_6(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNativeKernel';
    private static function z_EnqueueNativeKernel_7(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNativeKernel';
    private static function z_EnqueueNativeKernel_8(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNativeKernel';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: array of cl_mem; args_mem_loc: array of IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type PIntPtr=^IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (args_mem_loc<>nil) and (args_mem_loc.Length<>0) then
          if (mem_list<>nil) and (mem_list.Length<>0) then
            z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], args_mem_loc[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, args_mem_loc[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (mem_list<>nil) and (mem_list.Length<>0) then
            z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], PIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, PIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (args_mem_loc<>nil) and (args_mem_loc.Length<>0) then
          if (mem_list<>nil) and (mem_list.Length<>0) then
            z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], args_mem_loc[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, args_mem_loc[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (mem_list<>nil) and (mem_list.Length<>0) then
            z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], PIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, PIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: array of cl_mem; args_mem_loc: array of IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type PIntPtr=^IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (args_mem_loc<>nil) and (args_mem_loc.Length<>0) then
          if (mem_list<>nil) and (mem_list.Length<>0) then
            z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], args_mem_loc[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, args_mem_loc[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (mem_list<>nil) and (mem_list.Length<>0) then
            z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], PIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, PIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (args_mem_loc<>nil) and (args_mem_loc.Length<>0) then
          if (mem_list<>nil) and (mem_list.Length<>0) then
            z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], args_mem_loc[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, args_mem_loc[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (mem_list<>nil) and (mem_list.Length<>0) then
            z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], PIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, PIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: array of cl_mem; args_mem_loc: array of IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (args_mem_loc<>nil) and (args_mem_loc.Length<>0) then
        if (mem_list<>nil) and (mem_list.Length<>0) then
          z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], args_mem_loc[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, args_mem_loc[0], num_events_in_wait_list, event_wait_list, &event) else
        if (mem_list<>nil) and (mem_list.Length<>0) then
          z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], PIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, PIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: array of cl_mem; args_mem_loc: array of IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (args_mem_loc<>nil) and (args_mem_loc.Length<>0) then
        if (mem_list<>nil) and (mem_list.Length<>0) then
          z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], args_mem_loc[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, args_mem_loc[0], num_events_in_wait_list, event_wait_list, &event) else
        if (mem_list<>nil) and (mem_list.Length<>0) then
          z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], PIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, PIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: array of cl_mem; args_mem_loc: array of IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (args_mem_loc<>nil) and (args_mem_loc.Length<>0) then
        if (mem_list<>nil) and (mem_list.Length<>0) then
          z_EnqueueNativeKernel_6(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], args_mem_loc[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueNativeKernel_6(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, args_mem_loc[0], num_events_in_wait_list, event_wait_list, &event) else
        if (mem_list<>nil) and (mem_list.Length<>0) then
          z_EnqueueNativeKernel_6(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], PIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueNativeKernel_6(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, PIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: array of cl_mem; args_mem_loc: array of IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (args_mem_loc<>nil) and (args_mem_loc.Length<>0) then
        if (mem_list<>nil) and (mem_list.Length<>0) then
          z_EnqueueNativeKernel_5(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], args_mem_loc[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueNativeKernel_5(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, args_mem_loc[0], num_events_in_wait_list, event_wait_list, &event) else
        if (mem_list<>nil) and (mem_list.Length<>0) then
          z_EnqueueNativeKernel_5(command_queue, user_func, args, cb_args, num_mem_objects, mem_list[0], PIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueNativeKernel_5(command_queue, user_func, args, cb_args, num_mem_objects, Pcl_mem(nil)^, PIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueNativeKernel_8(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueNativeKernel_7(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueNativeKernel_6(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; var mem_list: cl_mem; var args_mem_loc: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueNativeKernel_5(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNativeKernel_4(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNativeKernel_4(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNativeKernel_3(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNativeKernel_3(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueNativeKernel_4(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueNativeKernel_3(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueNativeKernel_2(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNativeKernel(command_queue: cl_command_queue; user_func: EnqueueNativeKernelCallback; args: IntPtr; cb_args: UIntPtr; num_mem_objects: UInt32; mem_list: IntPtr; args_mem_loc: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueNativeKernel_1(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueNDRangeKernel_1(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_2(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_3(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_4(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_5(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_6(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_7(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_8(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_9(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_10(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_11(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_12(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_13(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_14(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_15(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    private static function z_EnqueueNDRangeKernel_16(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueNDRangeKernel';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: array of UIntPtr; global_work_size: array of UIntPtr; local_work_size: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (local_work_size<>nil) and (local_work_size.Length<>0) then
          if (global_work_size<>nil) and (global_work_size.Length<>0) then
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list[0], &event) else
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (global_work_size<>nil) and (global_work_size.Length<>0) then
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (local_work_size<>nil) and (local_work_size.Length<>0) then
          if (global_work_size<>nil) and (global_work_size.Length<>0) then
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], local_work_size[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], local_work_size[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (global_work_size<>nil) and (global_work_size.Length<>0) then
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: array of UIntPtr; global_work_size: array of UIntPtr; local_work_size: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (local_work_size<>nil) and (local_work_size.Length<>0) then
          if (global_work_size<>nil) and (global_work_size.Length<>0) then
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list[0], &event) else
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (global_work_size<>nil) and (global_work_size.Length<>0) then
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (local_work_size<>nil) and (local_work_size.Length<>0) then
          if (global_work_size<>nil) and (global_work_size.Length<>0) then
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], local_work_size[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], local_work_size[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (global_work_size<>nil) and (global_work_size.Length<>0) then
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
              z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: array of UIntPtr; global_work_size: array of UIntPtr; local_work_size: array of UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (local_work_size<>nil) and (local_work_size.Length<>0) then
        if (global_work_size<>nil) and (global_work_size.Length<>0) then
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
        if (global_work_size<>nil) and (global_work_size.Length<>0) then
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: array of UIntPtr; global_work_size: array of UIntPtr; local_work_size: array of UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (local_work_size<>nil) and (local_work_size.Length<>0) then
        if (global_work_size<>nil) and (global_work_size.Length<>0) then
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
        if (global_work_size<>nil) and (global_work_size.Length<>0) then
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: array of UIntPtr; global_work_size: array of UIntPtr; local_work_size: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (local_work_size<>nil) and (local_work_size.Length<>0) then
        if (global_work_size<>nil) and (global_work_size.Length<>0) then
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
        if (global_work_size<>nil) and (global_work_size.Length<>0) then
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: array of UIntPtr; global_work_size: array of UIntPtr; local_work_size: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (local_work_size<>nil) and (local_work_size.Length<>0) then
        if (global_work_size<>nil) and (global_work_size.Length<>0) then
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, local_work_size[0], num_events_in_wait_list, event_wait_list, &event) else
        if (global_work_size<>nil) and (global_work_size.Length<>0) then
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
            z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
            z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueNDRangeKernel_16(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueNDRangeKernel_15(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueNDRangeKernel_14(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueNDRangeKernel_13(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNDRangeKernel_12(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNDRangeKernel_12(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNDRangeKernel_11(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNDRangeKernel_11(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueNDRangeKernel_12(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueNDRangeKernel_11(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueNDRangeKernel_10(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueNDRangeKernel_9(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNDRangeKernel_8(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNDRangeKernel_8(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNDRangeKernel_7(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNDRangeKernel_7(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueNDRangeKernel_8(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueNDRangeKernel_7(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueNDRangeKernel_6(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueNDRangeKernel_5(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNDRangeKernel_4(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNDRangeKernel_4(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueNDRangeKernel_3(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueNDRangeKernel_3(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueNDRangeKernel_4(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueNDRangeKernel_3(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueNDRangeKernel_2(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueNDRangeKernel(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; local_work_size: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueNDRangeKernel_1(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueReadBuffer_1(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadBuffer';
    private static function z_EnqueueReadBuffer_2(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadBuffer';
    private static function z_EnqueueReadBuffer_3(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadBuffer';
    private static function z_EnqueueReadBuffer_4(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadBuffer';
    private static function z_EnqueueReadBuffer_5(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadBuffer';
    private static function z_EnqueueReadBuffer_6(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadBuffer';
    private static function z_EnqueueReadBuffer_7(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadBuffer';
    private static function z_EnqueueReadBuffer_8(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueReadBuffer(command_queue, buffer, blocking_read, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadBuffer_8(command_queue, buffer, blocking_read, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadBuffer_8(command_queue, buffer, blocking_read, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadBuffer_7(command_queue, buffer, blocking_read, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadBuffer_7(command_queue, buffer, blocking_read, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadBuffer_8(command_queue, buffer, blocking_read, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadBuffer_7(command_queue, buffer, blocking_read, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadBuffer_6(command_queue, buffer, blocking_read, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadBuffer_5(command_queue, buffer, blocking_read, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadBuffer_4(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadBuffer_4(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadBuffer_3(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadBuffer_3(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReadBuffer_4(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReadBuffer_3(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReadBuffer_2(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReadBuffer_1(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.1
    private static function z_EnqueueReadBufferRect_1(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadBufferRect';
    private static function z_EnqueueReadBufferRect_2(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadBufferRect';
    private static function z_EnqueueReadBufferRect_3(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadBufferRect';
    private static function z_EnqueueReadBufferRect_4(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadBufferRect';
    private static function z_EnqueueReadBufferRect_5(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadBufferRect';
    private static function z_EnqueueReadBufferRect_6(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadBufferRect';
    private static function z_EnqueueReadBufferRect_7(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadBufferRect';
    private static function z_EnqueueReadBufferRect_8(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadBufferRect';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadBufferRect_8(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadBufferRect_8(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadBufferRect_7(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadBufferRect_7(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadBufferRect_8(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadBufferRect_7(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadBufferRect_6(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadBufferRect_5(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadBufferRect_4(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadBufferRect_4(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadBufferRect_3(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadBufferRect_3(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReadBufferRect_4(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReadBufferRect_3(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReadBufferRect_2(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_read: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReadBufferRect_1(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueReadImage_1(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadImage';
    private static function z_EnqueueReadImage_2(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadImage';
    private static function z_EnqueueReadImage_3(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadImage';
    private static function z_EnqueueReadImage_4(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadImage';
    private static function z_EnqueueReadImage_5(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadImage';
    private static function z_EnqueueReadImage_6(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadImage';
    private static function z_EnqueueReadImage_7(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadImage';
    private static function z_EnqueueReadImage_8(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadImage';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadImage_8(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadImage_8(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadImage_7(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadImage_7(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadImage_8(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadImage_7(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadImage_6(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueReadImage_5(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadImage_4(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadImage_4(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadImage_3(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadImage_3(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReadImage_4(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReadImage_3(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReadImage_2(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadImage(command_queue: cl_command_queue; image: cl_mem; blocking_read: Bool; var origin: UIntPtr; var region: UIntPtr; row_pitch: UIntPtr; slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReadImage_1(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl2.0
    private static function z_EnqueueSVMFree_1(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFree';
    private static function z_EnqueueSVMFree_2(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFree';
    private static function z_EnqueueSVMFree_3(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFree';
    private static function z_EnqueueSVMFree_4(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFree';
    private static function z_EnqueueSVMFree_5(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFree';
    private static function z_EnqueueSVMFree_6(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFree';
    private static function z_EnqueueSVMFree_7(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFree';
    private static function z_EnqueueSVMFree_8(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFree';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMFree_8(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueSVMFree_8(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMFree_8(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueSVMFree_8(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMFree_7(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueSVMFree_7(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMFree_7(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueSVMFree_7(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    begin
      Result := if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
        z_EnqueueSVMFree_8(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueSVMFree_8(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    begin
      Result := if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
        z_EnqueueSVMFree_7(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueSVMFree_7(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    begin
      Result := if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
        z_EnqueueSVMFree_6(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueSVMFree_6(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    begin
      Result := if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
        z_EnqueueSVMFree_5(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueSVMFree_5(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMFree_8(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMFree_8(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMFree_7(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMFree_7(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMFree_8(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMFree_7(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMFree_6(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMFree_5(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMFree_4(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMFree_4(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMFree_3(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMFree_3(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMFree_4(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMFree_3(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMFree_2(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFree(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMFree_1(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl2.0
    private static function z_EnqueueSVMMap_1(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMap';
    private static function z_EnqueueSVMMap_2(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMap';
    private static function z_EnqueueSVMMap_3(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMap';
    private static function z_EnqueueSVMMap_4(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMap';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMap(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMap_4(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMap_4(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMap(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMap_3(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMap_3(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMap(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMap_4(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMap(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMap_3(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMap(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMap_2(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMap(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMap_1(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl2.0
    private static function z_EnqueueSVMMemcpy_1(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemcpy';
    private static function z_EnqueueSVMMemcpy_2(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemcpy';
    private static function z_EnqueueSVMMemcpy_3(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemcpy';
    private static function z_EnqueueSVMMemcpy_4(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemcpy';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpy(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemcpy_4(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemcpy_4(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpy(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemcpy_3(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemcpy_3(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpy(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMemcpy_4(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpy(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMemcpy_3(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpy(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMemcpy_2(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpy(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMemcpy_1(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl2.0
    private static function z_EnqueueSVMMemFill_1(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFill';
    private static function z_EnqueueSVMMemFill_2(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFill';
    private static function z_EnqueueSVMMemFill_3(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFill';
    private static function z_EnqueueSVMMemFill_4(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFill';
    private static function z_EnqueueSVMMemFill_5(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: Byte; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFill';
    private static function z_EnqueueSVMMemFill_6(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: Byte; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFill';
    private static function z_EnqueueSVMMemFill_7(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: Byte; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFill';
    private static function z_EnqueueSVMMemFill_8(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: Byte; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFill';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFill(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFill(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFill(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFill(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFill(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFill(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFill(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFill(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFill(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFill(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFill(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFill(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemFill_8(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemFill_8(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemFill_7(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemFill_7(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueSVMMemFill_8(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueSVMMemFill_7(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueSVMMemFill_6(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueSVMMemFill_5(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemFill_4(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemFill_4(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemFill_3(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemFill_3(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMemFill_4(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMemFill_3(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMemFill_2(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFill(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMemFill_1(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl2.1
    private static function z_EnqueueSVMMigrateMem_1(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMigrateMem';
    private static function z_EnqueueSVMMigrateMem_2(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMigrateMem';
    private static function z_EnqueueSVMMigrateMem_3(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMigrateMem';
    private static function z_EnqueueSVMMigrateMem_4(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMigrateMem';
    private static function z_EnqueueSVMMigrateMem_5(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMigrateMem';
    private static function z_EnqueueSVMMigrateMem_6(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMigrateMem';
    private static function z_EnqueueSVMMigrateMem_7(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMigrateMem';
    private static function z_EnqueueSVMMigrateMem_8(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMigrateMem';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; sizes: array of UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (sizes<>nil) and (sizes.Length<>0) then
          if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
            z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers[0], sizes[0], flags, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, PIntPtr(nil)^, sizes[0], flags, num_events_in_wait_list, event_wait_list[0], &event) else
          if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
            z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers[0], PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, PIntPtr(nil)^, PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        if (sizes<>nil) and (sizes.Length<>0) then
          if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
            z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers[0], sizes[0], flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, PIntPtr(nil)^, sizes[0], flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
            z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers[0], PUIntPtr(nil)^, flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, PIntPtr(nil)^, PUIntPtr(nil)^, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; sizes: array of UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (sizes<>nil) and (sizes.Length<>0) then
          if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
            z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers[0], sizes[0], flags, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, PIntPtr(nil)^, sizes[0], flags, num_events_in_wait_list, event_wait_list[0], &event) else
          if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
            z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers[0], PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, PIntPtr(nil)^, PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        if (sizes<>nil) and (sizes.Length<>0) then
          if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
            z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers[0], sizes[0], flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, PIntPtr(nil)^, sizes[0], flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
            z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers[0], PUIntPtr(nil)^, flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, PIntPtr(nil)^, PUIntPtr(nil)^, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; sizes: array of UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (sizes<>nil) and (sizes.Length<>0) then
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers[0], sizes[0], flags, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, PIntPtr(nil)^, sizes[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers[0], PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, PIntPtr(nil)^, PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; sizes: array of UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (sizes<>nil) and (sizes.Length<>0) then
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers[0], sizes[0], flags, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, PIntPtr(nil)^, sizes[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers[0], PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, PIntPtr(nil)^, PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; sizes: array of UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (sizes<>nil) and (sizes.Length<>0) then
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMMigrateMem_6(command_queue, num_svm_pointers, svm_pointers[0], sizes[0], flags, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSVMMigrateMem_6(command_queue, num_svm_pointers, PIntPtr(nil)^, sizes[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMMigrateMem_6(command_queue, num_svm_pointers, svm_pointers[0], PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSVMMigrateMem_6(command_queue, num_svm_pointers, PIntPtr(nil)^, PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; sizes: array of UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (sizes<>nil) and (sizes.Length<>0) then
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMMigrateMem_5(command_queue, num_svm_pointers, svm_pointers[0], sizes[0], flags, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSVMMigrateMem_5(command_queue, num_svm_pointers, PIntPtr(nil)^, sizes[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMMigrateMem_5(command_queue, num_svm_pointers, svm_pointers[0], PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSVMMigrateMem_5(command_queue, num_svm_pointers, PIntPtr(nil)^, PUIntPtr(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMigrateMem_8(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMigrateMem_7(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMigrateMem_6(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; var sizes: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMigrateMem_5(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMigrateMem_4(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMigrateMem_4(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMigrateMem_3(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMigrateMem_3(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMigrateMem_4(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMigrateMem_3(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMigrateMem_2(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMigrateMem(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; sizes: IntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMigrateMem_1(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl2.0
    private static function z_EnqueueSVMUnmap_1(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMUnmap';
    private static function z_EnqueueSVMUnmap_2(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMUnmap';
    private static function z_EnqueueSVMUnmap_3(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMUnmap';
    private static function z_EnqueueSVMUnmap_4(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMUnmap';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmap(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMUnmap_4(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMUnmap_4(command_queue, svm_ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmap(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMUnmap_3(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMUnmap_3(command_queue, svm_ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmap(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMUnmap_4(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmap(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMUnmap_3(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmap(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMUnmap_2(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmap(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMUnmap_1(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueTask_1(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueTask';
    private static function z_EnqueueTask_2(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueTask';
    private static function z_EnqueueTask_3(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueTask';
    private static function z_EnqueueTask_4(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueTask';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueTask(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueTask_4(command_queue, kernel, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueTask_4(command_queue, kernel, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueTask(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueTask_3(command_queue, kernel, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueTask_3(command_queue, kernel, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueTask(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueTask_4(command_queue, kernel, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueTask(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueTask_3(command_queue, kernel, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueTask(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueTask_2(command_queue, kernel, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueTask(command_queue: cl_command_queue; kernel: cl_kernel; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueTask_1(command_queue, kernel, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueUnmapMemObject_1(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueUnmapMemObject';
    private static function z_EnqueueUnmapMemObject_2(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueUnmapMemObject';
    private static function z_EnqueueUnmapMemObject_3(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueUnmapMemObject';
    private static function z_EnqueueUnmapMemObject_4(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueUnmapMemObject';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueUnmapMemObject(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueUnmapMemObject_4(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueUnmapMemObject_4(command_queue, memobj, mapped_ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueUnmapMemObject(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueUnmapMemObject_3(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueUnmapMemObject_3(command_queue, memobj, mapped_ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueUnmapMemObject(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueUnmapMemObject_4(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueUnmapMemObject(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueUnmapMemObject_3(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueUnmapMemObject(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueUnmapMemObject_2(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueUnmapMemObject(command_queue: cl_command_queue; memobj: cl_mem; mapped_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueUnmapMemObject_1(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueWaitForEvents_1(command_queue: cl_command_queue; num_events: UInt32; event_list: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitForEvents';
    private static function z_EnqueueWaitForEvents_2(command_queue: cl_command_queue; num_events: UInt32; var event_list: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitForEvents';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitForEvents(command_queue: cl_command_queue; num_events: UInt32; event_list: array of cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_list<>nil) and (event_list.Length<>0) then
        z_EnqueueWaitForEvents_2(command_queue, num_events, event_list[0]) else
        z_EnqueueWaitForEvents_2(command_queue, num_events, Pcl_event(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitForEvents(command_queue: cl_command_queue; num_events: UInt32; var event_list: cl_event): ErrorCode :=
    z_EnqueueWaitForEvents_2(command_queue, num_events, event_list);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitForEvents(command_queue: cl_command_queue; num_events: UInt32; event_list: IntPtr): ErrorCode :=
    z_EnqueueWaitForEvents_1(command_queue, num_events, event_list);
    
    // added in cl1.0
    private static function z_EnqueueWriteBuffer_1(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBuffer';
    private static function z_EnqueueWriteBuffer_2(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBuffer';
    private static function z_EnqueueWriteBuffer_3(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBuffer';
    private static function z_EnqueueWriteBuffer_4(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBuffer';
    private static function z_EnqueueWriteBuffer_5(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBuffer';
    private static function z_EnqueueWriteBuffer_6(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBuffer';
    private static function z_EnqueueWriteBuffer_7(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBuffer';
    private static function z_EnqueueWriteBuffer_8(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: array of T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (ptr<>nil) and (ptr.Length<>0) then
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, ptr[0], num_events_in_wait_list, event_wait_list, &event) else
        EnqueueWriteBuffer(command_queue, buffer, blocking_write, offset, size, PT(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteBuffer_8(command_queue, buffer, blocking_write, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteBuffer_8(command_queue, buffer, blocking_write, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteBuffer_7(command_queue, buffer, blocking_write, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteBuffer_7(command_queue, buffer, blocking_write, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteBuffer_8(command_queue, buffer, blocking_write, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteBuffer_7(command_queue, buffer, blocking_write, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteBuffer_6(command_queue, buffer, blocking_write, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteBuffer_5(command_queue, buffer, blocking_write, offset, size, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteBuffer_4(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteBuffer_4(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteBuffer_3(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteBuffer_3(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueWriteBuffer_4(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueWriteBuffer_3(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueWriteBuffer_2(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBuffer(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; offset: UIntPtr; size: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueWriteBuffer_1(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.1
    private static function z_EnqueueWriteBufferRect_1(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBufferRect';
    private static function z_EnqueueWriteBufferRect_2(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBufferRect';
    private static function z_EnqueueWriteBufferRect_3(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBufferRect';
    private static function z_EnqueueWriteBufferRect_4(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBufferRect';
    private static function z_EnqueueWriteBufferRect_5(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBufferRect';
    private static function z_EnqueueWriteBufferRect_6(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBufferRect';
    private static function z_EnqueueWriteBufferRect_7(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBufferRect';
    private static function z_EnqueueWriteBufferRect_8(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteBufferRect';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteBufferRect_8(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteBufferRect_8(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteBufferRect_7(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteBufferRect_7(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteBufferRect_8(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteBufferRect_7(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteBufferRect_6(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect<T>(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteBufferRect_5(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteBufferRect_4(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteBufferRect_4(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteBufferRect_3(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteBufferRect_3(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueWriteBufferRect_4(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueWriteBufferRect_3(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueWriteBufferRect_2(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteBufferRect(command_queue: cl_command_queue; buffer: cl_mem; blocking_write: Bool; var buffer_origin: UIntPtr; var host_origin: UIntPtr; var region: UIntPtr; buffer_row_pitch: UIntPtr; buffer_slice_pitch: UIntPtr; host_row_pitch: UIntPtr; host_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueWriteBufferRect_1(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_EnqueueWriteImage_1(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteImage';
    private static function z_EnqueueWriteImage_2(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteImage';
    private static function z_EnqueueWriteImage_3(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteImage';
    private static function z_EnqueueWriteImage_4(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteImage';
    private static function z_EnqueueWriteImage_5(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteImage';
    private static function z_EnqueueWriteImage_6(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteImage';
    private static function z_EnqueueWriteImage_7(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteImage';
    private static function z_EnqueueWriteImage_8(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: Byte; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteImage';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteImage_8(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteImage_8(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteImage_7(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteImage_7(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteImage_8(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteImage_7(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteImage_6(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage<T>(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; var ptr: T; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueWriteImage_5(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, PByte(pointer(@ptr))^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteImage_4(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteImage_4(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteImage_3(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteImage_3(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueWriteImage_4(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueWriteImage_3(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueWriteImage_2(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteImage(command_queue: cl_command_queue; image: cl_mem; blocking_write: Bool; var origin: UIntPtr; var region: UIntPtr; input_row_pitch: UIntPtr; input_slice_pitch: UIntPtr; ptr: pointer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueWriteImage_1(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, &event);
    
    // added in cl1.0
    private static function z_Finish_1(command_queue: cl_command_queue): ErrorCode;
    external 'opencl' name 'clFinish';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function Finish(command_queue: cl_command_queue): ErrorCode :=
    z_Finish_1(command_queue);
    
    // added in cl1.0
    private static function z_Flush_1(command_queue: cl_command_queue): ErrorCode;
    external 'opencl' name 'clFlush';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function Flush(command_queue: cl_command_queue): ErrorCode :=
    z_Flush_1(command_queue);
    
    // added in cl1.0
    private static function z_GetCommandQueueInfo_1(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_2(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_3(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_4(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_5(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: CommandQueueProperties; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_6(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: CommandQueueProperties; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_7(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_device_id; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_8(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_device_id; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_9(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_10(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_11(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_command_queue; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    private static function z_GetCommandQueueInfo_12(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_command_queue; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandQueueInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_command_queue; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetCommandQueueInfo_12(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_command_queue; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetCommandQueueInfo_11(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetCommandQueueInfo_10(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetCommandQueueInfo_9(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_device_id; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetCommandQueueInfo_8(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: cl_device_id; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetCommandQueueInfo_7(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: CommandQueueProperties; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetCommandQueueInfo_6(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: CommandQueueProperties; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetCommandQueueInfo_5(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetCommandQueueInfo_4(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetCommandQueueInfo_3(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetCommandQueueInfo_2(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandQueueInfo(command_queue: cl_command_queue; param_name: CommandQueueInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetCommandQueueInfo_1(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetContextInfo_1(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetContextInfo';
    private static function z_GetContextInfo_2(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetContextInfo';
    private static function z_GetContextInfo_3(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetContextInfo';
    private static function z_GetContextInfo_4(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetContextInfo';
    private static function z_GetContextInfo_5(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: ContextProperties; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetContextInfo';
    private static function z_GetContextInfo_6(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: ContextProperties; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetContextInfo';
    private static function z_GetContextInfo_7(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: cl_device_id; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetContextInfo';
    private static function z_GetContextInfo_8(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: cl_device_id; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetContextInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextInfo(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: cl_device_id; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetContextInfo_8(context, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextInfo(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: cl_device_id; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetContextInfo_7(context, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextInfo(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: ContextProperties; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetContextInfo_6(context, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextInfo(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: ContextProperties; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetContextInfo_5(context, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextInfo(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetContextInfo_4(context, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextInfo(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetContextInfo_3(context, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextInfo(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetContextInfo_2(context, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetContextInfo(context: cl_context; param_name: ContextInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetContextInfo_1(context, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl2.1
    private static function z_GetDeviceAndHostTimer_1(device: cl_device_id; device_timestamp: IntPtr; host_timestamp: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceAndHostTimer';
    private static function z_GetDeviceAndHostTimer_2(device: cl_device_id; device_timestamp: IntPtr; var host_timestamp: UInt64): ErrorCode;
    external 'opencl' name 'clGetDeviceAndHostTimer';
    private static function z_GetDeviceAndHostTimer_3(device: cl_device_id; var device_timestamp: UInt64; host_timestamp: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceAndHostTimer';
    private static function z_GetDeviceAndHostTimer_4(device: cl_device_id; var device_timestamp: UInt64; var host_timestamp: UInt64): ErrorCode;
    external 'opencl' name 'clGetDeviceAndHostTimer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceAndHostTimer(device: cl_device_id; var device_timestamp: UInt64; var host_timestamp: UInt64): ErrorCode :=
    z_GetDeviceAndHostTimer_4(device, device_timestamp, host_timestamp);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceAndHostTimer(device: cl_device_id; var device_timestamp: UInt64; host_timestamp: IntPtr): ErrorCode :=
    z_GetDeviceAndHostTimer_3(device, device_timestamp, host_timestamp);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceAndHostTimer(device: cl_device_id; device_timestamp: IntPtr; var host_timestamp: UInt64): ErrorCode :=
    z_GetDeviceAndHostTimer_2(device, device_timestamp, host_timestamp);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceAndHostTimer(device: cl_device_id; device_timestamp: IntPtr; host_timestamp: IntPtr): ErrorCode :=
    z_GetDeviceAndHostTimer_1(device, device_timestamp, host_timestamp);
    
    // added in cl1.0
    private static function z_GetDeviceIDs_1(platform: cl_platform_id; device_type: DeviceType; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDs';
    private static function z_GetDeviceIDs_2(platform: cl_platform_id; device_type: DeviceType; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDs';
    private static function z_GetDeviceIDs_3(platform: cl_platform_id; device_type: DeviceType; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDs';
    private static function z_GetDeviceIDs_4(platform: cl_platform_id; device_type: DeviceType; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDs';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDs(platform: cl_platform_id; device_type: DeviceType; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDs_4(platform, device_type, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDs(platform: cl_platform_id; device_type: DeviceType; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDs_3(platform, device_type, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDs(platform: cl_platform_id; device_type: DeviceType; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDs_2(platform, device_type, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDs(platform: cl_platform_id; device_type: DeviceType; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDs_1(platform, device_type, num_entries, devices, num_devices);
    
    // added in cl1.0
    private static function z_GetDeviceInfo_1(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_2(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_3(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_4(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_5(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UInt64; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_6(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UInt64; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_7(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_8(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_9(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceType; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_10(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceType; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_11(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceSVMCapabilities; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_12(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceSVMCapabilities; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_13(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DevicePartitionProperty; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_14(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DevicePartitionProperty; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_15(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceMemCacheType; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_16(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceMemCacheType; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_17(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceLocalMemType; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_18(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceLocalMemType; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_19(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceFPConfig; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_20(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceFPConfig; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_21(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceExecCapabilities; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_22(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceExecCapabilities; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_23(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceAffinityDomain; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_24(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceAffinityDomain; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_25(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: CommandQueueProperties; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_26(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: CommandQueueProperties; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_27(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: cl_platform_id; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_28(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: cl_platform_id; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_29(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: cl_device_id; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_30(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: cl_device_id; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_31(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: Bool; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    private static function z_GetDeviceInfo_32(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: Bool; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: Bool; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_32(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: Bool; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_31(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: cl_device_id; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_30(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: cl_device_id; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_29(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: cl_platform_id; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_28(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: cl_platform_id; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_27(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: CommandQueueProperties; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_26(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: CommandQueueProperties; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_25(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceAffinityDomain; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_24(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceAffinityDomain; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_23(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceExecCapabilities; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_22(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceExecCapabilities; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_21(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceFPConfig; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_20(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceFPConfig; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_19(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceLocalMemType; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_18(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceLocalMemType; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_17(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceMemCacheType; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_16(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceMemCacheType; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_15(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DevicePartitionProperty; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_14(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DevicePartitionProperty; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_13(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceSVMCapabilities; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_12(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceSVMCapabilities; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_11(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceType; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_10(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: DeviceType; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_9(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_8(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_7(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UInt64; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_6(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UInt64; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_5(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_4(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_3(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceInfo_2(device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceInfo(device: cl_device_id; param_name: DeviceInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceInfo_1(device, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetEventInfo_1(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_2(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_3(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_4(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_5(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: CommandType; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_6(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: CommandType; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_7(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: CommandExecutionStatus; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_8(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: CommandExecutionStatus; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_9(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_10(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_11(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: cl_command_queue; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    private static function z_GetEventInfo_12(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: cl_command_queue; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetEventInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: cl_command_queue; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetEventInfo_12(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: cl_command_queue; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetEventInfo_11(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetEventInfo_10(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetEventInfo_9(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: CommandExecutionStatus; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetEventInfo_8(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: CommandExecutionStatus; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetEventInfo_7(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: CommandType; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetEventInfo_6(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: CommandType; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetEventInfo_5(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetEventInfo_4(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetEventInfo_3(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetEventInfo_2(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventInfo(&event: cl_event; param_name: EventInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetEventInfo_1(&event, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetEventProfilingInfo_1(&event: cl_event; param_name: ProfilingInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetEventProfilingInfo';
    private static function z_GetEventProfilingInfo_2(&event: cl_event; param_name: ProfilingInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetEventProfilingInfo';
    private static function z_GetEventProfilingInfo_3(&event: cl_event; param_name: ProfilingInfo; param_value_size: UIntPtr; var param_value: UInt64; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetEventProfilingInfo';
    private static function z_GetEventProfilingInfo_4(&event: cl_event; param_name: ProfilingInfo; param_value_size: UIntPtr; var param_value: UInt64; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetEventProfilingInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventProfilingInfo(&event: cl_event; param_name: ProfilingInfo; param_value_size: UIntPtr; var param_value: UInt64; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetEventProfilingInfo_4(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventProfilingInfo(&event: cl_event; param_name: ProfilingInfo; param_value_size: UIntPtr; var param_value: UInt64; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetEventProfilingInfo_3(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventProfilingInfo(&event: cl_event; param_name: ProfilingInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetEventProfilingInfo_2(&event, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetEventProfilingInfo(&event: cl_event; param_name: ProfilingInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetEventProfilingInfo_1(&event, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetExtensionFunctionAddress_1(func_name: IntPtr): IntPtr;
    external 'opencl' name 'clGetExtensionFunctionAddress';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetExtensionFunctionAddress(func_name: string): IntPtr;
    begin
      var func_name_str_ptr: IntPtr;
      try
        func_name_str_ptr := Marshal.StringToHGlobalAnsi(func_name);
        Result := z_GetExtensionFunctionAddress_1(func_name_str_ptr);
      finally
        Marshal.FreeHGlobal(func_name_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetExtensionFunctionAddress(func_name: IntPtr): IntPtr :=
    z_GetExtensionFunctionAddress_1(func_name);
    
    // added in cl1.2
    private static function z_GetExtensionFunctionAddressForPlatform_1(platform: cl_platform_id; func_name: IntPtr): IntPtr;
    external 'opencl' name 'clGetExtensionFunctionAddressForPlatform';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetExtensionFunctionAddressForPlatform(platform: cl_platform_id; func_name: string): IntPtr;
    begin
      var func_name_str_ptr: IntPtr;
      try
        func_name_str_ptr := Marshal.StringToHGlobalAnsi(func_name);
        Result := z_GetExtensionFunctionAddressForPlatform_1(platform, func_name_str_ptr);
      finally
        Marshal.FreeHGlobal(func_name_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetExtensionFunctionAddressForPlatform(platform: cl_platform_id; func_name: IntPtr): IntPtr :=
    z_GetExtensionFunctionAddressForPlatform_1(platform, func_name);
    
    // added in cl2.1
    private static function z_GetHostTimer_1(device: cl_device_id; host_timestamp: IntPtr): ErrorCode;
    external 'opencl' name 'clGetHostTimer';
    private static function z_GetHostTimer_2(device: cl_device_id; var host_timestamp: UInt64): ErrorCode;
    external 'opencl' name 'clGetHostTimer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetHostTimer(device: cl_device_id; var host_timestamp: UInt64): ErrorCode :=
    z_GetHostTimer_2(device, host_timestamp);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetHostTimer(device: cl_device_id; host_timestamp: IntPtr): ErrorCode :=
    z_GetHostTimer_1(device, host_timestamp);
    
    // added in cl1.0
    private static function z_GetImageInfo_1(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetImageInfo';
    private static function z_GetImageInfo_2(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetImageInfo';
    private static function z_GetImageInfo_3(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetImageInfo';
    private static function z_GetImageInfo_4(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetImageInfo';
    private static function z_GetImageInfo_5(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetImageInfo';
    private static function z_GetImageInfo_6(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetImageInfo';
    private static function z_GetImageInfo_7(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: cl_image_format; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetImageInfo';
    private static function z_GetImageInfo_8(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: cl_image_format; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetImageInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetImageInfo(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: cl_image_format; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetImageInfo_8(image, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetImageInfo(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: cl_image_format; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetImageInfo_7(image, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetImageInfo(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetImageInfo_6(image, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetImageInfo(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetImageInfo_5(image, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetImageInfo(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetImageInfo_4(image, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetImageInfo(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetImageInfo_3(image, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetImageInfo(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetImageInfo_2(image, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetImageInfo(image: cl_mem; param_name: ImageInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetImageInfo_1(image, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.2
    private static function z_GetKernelArgInfo_1(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelArgInfo';
    private static function z_GetKernelArgInfo_2(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelArgInfo';
    private static function z_GetKernelArgInfo_3(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgTypeQualifier; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelArgInfo';
    private static function z_GetKernelArgInfo_4(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgTypeQualifier; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelArgInfo';
    private static function z_GetKernelArgInfo_5(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgAddressQualifier; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelArgInfo';
    private static function z_GetKernelArgInfo_6(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgAddressQualifier; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelArgInfo';
    private static function z_GetKernelArgInfo_7(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgAccessQualifier; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelArgInfo';
    private static function z_GetKernelArgInfo_8(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgAccessQualifier; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelArgInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelArgInfo(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgAccessQualifier; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelArgInfo_8(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelArgInfo(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgAccessQualifier; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelArgInfo_7(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelArgInfo(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgAddressQualifier; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelArgInfo_6(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelArgInfo(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgAddressQualifier; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelArgInfo_5(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelArgInfo(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgTypeQualifier; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelArgInfo_4(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelArgInfo(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; var param_value: KernelArgTypeQualifier; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelArgInfo_3(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelArgInfo(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelArgInfo_2(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelArgInfo(kernel: cl_kernel; arg_index: UInt32; param_name: KernelArgInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelArgInfo_1(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetKernelInfo_1(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelInfo';
    private static function z_GetKernelInfo_2(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelInfo';
    private static function z_GetKernelInfo_3(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelInfo';
    private static function z_GetKernelInfo_4(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelInfo';
    private static function z_GetKernelInfo_5(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: cl_program; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelInfo';
    private static function z_GetKernelInfo_6(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: cl_program; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelInfo';
    private static function z_GetKernelInfo_7(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelInfo';
    private static function z_GetKernelInfo_8(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelInfo(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelInfo_8(kernel, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelInfo(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelInfo_7(kernel, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelInfo(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: cl_program; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelInfo_6(kernel, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelInfo(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: cl_program; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelInfo_5(kernel, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelInfo(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelInfo_4(kernel, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelInfo(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelInfo_3(kernel, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelInfo(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelInfo_2(kernel, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelInfo(kernel: cl_kernel; param_name: KernelInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelInfo_1(kernel, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl2.1
    private static function z_GetKernelSubGroupInfo_1(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfo';
    private static function z_GetKernelSubGroupInfo_2(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfo';
    private static function z_GetKernelSubGroupInfo_3(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfo';
    private static function z_GetKernelSubGroupInfo_4(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfo';
    private static function z_GetKernelSubGroupInfo_5(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; var input_value: UIntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfo';
    private static function z_GetKernelSubGroupInfo_6(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; var input_value: UIntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; var input_value: UIntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelSubGroupInfo_6(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; var input_value: UIntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelSubGroupInfo_5(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelSubGroupInfo_4(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelSubGroupInfo_3(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelSubGroupInfo_2(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelSubGroupInfo_1(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetKernelWorkGroupInfo_1(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelWorkGroupInfo';
    private static function z_GetKernelWorkGroupInfo_2(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelWorkGroupInfo';
    private static function z_GetKernelWorkGroupInfo_3(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelWorkGroupInfo';
    private static function z_GetKernelWorkGroupInfo_4(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelWorkGroupInfo';
    private static function z_GetKernelWorkGroupInfo_5(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; var param_value: UInt64; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelWorkGroupInfo';
    private static function z_GetKernelWorkGroupInfo_6(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; var param_value: UInt64; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelWorkGroupInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelWorkGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; var param_value: UInt64; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelWorkGroupInfo_6(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelWorkGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; var param_value: UInt64; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelWorkGroupInfo_5(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelWorkGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelWorkGroupInfo_4(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelWorkGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelWorkGroupInfo_3(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelWorkGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelWorkGroupInfo_2(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelWorkGroupInfo(kernel: cl_kernel; device: cl_device_id; param_name: KernelWorkGroupInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelWorkGroupInfo_1(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetMemObjectInfo_1(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; param_value: pointer; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_2(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; param_value: pointer; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_3(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_4(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_5(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_6(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_7(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: MemObjectType; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_8(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: MemObjectType; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_9(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: MemFlags; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_10(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: MemFlags; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_11(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_12(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_13(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: cl_mem; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_14(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: cl_mem; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_15(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_16(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_17(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: Bool; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    private static function z_GetMemObjectInfo_18(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: Bool; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemObjectInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: Bool; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_18(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: Bool; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_17(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_16(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_15(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: cl_mem; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_14(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: cl_mem; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_13(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_12(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_11(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: MemFlags; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_10(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: MemFlags; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_9(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: MemObjectType; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_8(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: MemObjectType; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_7(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_6(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_5(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_4(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_3(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; param_value: pointer; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemObjectInfo_2(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemObjectInfo(memobj: cl_mem; param_name: MemInfo; param_value_size: UIntPtr; param_value: pointer; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemObjectInfo_1(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl2.0
    private static function z_GetPipeInfo_1(pipe: cl_mem; param_name: PipeInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetPipeInfo';
    private static function z_GetPipeInfo_2(pipe: cl_mem; param_name: PipeInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetPipeInfo';
    private static function z_GetPipeInfo_3(pipe: cl_mem; param_name: PipeInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetPipeInfo';
    private static function z_GetPipeInfo_4(pipe: cl_mem; param_name: PipeInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetPipeInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPipeInfo(pipe: cl_mem; param_name: PipeInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetPipeInfo_4(pipe, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPipeInfo(pipe: cl_mem; param_name: PipeInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetPipeInfo_3(pipe, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPipeInfo(pipe: cl_mem; param_name: PipeInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetPipeInfo_2(pipe, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPipeInfo(pipe: cl_mem; param_name: PipeInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetPipeInfo_1(pipe, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetPlatformIDs_1(num_entries: UInt32; platforms: IntPtr; num_platforms: IntPtr): ErrorCode;
    external 'opencl' name 'clGetPlatformIDs';
    private static function z_GetPlatformIDs_2(num_entries: UInt32; platforms: IntPtr; var num_platforms: UInt32): ErrorCode;
    external 'opencl' name 'clGetPlatformIDs';
    private static function z_GetPlatformIDs_3(num_entries: UInt32; var platforms: cl_platform_id; num_platforms: IntPtr): ErrorCode;
    external 'opencl' name 'clGetPlatformIDs';
    private static function z_GetPlatformIDs_4(num_entries: UInt32; var platforms: cl_platform_id; var num_platforms: UInt32): ErrorCode;
    external 'opencl' name 'clGetPlatformIDs';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPlatformIDs(num_entries: UInt32; var platforms: cl_platform_id; var num_platforms: UInt32): ErrorCode :=
    z_GetPlatformIDs_4(num_entries, platforms, num_platforms);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPlatformIDs(num_entries: UInt32; var platforms: cl_platform_id; num_platforms: IntPtr): ErrorCode :=
    z_GetPlatformIDs_3(num_entries, platforms, num_platforms);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPlatformIDs(num_entries: UInt32; platforms: IntPtr; var num_platforms: UInt32): ErrorCode :=
    z_GetPlatformIDs_2(num_entries, platforms, num_platforms);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPlatformIDs(num_entries: UInt32; platforms: IntPtr; num_platforms: IntPtr): ErrorCode :=
    z_GetPlatformIDs_1(num_entries, platforms, num_platforms);
    
    // added in cl1.0
    private static function z_GetPlatformInfo_1(platform: cl_platform_id; param_name: PlatformInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetPlatformInfo';
    private static function z_GetPlatformInfo_2(platform: cl_platform_id; param_name: PlatformInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetPlatformInfo';
    private static function z_GetPlatformInfo_3(platform: cl_platform_id; param_name: PlatformInfo; param_value_size: UIntPtr; var param_value: UInt64; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetPlatformInfo';
    private static function z_GetPlatformInfo_4(platform: cl_platform_id; param_name: PlatformInfo; param_value_size: UIntPtr; var param_value: UInt64; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetPlatformInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPlatformInfo(platform: cl_platform_id; param_name: PlatformInfo; param_value_size: UIntPtr; var param_value: UInt64; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetPlatformInfo_4(platform, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPlatformInfo(platform: cl_platform_id; param_name: PlatformInfo; param_value_size: UIntPtr; var param_value: UInt64; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetPlatformInfo_3(platform, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPlatformInfo(platform: cl_platform_id; param_name: PlatformInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetPlatformInfo_2(platform, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetPlatformInfo(platform: cl_platform_id; param_name: PlatformInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetPlatformInfo_1(platform, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetProgramBuildInfo_1(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramBuildInfo';
    private static function z_GetProgramBuildInfo_2(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramBuildInfo';
    private static function z_GetProgramBuildInfo_3(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramBuildInfo';
    private static function z_GetProgramBuildInfo_4(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramBuildInfo';
    private static function z_GetProgramBuildInfo_5(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: ProgramBinaryType; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramBuildInfo';
    private static function z_GetProgramBuildInfo_6(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: ProgramBinaryType; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramBuildInfo';
    private static function z_GetProgramBuildInfo_7(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: BuildStatus; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramBuildInfo';
    private static function z_GetProgramBuildInfo_8(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: BuildStatus; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramBuildInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramBuildInfo(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: BuildStatus; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramBuildInfo_8(&program, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramBuildInfo(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: BuildStatus; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramBuildInfo_7(&program, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramBuildInfo(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: ProgramBinaryType; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramBuildInfo_6(&program, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramBuildInfo(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: ProgramBinaryType; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramBuildInfo_5(&program, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramBuildInfo(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramBuildInfo_4(&program, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramBuildInfo(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramBuildInfo_3(&program, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramBuildInfo(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramBuildInfo_2(&program, device, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramBuildInfo(&program: cl_program; device: cl_device_id; param_name: ProgramBuildInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramBuildInfo_1(&program, device, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetProgramInfo_1(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; param_value: pointer; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_2(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; param_value: pointer; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_3(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_4(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_5(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_6(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_7(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_8(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_9(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: cl_device_id; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_10(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: cl_device_id; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_11(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_12(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_13(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: Byte; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_14(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: Byte; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_15(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: Bool; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    private static function z_GetProgramInfo_16(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: Bool; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetProgramInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: Bool; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramInfo_16(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: Bool; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramInfo_15(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: Byte; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramInfo_14(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: Byte; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramInfo_13(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramInfo_12(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramInfo_11(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: cl_device_id; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramInfo_10(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: cl_device_id; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramInfo_9(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramInfo_8(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramInfo_7(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramInfo_6(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramInfo_5(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramInfo_4(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramInfo_3(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; param_value: pointer; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetProgramInfo_2(&program, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetProgramInfo(&program: cl_program; param_name: ProgramInfo; param_value_size: UIntPtr; param_value: pointer; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetProgramInfo_1(&program, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetSamplerInfo_1(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_2(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_3(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_4(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_5(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: FilterMode; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_6(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: FilterMode; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_7(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_8(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_9(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: Bool; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_10(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: Bool; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_11(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: AddressingMode; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    private static function z_GetSamplerInfo_12(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: AddressingMode; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetSamplerInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: AddressingMode; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetSamplerInfo_12(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: AddressingMode; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetSamplerInfo_11(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: Bool; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetSamplerInfo_10(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: Bool; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetSamplerInfo_9(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: cl_context; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetSamplerInfo_8(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: cl_context; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetSamplerInfo_7(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: FilterMode; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetSamplerInfo_6(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: FilterMode; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetSamplerInfo_5(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: UInt32; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetSamplerInfo_4(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; var param_value: UInt32; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetSamplerInfo_3(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetSamplerInfo_2(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSamplerInfo(sampler: cl_sampler; param_name: SamplerInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetSamplerInfo_1(sampler, param_name, param_value_size, param_value, param_value_size_ret);
    
    // added in cl1.0
    private static function z_GetSupportedImageFormats_1(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; image_formats: IntPtr; num_image_formats: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSupportedImageFormats';
    private static function z_GetSupportedImageFormats_2(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; image_formats: IntPtr; var num_image_formats: UInt32): ErrorCode;
    external 'opencl' name 'clGetSupportedImageFormats';
    private static function z_GetSupportedImageFormats_3(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; var image_formats: cl_image_format; num_image_formats: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSupportedImageFormats';
    private static function z_GetSupportedImageFormats_4(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; var image_formats: cl_image_format; var num_image_formats: UInt32): ErrorCode;
    external 'opencl' name 'clGetSupportedImageFormats';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedImageFormats(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; var image_formats: cl_image_format; var num_image_formats: UInt32): ErrorCode :=
    z_GetSupportedImageFormats_4(context, flags, image_type, num_entries, image_formats, num_image_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedImageFormats(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; var image_formats: cl_image_format; num_image_formats: IntPtr): ErrorCode :=
    z_GetSupportedImageFormats_3(context, flags, image_type, num_entries, image_formats, num_image_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedImageFormats(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; image_formats: IntPtr; var num_image_formats: UInt32): ErrorCode :=
    z_GetSupportedImageFormats_2(context, flags, image_type, num_entries, image_formats, num_image_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedImageFormats(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; image_formats: IntPtr; num_image_formats: IntPtr): ErrorCode :=
    z_GetSupportedImageFormats_1(context, flags, image_type, num_entries, image_formats, num_image_formats);
    
    // added in cl1.2
    private static function z_LinkProgram_1(context: cl_context; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_programs: UInt32; input_programs: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clLinkProgram';
    private static function z_LinkProgram_2(context: cl_context; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_programs: UInt32; var input_programs: cl_program; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clLinkProgram';
    private static function z_LinkProgram_3(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_programs: UInt32; input_programs: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clLinkProgram';
    private static function z_LinkProgram_4(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_programs: UInt32; var input_programs: cl_program; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clLinkProgram';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; device_list: array of cl_device_id; options: string; num_input_programs: UInt32; input_programs: array of cl_program; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    type Pcl_device_id=^cl_device_id;
    type Pcl_program=^cl_program;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := if (input_programs<>nil) and (input_programs.Length<>0) then
          if (device_list<>nil) and (device_list.Length<>0) then
            z_LinkProgram_4(context, num_devices, device_list[0], options_str_ptr, num_input_programs, input_programs[0], pfn_notify, user_data, errcode_ret) else
            z_LinkProgram_4(context, num_devices, Pcl_device_id(nil)^, options_str_ptr, num_input_programs, input_programs[0], pfn_notify, user_data, errcode_ret) else
          if (device_list<>nil) and (device_list.Length<>0) then
            z_LinkProgram_4(context, num_devices, device_list[0], options_str_ptr, num_input_programs, Pcl_program(nil)^, pfn_notify, user_data, errcode_ret) else
            z_LinkProgram_4(context, num_devices, Pcl_device_id(nil)^, options_str_ptr, num_input_programs, Pcl_program(nil)^, pfn_notify, user_data, errcode_ret);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; device_list: array of cl_device_id; options: IntPtr; num_input_programs: UInt32; input_programs: array of cl_program; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    type Pcl_device_id=^cl_device_id;
    type Pcl_program=^cl_program;
    begin
      Result := if (input_programs<>nil) and (input_programs.Length<>0) then
        if (device_list<>nil) and (device_list.Length<>0) then
          z_LinkProgram_4(context, num_devices, device_list[0], options, num_input_programs, input_programs[0], pfn_notify, user_data, errcode_ret) else
          z_LinkProgram_4(context, num_devices, Pcl_device_id(nil)^, options, num_input_programs, input_programs[0], pfn_notify, user_data, errcode_ret) else
        if (device_list<>nil) and (device_list.Length<>0) then
          z_LinkProgram_4(context, num_devices, device_list[0], options, num_input_programs, Pcl_program(nil)^, pfn_notify, user_data, errcode_ret) else
          z_LinkProgram_4(context, num_devices, Pcl_device_id(nil)^, options, num_input_programs, Pcl_program(nil)^, pfn_notify, user_data, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; options: string; num_input_programs: UInt32; var input_programs: cl_program; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_LinkProgram_4(context, num_devices, device_list, options_str_ptr, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; options: string; num_input_programs: UInt32; input_programs: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_LinkProgram_3(context, num_devices, device_list, options_str_ptr, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_programs: UInt32; var input_programs: cl_program; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_LinkProgram_4(context, num_devices, device_list, options, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; var device_list: cl_device_id; options: IntPtr; num_input_programs: UInt32; input_programs: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_LinkProgram_3(context, num_devices, device_list, options, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; device_list: IntPtr; options: string; num_input_programs: UInt32; var input_programs: cl_program; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_LinkProgram_2(context, num_devices, device_list, options_str_ptr, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; device_list: IntPtr; options: string; num_input_programs: UInt32; input_programs: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program;
    begin
      var options_str_ptr: IntPtr;
      try
        options_str_ptr := Marshal.StringToHGlobalAnsi(options);
        Result := z_LinkProgram_1(context, num_devices, device_list, options_str_ptr, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
      finally
        Marshal.FreeHGlobal(options_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_programs: UInt32; var input_programs: cl_program; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_LinkProgram_2(context, num_devices, device_list, options, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function LinkProgram(context: cl_context; num_devices: UInt32; device_list: IntPtr; options: IntPtr; num_input_programs: UInt32; input_programs: IntPtr; pfn_notify: ProgramCallback; user_data: IntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_LinkProgram_1(context, num_devices, device_list, options, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
    
    // added in cl1.0
    private static function z_ReleaseCommandQueue_1(command_queue: cl_command_queue): ErrorCode;
    external 'opencl' name 'clReleaseCommandQueue';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseCommandQueue(command_queue: cl_command_queue): ErrorCode :=
    z_ReleaseCommandQueue_1(command_queue);
    
    // added in cl1.0
    private static function z_ReleaseContext_1(context: cl_context): ErrorCode;
    external 'opencl' name 'clReleaseContext';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseContext(context: cl_context): ErrorCode :=
    z_ReleaseContext_1(context);
    
    // added in cl1.2
    private static function z_ReleaseDevice_1(device: cl_device_id): ErrorCode;
    external 'opencl' name 'clReleaseDevice';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseDevice(device: cl_device_id): ErrorCode :=
    z_ReleaseDevice_1(device);
    
    // added in cl1.0
    private static function z_ReleaseEvent_1(&event: cl_event): ErrorCode;
    external 'opencl' name 'clReleaseEvent';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseEvent(&event: cl_event): ErrorCode :=
    z_ReleaseEvent_1(&event);
    
    // added in cl1.0
    private static function z_ReleaseKernel_1(kernel: cl_kernel): ErrorCode;
    external 'opencl' name 'clReleaseKernel';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseKernel(kernel: cl_kernel): ErrorCode :=
    z_ReleaseKernel_1(kernel);
    
    // added in cl1.0
    private static function z_ReleaseMemObject_1(memobj: cl_mem): ErrorCode;
    external 'opencl' name 'clReleaseMemObject';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseMemObject(memobj: cl_mem): ErrorCode :=
    z_ReleaseMemObject_1(memobj);
    
    // added in cl1.0
    private static function z_ReleaseProgram_1(&program: cl_program): ErrorCode;
    external 'opencl' name 'clReleaseProgram';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseProgram(&program: cl_program): ErrorCode :=
    z_ReleaseProgram_1(&program);
    
    // added in cl1.0
    private static function z_ReleaseSampler_1(sampler: cl_sampler): ErrorCode;
    external 'opencl' name 'clReleaseSampler';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseSampler(sampler: cl_sampler): ErrorCode :=
    z_ReleaseSampler_1(sampler);
    
    // added in cl1.0
    private static function z_RetainCommandQueue_1(command_queue: cl_command_queue): ErrorCode;
    external 'opencl' name 'clRetainCommandQueue';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainCommandQueue(command_queue: cl_command_queue): ErrorCode :=
    z_RetainCommandQueue_1(command_queue);
    
    // added in cl1.0
    private static function z_RetainContext_1(context: cl_context): ErrorCode;
    external 'opencl' name 'clRetainContext';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainContext(context: cl_context): ErrorCode :=
    z_RetainContext_1(context);
    
    // added in cl1.2
    private static function z_RetainDevice_1(device: cl_device_id): ErrorCode;
    external 'opencl' name 'clRetainDevice';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainDevice(device: cl_device_id): ErrorCode :=
    z_RetainDevice_1(device);
    
    // added in cl1.0
    private static function z_RetainEvent_1(&event: cl_event): ErrorCode;
    external 'opencl' name 'clRetainEvent';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainEvent(&event: cl_event): ErrorCode :=
    z_RetainEvent_1(&event);
    
    // added in cl1.0
    private static function z_RetainKernel_1(kernel: cl_kernel): ErrorCode;
    external 'opencl' name 'clRetainKernel';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainKernel(kernel: cl_kernel): ErrorCode :=
    z_RetainKernel_1(kernel);
    
    // added in cl1.0
    private static function z_RetainMemObject_1(memobj: cl_mem): ErrorCode;
    external 'opencl' name 'clRetainMemObject';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainMemObject(memobj: cl_mem): ErrorCode :=
    z_RetainMemObject_1(memobj);
    
    // added in cl1.0
    private static function z_RetainProgram_1(&program: cl_program): ErrorCode;
    external 'opencl' name 'clRetainProgram';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainProgram(&program: cl_program): ErrorCode :=
    z_RetainProgram_1(&program);
    
    // added in cl1.0
    private static function z_RetainSampler_1(sampler: cl_sampler): ErrorCode;
    external 'opencl' name 'clRetainSampler';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainSampler(sampler: cl_sampler): ErrorCode :=
    z_RetainSampler_1(sampler);
    
    // added in cl1.0
    private static function z_SetCommandQueueProperty_1(command_queue: cl_command_queue; properties: CommandQueueProperties; enable: Bool; old_properties: IntPtr): ErrorCode;
    external 'opencl' name 'clSetCommandQueueProperty';
    private static function z_SetCommandQueueProperty_2(command_queue: cl_command_queue; properties: CommandQueueProperties; enable: Bool; var old_properties: CommandQueueProperties): ErrorCode;
    external 'opencl' name 'clSetCommandQueueProperty';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetCommandQueueProperty(command_queue: cl_command_queue; properties: CommandQueueProperties; enable: Bool; old_properties: array of CommandQueueProperties): ErrorCode;
    type PCommandQueueProperties=^CommandQueueProperties;
    begin
      Result := if (old_properties<>nil) and (old_properties.Length<>0) then
        z_SetCommandQueueProperty_2(command_queue, properties, enable, old_properties[0]) else
        z_SetCommandQueueProperty_2(command_queue, properties, enable, PCommandQueueProperties(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetCommandQueueProperty(command_queue: cl_command_queue; properties: CommandQueueProperties; enable: Bool; var old_properties: CommandQueueProperties): ErrorCode :=
    z_SetCommandQueueProperty_2(command_queue, properties, enable, old_properties);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetCommandQueueProperty(command_queue: cl_command_queue; properties: CommandQueueProperties; enable: Bool; old_properties: IntPtr): ErrorCode :=
    z_SetCommandQueueProperty_1(command_queue, properties, enable, old_properties);
    
    // added in cl3.0
    private static function z_SetContextDestructorCallback_1(context: cl_context; pfn_notify: ContextDestructorCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clSetContextDestructorCallback';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetContextDestructorCallback(context: cl_context; pfn_notify: ContextDestructorCallback; user_data: IntPtr): ErrorCode :=
    z_SetContextDestructorCallback_1(context, pfn_notify, user_data);
    
    // added in cl2.1
    private static function z_SetDefaultDeviceCommandQueue_1(context: cl_context; device: cl_device_id; command_queue: cl_command_queue): ErrorCode;
    external 'opencl' name 'clSetDefaultDeviceCommandQueue';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetDefaultDeviceCommandQueue(context: cl_context; device: cl_device_id; command_queue: cl_command_queue): ErrorCode :=
    z_SetDefaultDeviceCommandQueue_1(context, device, command_queue);
    
    // added in cl1.1
    private static function z_SetEventCallback_1(&event: cl_event; command_exec_callback_type: CommandExecutionStatus; pfn_notify: EventCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clSetEventCallback';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetEventCallback(&event: cl_event; command_exec_callback_type: CommandExecutionStatus; pfn_notify: EventCallback; user_data: IntPtr): ErrorCode :=
    z_SetEventCallback_1(&event, command_exec_callback_type, pfn_notify, user_data);
    
    // added in cl1.0
    private static function z_SetKernelArg_1(kernel: cl_kernel; arg_index: UInt32; arg_size: UIntPtr; arg_value: pointer): ErrorCode;
    external 'opencl' name 'clSetKernelArg';
    private static function z_SetKernelArg_2(kernel: cl_kernel; arg_index: UInt32; arg_size: UIntPtr; var arg_value: Byte): ErrorCode;
    external 'opencl' name 'clSetKernelArg';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelArg<T>(kernel: cl_kernel; arg_index: UInt32; arg_size: UIntPtr; var arg_value: T): ErrorCode; where T: record;
    begin
      Result := z_SetKernelArg_2(kernel, arg_index, arg_size, PByte(pointer(@arg_value))^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelArg(kernel: cl_kernel; arg_index: UInt32; arg_size: UIntPtr; arg_value: pointer): ErrorCode :=
    z_SetKernelArg_1(kernel, arg_index, arg_size, arg_value);
    
    // added in cl2.0
    private static function z_SetKernelArgSVMPointer_1(kernel: cl_kernel; arg_index: UInt32; arg_value: IntPtr): ErrorCode;
    external 'opencl' name 'clSetKernelArgSVMPointer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelArgSVMPointer(kernel: cl_kernel; arg_index: UInt32; arg_value: IntPtr): ErrorCode :=
    z_SetKernelArgSVMPointer_1(kernel, arg_index, arg_value);
    
    // added in cl2.0
    private static function z_SetKernelExecInfo_1(kernel: cl_kernel; param_name: KernelExecInfo; param_value_size: UIntPtr; param_value: pointer): ErrorCode;
    external 'opencl' name 'clSetKernelExecInfo';
    private static function z_SetKernelExecInfo_2(kernel: cl_kernel; param_name: KernelExecInfo; param_value_size: UIntPtr; var param_value: IntPtr): ErrorCode;
    external 'opencl' name 'clSetKernelExecInfo';
    private static function z_SetKernelExecInfo_3(kernel: cl_kernel; param_name: KernelExecInfo; param_value_size: UIntPtr; var param_value: Bool): ErrorCode;
    external 'opencl' name 'clSetKernelExecInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelExecInfo(kernel: cl_kernel; param_name: KernelExecInfo; param_value_size: UIntPtr; var param_value: Bool): ErrorCode :=
    z_SetKernelExecInfo_3(kernel, param_name, param_value_size, param_value);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelExecInfo(kernel: cl_kernel; param_name: KernelExecInfo; param_value_size: UIntPtr; var param_value: IntPtr): ErrorCode :=
    z_SetKernelExecInfo_2(kernel, param_name, param_value_size, param_value);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelExecInfo(kernel: cl_kernel; param_name: KernelExecInfo; param_value_size: UIntPtr; param_value: pointer): ErrorCode :=
    z_SetKernelExecInfo_1(kernel, param_name, param_value_size, param_value);
    
    // added in cl1.1
    private static function z_SetMemObjectDestructorCallback_1(memobj: cl_mem; pfn_notify: MemObjectDestructorCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clSetMemObjectDestructorCallback';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetMemObjectDestructorCallback(memobj: cl_mem; pfn_notify: MemObjectDestructorCallback; user_data: IntPtr): ErrorCode :=
    z_SetMemObjectDestructorCallback_1(memobj, pfn_notify, user_data);
    
    // added in cl2.2
    private static function z_SetProgramReleaseCallback_1(&program: cl_program; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clSetProgramReleaseCallback';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetProgramReleaseCallback(&program: cl_program; pfn_notify: ProgramCallback; user_data: IntPtr): ErrorCode :=
    z_SetProgramReleaseCallback_1(&program, pfn_notify, user_data);
    
    // added in cl2.2
    private static function z_SetProgramSpecializationConstant_1(&program: cl_program; spec_id: UInt32; spec_size: UIntPtr; spec_value: pointer): ErrorCode;
    external 'opencl' name 'clSetProgramSpecializationConstant';
    private static function z_SetProgramSpecializationConstant_2(&program: cl_program; spec_id: UInt32; spec_size: UIntPtr; var spec_value: Byte): ErrorCode;
    external 'opencl' name 'clSetProgramSpecializationConstant';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetProgramSpecializationConstant<T>(&program: cl_program; spec_id: UInt32; spec_size: UIntPtr; spec_value: array of T): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (spec_value<>nil) and (spec_value.Length<>0) then
        SetProgramSpecializationConstant(&program, spec_id, spec_size, spec_value[0]) else
        SetProgramSpecializationConstant(&program, spec_id, spec_size, PT(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetProgramSpecializationConstant<T>(&program: cl_program; spec_id: UInt32; spec_size: UIntPtr; var spec_value: T): ErrorCode; where T: record;
    begin
      Result := z_SetProgramSpecializationConstant_2(&program, spec_id, spec_size, PByte(pointer(@spec_value))^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetProgramSpecializationConstant(&program: cl_program; spec_id: UInt32; spec_size: UIntPtr; spec_value: pointer): ErrorCode :=
    z_SetProgramSpecializationConstant_1(&program, spec_id, spec_size, spec_value);
    
    // added in cl1.1
    private static function z_SetUserEventStatus_1(&event: cl_event; execution_status: CommandExecutionStatus): ErrorCode;
    external 'opencl' name 'clSetUserEventStatus';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetUserEventStatus(&event: cl_event; execution_status: CommandExecutionStatus): ErrorCode :=
    z_SetUserEventStatus_1(&event, execution_status);
    
    // added in cl2.0
    private static function z_SVMAlloc_1(context: cl_context; flags: SvmMemFlags; size: UIntPtr; alignment: UInt32): IntPtr;
    external 'opencl' name 'clSVMAlloc';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SVMAlloc(context: cl_context; flags: SvmMemFlags; size: UIntPtr; alignment: UInt32): IntPtr :=
    z_SVMAlloc_1(context, flags, size, alignment);
    
    // added in cl2.0
    private static procedure z_SVMFree_1(context: cl_context; svm_pointer: IntPtr);
    external 'opencl' name 'clSVMFree';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure SVMFree(context: cl_context; svm_pointer: IntPtr) :=
    z_SVMFree_1(context, svm_pointer);
    
    // added in cl1.0
    private static function z_UnloadCompiler_1: ErrorCode;
    external 'opencl' name 'clUnloadCompiler';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UnloadCompiler: ErrorCode :=
    z_UnloadCompiler_1();
    
    // added in cl1.2
    private static function z_UnloadPlatformCompiler_1(platform: cl_platform_id): ErrorCode;
    external 'opencl' name 'clUnloadPlatformCompiler';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function UnloadPlatformCompiler(platform: cl_platform_id): ErrorCode :=
    z_UnloadPlatformCompiler_1(platform);
    
    // added in cl1.0
    private static function z_WaitForEvents_1(num_events: UInt32; event_list: IntPtr): ErrorCode;
    external 'opencl' name 'clWaitForEvents';
    private static function z_WaitForEvents_2(num_events: UInt32; var event_list: cl_event): ErrorCode;
    external 'opencl' name 'clWaitForEvents';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForEvents(num_events: UInt32; event_list: array of cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_list<>nil) and (event_list.Length<>0) then
        z_WaitForEvents_2(num_events, event_list[0]) else
        z_WaitForEvents_2(num_events, Pcl_event(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForEvents(num_events: UInt32; var event_list: cl_event): ErrorCode :=
    z_WaitForEvents_2(num_events, event_list);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function WaitForEvents(num_events: UInt32; event_list: IntPtr): ErrorCode :=
    z_WaitForEvents_1(num_events, event_list);
    
  end;
  
  {$region Extensions}
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clD3d10SharingKHR = static class
    public const _ExtStr = 'cl_khr_d3d10_sharing';
    
    private static function z_GetDeviceIDsFromD3D10KHR_1(platform: cl_platform_id; d3d_device_source: D3d10DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d10DeviceSetKhr; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromD3D10KHR';
    private static function z_GetDeviceIDsFromD3D10KHR_2(platform: cl_platform_id; d3d_device_source: D3d10DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d10DeviceSetKhr; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromD3D10KHR';
    private static function z_GetDeviceIDsFromD3D10KHR_3(platform: cl_platform_id; d3d_device_source: D3d10DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d10DeviceSetKhr; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromD3D10KHR';
    private static function z_GetDeviceIDsFromD3D10KHR_4(platform: cl_platform_id; d3d_device_source: D3d10DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d10DeviceSetKhr; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromD3D10KHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromD3D10KHR(platform: cl_platform_id; d3d_device_source: D3d10DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d10DeviceSetKhr; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromD3D10KHR_4(platform, d3d_device_source, d3d_object, d3d_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromD3D10KHR(platform: cl_platform_id; d3d_device_source: D3d10DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d10DeviceSetKhr; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromD3D10KHR_3(platform, d3d_device_source, d3d_object, d3d_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromD3D10KHR(platform: cl_platform_id; d3d_device_source: D3d10DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d10DeviceSetKhr; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromD3D10KHR_2(platform, d3d_device_source, d3d_object, d3d_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromD3D10KHR(platform: cl_platform_id; d3d_device_source: D3d10DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d10DeviceSetKhr; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromD3D10KHR_1(platform, d3d_device_source, d3d_object, d3d_device_set, num_entries, devices, num_devices);
    
    private static function z_CreateFromD3D10BufferKHR_1(context: cl_context; flags: MemFlags; resource: pointer; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D10BufferKHR';
    private static function z_CreateFromD3D10BufferKHR_2(context: cl_context; flags: MemFlags; var resource: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D10BufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10BufferKHR(context: cl_context; flags: MemFlags; resource: array of IntPtr; var errcode_ret: ErrorCode): cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (resource<>nil) and (resource.Length<>0) then
        z_CreateFromD3D10BufferKHR_2(context, flags, resource[0], errcode_ret) else
        z_CreateFromD3D10BufferKHR_2(context, flags, PIntPtr(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10BufferKHR(context: cl_context; flags: MemFlags; var resource: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D10BufferKHR_2(context, flags, resource, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10BufferKHR(context: cl_context; flags: MemFlags; resource: pointer; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D10BufferKHR_1(context, flags, resource, errcode_ret);
    
    private static function z_CreateFromD3D10Texture2DKHR_1(context: cl_context; flags: MemFlags; resource: pointer; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D10Texture2DKHR';
    private static function z_CreateFromD3D10Texture2DKHR_2(context: cl_context; flags: MemFlags; var resource: IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D10Texture2DKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10Texture2DKHR(context: cl_context; flags: MemFlags; resource: array of IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (resource<>nil) and (resource.Length<>0) then
        z_CreateFromD3D10Texture2DKHR_2(context, flags, resource[0], subresource, errcode_ret) else
        z_CreateFromD3D10Texture2DKHR_2(context, flags, PIntPtr(nil)^, subresource, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10Texture2DKHR(context: cl_context; flags: MemFlags; var resource: IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D10Texture2DKHR_2(context, flags, resource, subresource, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10Texture2DKHR(context: cl_context; flags: MemFlags; resource: pointer; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D10Texture2DKHR_1(context, flags, resource, subresource, errcode_ret);
    
    private static function z_CreateFromD3D10Texture3DKHR_1(context: cl_context; flags: MemFlags; resource: pointer; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D10Texture3DKHR';
    private static function z_CreateFromD3D10Texture3DKHR_2(context: cl_context; flags: MemFlags; var resource: IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D10Texture3DKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10Texture3DKHR(context: cl_context; flags: MemFlags; resource: array of IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (resource<>nil) and (resource.Length<>0) then
        z_CreateFromD3D10Texture3DKHR_2(context, flags, resource[0], subresource, errcode_ret) else
        z_CreateFromD3D10Texture3DKHR_2(context, flags, PIntPtr(nil)^, subresource, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10Texture3DKHR(context: cl_context; flags: MemFlags; var resource: IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D10Texture3DKHR_2(context, flags, resource, subresource, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D10Texture3DKHR(context: cl_context; flags: MemFlags; resource: pointer; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D10Texture3DKHR_1(context, flags, resource, subresource, errcode_ret);
    
    private static function z_EnqueueAcquireD3D10ObjectsKHR_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D10ObjectsKHR';
    private static function z_EnqueueAcquireD3D10ObjectsKHR_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D10ObjectsKHR';
    private static function z_EnqueueAcquireD3D10ObjectsKHR_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D10ObjectsKHR';
    private static function z_EnqueueAcquireD3D10ObjectsKHR_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D10ObjectsKHR';
    private static function z_EnqueueAcquireD3D10ObjectsKHR_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D10ObjectsKHR';
    private static function z_EnqueueAcquireD3D10ObjectsKHR_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D10ObjectsKHR';
    private static function z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D10ObjectsKHR';
    private static function z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D10ObjectsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireD3D10ObjectsKHR_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireD3D10ObjectsKHR_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireD3D10ObjectsKHR_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireD3D10ObjectsKHR_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireD3D10ObjectsKHR_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireD3D10ObjectsKHR_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireD3D10ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireD3D10ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireD3D10ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireD3D10ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireD3D10ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireD3D10ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireD3D10ObjectsKHR_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireD3D10ObjectsKHR_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseD3D10ObjectsKHR_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D10ObjectsKHR';
    private static function z_EnqueueReleaseD3D10ObjectsKHR_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D10ObjectsKHR';
    private static function z_EnqueueReleaseD3D10ObjectsKHR_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D10ObjectsKHR';
    private static function z_EnqueueReleaseD3D10ObjectsKHR_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D10ObjectsKHR';
    private static function z_EnqueueReleaseD3D10ObjectsKHR_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D10ObjectsKHR';
    private static function z_EnqueueReleaseD3D10ObjectsKHR_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D10ObjectsKHR';
    private static function z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D10ObjectsKHR';
    private static function z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D10ObjectsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseD3D10ObjectsKHR_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseD3D10ObjectsKHR_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseD3D10ObjectsKHR_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseD3D10ObjectsKHR_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseD3D10ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseD3D10ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseD3D10ObjectsKHR_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseD3D10ObjectsKHR_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseD3D10ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseD3D10ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseD3D10ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseD3D10ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseD3D10ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseD3D10ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseD3D10ObjectsKHR_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D10ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseD3D10ObjectsKHR_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clD3d11SharingKHR = static class
    public const _ExtStr = 'cl_khr_d3d11_sharing';
    
    private static function z_GetDeviceIDsFromD3D11KHR_1(platform: cl_platform_id; d3d_device_source: D3d11DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d11DeviceSetKhr; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromD3D11KHR';
    private static function z_GetDeviceIDsFromD3D11KHR_2(platform: cl_platform_id; d3d_device_source: D3d11DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d11DeviceSetKhr; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromD3D11KHR';
    private static function z_GetDeviceIDsFromD3D11KHR_3(platform: cl_platform_id; d3d_device_source: D3d11DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d11DeviceSetKhr; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromD3D11KHR';
    private static function z_GetDeviceIDsFromD3D11KHR_4(platform: cl_platform_id; d3d_device_source: D3d11DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d11DeviceSetKhr; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromD3D11KHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromD3D11KHR(platform: cl_platform_id; d3d_device_source: D3d11DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d11DeviceSetKhr; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromD3D11KHR_4(platform, d3d_device_source, d3d_object, d3d_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromD3D11KHR(platform: cl_platform_id; d3d_device_source: D3d11DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d11DeviceSetKhr; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromD3D11KHR_3(platform, d3d_device_source, d3d_object, d3d_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromD3D11KHR(platform: cl_platform_id; d3d_device_source: D3d11DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d11DeviceSetKhr; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromD3D11KHR_2(platform, d3d_device_source, d3d_object, d3d_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromD3D11KHR(platform: cl_platform_id; d3d_device_source: D3d11DeviceSourceKhr; d3d_object: IntPtr; d3d_device_set: D3d11DeviceSetKhr; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromD3D11KHR_1(platform, d3d_device_source, d3d_object, d3d_device_set, num_entries, devices, num_devices);
    
    private static function z_CreateFromD3D11BufferKHR_1(context: cl_context; flags: MemFlags; resource: pointer; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D11BufferKHR';
    private static function z_CreateFromD3D11BufferKHR_2(context: cl_context; flags: MemFlags; var resource: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D11BufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11BufferKHR(context: cl_context; flags: MemFlags; resource: array of IntPtr; var errcode_ret: ErrorCode): cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (resource<>nil) and (resource.Length<>0) then
        z_CreateFromD3D11BufferKHR_2(context, flags, resource[0], errcode_ret) else
        z_CreateFromD3D11BufferKHR_2(context, flags, PIntPtr(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11BufferKHR(context: cl_context; flags: MemFlags; var resource: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D11BufferKHR_2(context, flags, resource, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11BufferKHR(context: cl_context; flags: MemFlags; resource: pointer; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D11BufferKHR_1(context, flags, resource, errcode_ret);
    
    private static function z_CreateFromD3D11Texture2DKHR_1(context: cl_context; flags: MemFlags; resource: pointer; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D11Texture2DKHR';
    private static function z_CreateFromD3D11Texture2DKHR_2(context: cl_context; flags: MemFlags; var resource: IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D11Texture2DKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11Texture2DKHR(context: cl_context; flags: MemFlags; resource: array of IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (resource<>nil) and (resource.Length<>0) then
        z_CreateFromD3D11Texture2DKHR_2(context, flags, resource[0], subresource, errcode_ret) else
        z_CreateFromD3D11Texture2DKHR_2(context, flags, PIntPtr(nil)^, subresource, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11Texture2DKHR(context: cl_context; flags: MemFlags; var resource: IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D11Texture2DKHR_2(context, flags, resource, subresource, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11Texture2DKHR(context: cl_context; flags: MemFlags; resource: pointer; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D11Texture2DKHR_1(context, flags, resource, subresource, errcode_ret);
    
    private static function z_CreateFromD3D11Texture3DKHR_1(context: cl_context; flags: MemFlags; resource: pointer; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D11Texture3DKHR';
    private static function z_CreateFromD3D11Texture3DKHR_2(context: cl_context; flags: MemFlags; var resource: IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromD3D11Texture3DKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11Texture3DKHR(context: cl_context; flags: MemFlags; resource: array of IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (resource<>nil) and (resource.Length<>0) then
        z_CreateFromD3D11Texture3DKHR_2(context, flags, resource[0], subresource, errcode_ret) else
        z_CreateFromD3D11Texture3DKHR_2(context, flags, PIntPtr(nil)^, subresource, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11Texture3DKHR(context: cl_context; flags: MemFlags; var resource: IntPtr; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D11Texture3DKHR_2(context, flags, resource, subresource, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromD3D11Texture3DKHR(context: cl_context; flags: MemFlags; resource: pointer; subresource: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromD3D11Texture3DKHR_1(context, flags, resource, subresource, errcode_ret);
    
    private static function z_EnqueueAcquireD3D11ObjectsKHR_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D11ObjectsKHR';
    private static function z_EnqueueAcquireD3D11ObjectsKHR_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D11ObjectsKHR';
    private static function z_EnqueueAcquireD3D11ObjectsKHR_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D11ObjectsKHR';
    private static function z_EnqueueAcquireD3D11ObjectsKHR_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D11ObjectsKHR';
    private static function z_EnqueueAcquireD3D11ObjectsKHR_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D11ObjectsKHR';
    private static function z_EnqueueAcquireD3D11ObjectsKHR_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D11ObjectsKHR';
    private static function z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D11ObjectsKHR';
    private static function z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireD3D11ObjectsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireD3D11ObjectsKHR_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireD3D11ObjectsKHR_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireD3D11ObjectsKHR_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireD3D11ObjectsKHR_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireD3D11ObjectsKHR_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireD3D11ObjectsKHR_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireD3D11ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireD3D11ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireD3D11ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireD3D11ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireD3D11ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireD3D11ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireD3D11ObjectsKHR_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireD3D11ObjectsKHR_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseD3D11ObjectsKHR_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D11ObjectsKHR';
    private static function z_EnqueueReleaseD3D11ObjectsKHR_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D11ObjectsKHR';
    private static function z_EnqueueReleaseD3D11ObjectsKHR_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D11ObjectsKHR';
    private static function z_EnqueueReleaseD3D11ObjectsKHR_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D11ObjectsKHR';
    private static function z_EnqueueReleaseD3D11ObjectsKHR_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D11ObjectsKHR';
    private static function z_EnqueueReleaseD3D11ObjectsKHR_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D11ObjectsKHR';
    private static function z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D11ObjectsKHR';
    private static function z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseD3D11ObjectsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseD3D11ObjectsKHR_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseD3D11ObjectsKHR_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseD3D11ObjectsKHR_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseD3D11ObjectsKHR_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseD3D11ObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseD3D11ObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseD3D11ObjectsKHR_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseD3D11ObjectsKHR_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseD3D11ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseD3D11ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseD3D11ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseD3D11ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseD3D11ObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseD3D11ObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseD3D11ObjectsKHR_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseD3D11ObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseD3D11ObjectsKHR_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clDx9MediaSharingKHR = static class
    public const _ExtStr = 'cl_khr_dx9_media_sharing';
    
    private static function z_GetDeviceIDsFromDX9MediaAdapterKHR_1(platform: cl_platform_id; num_media_adapters: UInt32; media_adapter_type: IntPtr; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9MediaAdapterKHR';
    private static function z_GetDeviceIDsFromDX9MediaAdapterKHR_2(platform: cl_platform_id; num_media_adapters: UInt32; media_adapter_type: IntPtr; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9MediaAdapterKHR';
    private static function z_GetDeviceIDsFromDX9MediaAdapterKHR_3(platform: cl_platform_id; num_media_adapters: UInt32; media_adapter_type: IntPtr; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9MediaAdapterKHR';
    private static function z_GetDeviceIDsFromDX9MediaAdapterKHR_4(platform: cl_platform_id; num_media_adapters: UInt32; media_adapter_type: IntPtr; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9MediaAdapterKHR';
    private static function z_GetDeviceIDsFromDX9MediaAdapterKHR_5(platform: cl_platform_id; num_media_adapters: UInt32; var media_adapter_type: UInt32; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9MediaAdapterKHR';
    private static function z_GetDeviceIDsFromDX9MediaAdapterKHR_6(platform: cl_platform_id; num_media_adapters: UInt32; var media_adapter_type: UInt32; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9MediaAdapterKHR';
    private static function z_GetDeviceIDsFromDX9MediaAdapterKHR_7(platform: cl_platform_id; num_media_adapters: UInt32; var media_adapter_type: UInt32; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9MediaAdapterKHR';
    private static function z_GetDeviceIDsFromDX9MediaAdapterKHR_8(platform: cl_platform_id; num_media_adapters: UInt32; var media_adapter_type: UInt32; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9MediaAdapterKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9MediaAdapterKHR(platform: cl_platform_id; num_media_adapters: UInt32; var media_adapter_type: UInt32; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromDX9MediaAdapterKHR_8(platform, num_media_adapters, media_adapter_type, media_adapters, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9MediaAdapterKHR(platform: cl_platform_id; num_media_adapters: UInt32; var media_adapter_type: UInt32; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromDX9MediaAdapterKHR_7(platform, num_media_adapters, media_adapter_type, media_adapters, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9MediaAdapterKHR(platform: cl_platform_id; num_media_adapters: UInt32; var media_adapter_type: UInt32; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromDX9MediaAdapterKHR_6(platform, num_media_adapters, media_adapter_type, media_adapters, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9MediaAdapterKHR(platform: cl_platform_id; num_media_adapters: UInt32; var media_adapter_type: UInt32; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromDX9MediaAdapterKHR_5(platform, num_media_adapters, media_adapter_type, media_adapters, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9MediaAdapterKHR(platform: cl_platform_id; num_media_adapters: UInt32; media_adapter_type: IntPtr; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromDX9MediaAdapterKHR_4(platform, num_media_adapters, media_adapter_type, media_adapters, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9MediaAdapterKHR(platform: cl_platform_id; num_media_adapters: UInt32; media_adapter_type: IntPtr; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromDX9MediaAdapterKHR_3(platform, num_media_adapters, media_adapter_type, media_adapters, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9MediaAdapterKHR(platform: cl_platform_id; num_media_adapters: UInt32; media_adapter_type: IntPtr; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromDX9MediaAdapterKHR_2(platform, num_media_adapters, media_adapter_type, media_adapters, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9MediaAdapterKHR(platform: cl_platform_id; num_media_adapters: UInt32; media_adapter_type: IntPtr; media_adapters: IntPtr; media_adapter_set: UInt32; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromDX9MediaAdapterKHR_1(platform, num_media_adapters, media_adapter_type, media_adapters, media_adapter_set, num_entries, devices, num_devices);
    
    private static function z_CreateFromDX9MediaSurfaceKHR_1(context: cl_context; flags: MemFlags; adapter_type: UInt32; surface_info: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromDX9MediaSurfaceKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromDX9MediaSurfaceKHR(context: cl_context; flags: MemFlags; adapter_type: UInt32; surface_info: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromDX9MediaSurfaceKHR_1(context, flags, adapter_type, surface_info, plane, errcode_ret);
    
    private static function z_EnqueueAcquireDX9MediaSurfacesKHR_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9MediaSurfacesKHR';
    private static function z_EnqueueAcquireDX9MediaSurfacesKHR_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9MediaSurfacesKHR';
    private static function z_EnqueueAcquireDX9MediaSurfacesKHR_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9MediaSurfacesKHR';
    private static function z_EnqueueAcquireDX9MediaSurfacesKHR_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9MediaSurfacesKHR';
    private static function z_EnqueueAcquireDX9MediaSurfacesKHR_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9MediaSurfacesKHR';
    private static function z_EnqueueAcquireDX9MediaSurfacesKHR_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9MediaSurfacesKHR';
    private static function z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9MediaSurfacesKHR';
    private static function z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9MediaSurfacesKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireDX9MediaSurfacesKHR_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireDX9MediaSurfacesKHR_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireDX9MediaSurfacesKHR_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireDX9MediaSurfacesKHR_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireDX9MediaSurfacesKHR_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireDX9MediaSurfacesKHR_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireDX9MediaSurfacesKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireDX9MediaSurfacesKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireDX9MediaSurfacesKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireDX9MediaSurfacesKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireDX9MediaSurfacesKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireDX9MediaSurfacesKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireDX9MediaSurfacesKHR_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireDX9MediaSurfacesKHR_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseDX9MediaSurfacesKHR_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9MediaSurfacesKHR';
    private static function z_EnqueueReleaseDX9MediaSurfacesKHR_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9MediaSurfacesKHR';
    private static function z_EnqueueReleaseDX9MediaSurfacesKHR_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9MediaSurfacesKHR';
    private static function z_EnqueueReleaseDX9MediaSurfacesKHR_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9MediaSurfacesKHR';
    private static function z_EnqueueReleaseDX9MediaSurfacesKHR_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9MediaSurfacesKHR';
    private static function z_EnqueueReleaseDX9MediaSurfacesKHR_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9MediaSurfacesKHR';
    private static function z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9MediaSurfacesKHR';
    private static function z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9MediaSurfacesKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseDX9MediaSurfacesKHR_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseDX9MediaSurfacesKHR_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseDX9MediaSurfacesKHR_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseDX9MediaSurfacesKHR_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseDX9MediaSurfacesKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseDX9MediaSurfacesKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseDX9MediaSurfacesKHR_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseDX9MediaSurfacesKHR_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseDX9MediaSurfacesKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseDX9MediaSurfacesKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseDX9MediaSurfacesKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseDX9MediaSurfacesKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseDX9MediaSurfacesKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseDX9MediaSurfacesKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseDX9MediaSurfacesKHR_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9MediaSurfacesKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseDX9MediaSurfacesKHR_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clEglImageKHR = static class
    public const _ExtStr = 'cl_khr_egl_image';
    
    private static function z_CreateFromEGLImageKHR_1(context: cl_context; egldisplay: IntPtr; eglimage: IntPtr; flags: MemFlags; properties: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromEGLImageKHR';
    private static function z_CreateFromEGLImageKHR_2(context: cl_context; egldisplay: IntPtr; eglimage: IntPtr; flags: MemFlags; var properties: EglImagePropertiesKhr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromEGLImageKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromEGLImageKHR(context: cl_context; egldisplay: IntPtr; eglimage: IntPtr; flags: MemFlags; properties: array of EglImagePropertiesKhr; var errcode_ret: ErrorCode): cl_mem;
    type PEglImagePropertiesKhr=^EglImagePropertiesKhr;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateFromEGLImageKHR_2(context, egldisplay, eglimage, flags, properties[0], errcode_ret) else
        z_CreateFromEGLImageKHR_2(context, egldisplay, eglimage, flags, PEglImagePropertiesKhr(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromEGLImageKHR(context: cl_context; egldisplay: IntPtr; eglimage: IntPtr; flags: MemFlags; var properties: EglImagePropertiesKhr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromEGLImageKHR_2(context, egldisplay, eglimage, flags, properties, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromEGLImageKHR(context: cl_context; egldisplay: IntPtr; eglimage: IntPtr; flags: MemFlags; properties: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromEGLImageKHR_1(context, egldisplay, eglimage, flags, properties, errcode_ret);
    
    private static function z_EnqueueAcquireEGLObjectsKHR_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireEGLObjectsKHR';
    private static function z_EnqueueAcquireEGLObjectsKHR_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireEGLObjectsKHR';
    private static function z_EnqueueAcquireEGLObjectsKHR_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireEGLObjectsKHR';
    private static function z_EnqueueAcquireEGLObjectsKHR_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireEGLObjectsKHR';
    private static function z_EnqueueAcquireEGLObjectsKHR_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireEGLObjectsKHR';
    private static function z_EnqueueAcquireEGLObjectsKHR_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireEGLObjectsKHR';
    private static function z_EnqueueAcquireEGLObjectsKHR_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireEGLObjectsKHR';
    private static function z_EnqueueAcquireEGLObjectsKHR_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireEGLObjectsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireEGLObjectsKHR_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireEGLObjectsKHR_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireEGLObjectsKHR_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireEGLObjectsKHR_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireEGLObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireEGLObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireEGLObjectsKHR_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireEGLObjectsKHR_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireEGLObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireEGLObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireEGLObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireEGLObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireEGLObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireEGLObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireEGLObjectsKHR_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireEGLObjectsKHR_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseEGLObjectsKHR_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseEGLObjectsKHR';
    private static function z_EnqueueReleaseEGLObjectsKHR_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseEGLObjectsKHR';
    private static function z_EnqueueReleaseEGLObjectsKHR_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseEGLObjectsKHR';
    private static function z_EnqueueReleaseEGLObjectsKHR_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseEGLObjectsKHR';
    private static function z_EnqueueReleaseEGLObjectsKHR_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseEGLObjectsKHR';
    private static function z_EnqueueReleaseEGLObjectsKHR_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseEGLObjectsKHR';
    private static function z_EnqueueReleaseEGLObjectsKHR_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseEGLObjectsKHR';
    private static function z_EnqueueReleaseEGLObjectsKHR_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseEGLObjectsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseEGLObjectsKHR_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseEGLObjectsKHR_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseEGLObjectsKHR_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseEGLObjectsKHR_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseEGLObjectsKHR_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseEGLObjectsKHR_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseEGLObjectsKHR_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseEGLObjectsKHR_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseEGLObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseEGLObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseEGLObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseEGLObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseEGLObjectsKHR_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseEGLObjectsKHR_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseEGLObjectsKHR_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseEGLObjectsKHR(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseEGLObjectsKHR_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clEglEventKHR = static class
    public const _ExtStr = 'cl_khr_egl_event';
    
    private static function z_CreateEventFromEGLSyncKHR_1(context: cl_context; sync: IntPtr; display: IntPtr; var errcode_ret: ErrorCode): cl_event;
    external 'opencl' name 'clCreateEventFromEGLSyncKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateEventFromEGLSyncKHR(context: cl_context; sync: IntPtr; display: IntPtr; var errcode_ret: ErrorCode): cl_event :=
    z_CreateEventFromEGLSyncKHR_1(context, sync, display, errcode_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSetMemObjectDestructorAPPLE = static class
    public const _ExtStr = 'cl_APPLE_SetMemObjectDestructor';
    
    private static function z_SetMemObjectDestructorAPPLE_1(memobj: cl_mem; pfn_notify: MemObjectDestructorCallback; user_data: IntPtr): ErrorCode;
    external 'opencl' name 'clSetMemObjectDestructorAPPLE';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetMemObjectDestructorAPPLE(memobj: cl_mem; pfn_notify: MemObjectDestructorCallback; user_data: IntPtr): ErrorCode :=
    z_SetMemObjectDestructorAPPLE_1(memobj, pfn_notify, user_data);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clContextLoggingFunctionsAPPLE = static class
    public const _ExtStr = 'cl_APPLE_ContextLoggingFunctions';
    
    private static procedure z_LogMessagesToSystemLogAPPLE_1(errstr: IntPtr; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr);
    external 'opencl' name 'clLogMessagesToSystemLogAPPLE';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure LogMessagesToSystemLogAPPLE(errstr: string; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr);
    begin
      var errstr_str_ptr: IntPtr;
      try
        errstr_str_ptr := Marshal.StringToHGlobalAnsi(errstr);
        z_LogMessagesToSystemLogAPPLE_1(errstr_str_ptr, private_info, cb, user_data);
      finally
        Marshal.FreeHGlobal(errstr_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure LogMessagesToSystemLogAPPLE(errstr: IntPtr; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr) :=
    z_LogMessagesToSystemLogAPPLE_1(errstr, private_info, cb, user_data);
    
    private static procedure z_LogMessagesToStdoutAPPLE_1(errstr: IntPtr; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr);
    external 'opencl' name 'clLogMessagesToStdoutAPPLE';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure LogMessagesToStdoutAPPLE(errstr: string; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr);
    begin
      var errstr_str_ptr: IntPtr;
      try
        errstr_str_ptr := Marshal.StringToHGlobalAnsi(errstr);
        z_LogMessagesToStdoutAPPLE_1(errstr_str_ptr, private_info, cb, user_data);
      finally
        Marshal.FreeHGlobal(errstr_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure LogMessagesToStdoutAPPLE(errstr: IntPtr; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr) :=
    z_LogMessagesToStdoutAPPLE_1(errstr, private_info, cb, user_data);
    
    private static procedure z_LogMessagesToStderrAPPLE_1(errstr: IntPtr; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr);
    external 'opencl' name 'clLogMessagesToStderrAPPLE';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure LogMessagesToStderrAPPLE(errstr: string; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr);
    begin
      var errstr_str_ptr: IntPtr;
      try
        errstr_str_ptr := Marshal.StringToHGlobalAnsi(errstr);
        z_LogMessagesToStderrAPPLE_1(errstr_str_ptr, private_info, cb, user_data);
      finally
        Marshal.FreeHGlobal(errstr_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure LogMessagesToStderrAPPLE(errstr: IntPtr; private_info: IntPtr; cb: UIntPtr; user_data: IntPtr) :=
    z_LogMessagesToStderrAPPLE_1(errstr, private_info, cb, user_data);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clIcdKHR = static class
    public const _ExtStr = 'cl_khr_icd';
    
    private static function z_IcdGetPlatformIDsKHR_1(num_entries: UInt32; platforms: IntPtr; num_platforms: IntPtr): ErrorCode;
    external 'opencl' name 'clIcdGetPlatformIDsKHR';
    private static function z_IcdGetPlatformIDsKHR_2(num_entries: UInt32; platforms: IntPtr; var num_platforms: UInt32): ErrorCode;
    external 'opencl' name 'clIcdGetPlatformIDsKHR';
    private static function z_IcdGetPlatformIDsKHR_3(num_entries: UInt32; var platforms: cl_platform_id; num_platforms: IntPtr): ErrorCode;
    external 'opencl' name 'clIcdGetPlatformIDsKHR';
    private static function z_IcdGetPlatformIDsKHR_4(num_entries: UInt32; var platforms: cl_platform_id; var num_platforms: UInt32): ErrorCode;
    external 'opencl' name 'clIcdGetPlatformIDsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IcdGetPlatformIDsKHR(num_entries: UInt32; var platforms: cl_platform_id; var num_platforms: UInt32): ErrorCode :=
    z_IcdGetPlatformIDsKHR_4(num_entries, platforms, num_platforms);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IcdGetPlatformIDsKHR(num_entries: UInt32; var platforms: cl_platform_id; num_platforms: IntPtr): ErrorCode :=
    z_IcdGetPlatformIDsKHR_3(num_entries, platforms, num_platforms);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IcdGetPlatformIDsKHR(num_entries: UInt32; platforms: IntPtr; var num_platforms: UInt32): ErrorCode :=
    z_IcdGetPlatformIDsKHR_2(num_entries, platforms, num_platforms);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function IcdGetPlatformIDsKHR(num_entries: UInt32; platforms: IntPtr; num_platforms: IntPtr): ErrorCode :=
    z_IcdGetPlatformIDsKHR_1(num_entries, platforms, num_platforms);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clLoaderLayers = static class
    public const _ExtStr = 'cl_loader_layers';
    
    private static function z_GetLayerInfo_1(param_name: LayerInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetLayerInfo';
    private static function z_GetLayerInfo_2(param_name: LayerInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetLayerInfo';
    private static function z_GetLayerInfo_3(param_name: LayerInfo; param_value_size: UIntPtr; var param_value: cl_layer_api_version; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetLayerInfo';
    private static function z_GetLayerInfo_4(param_name: LayerInfo; param_value_size: UIntPtr; var param_value: cl_layer_api_version; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetLayerInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetLayerInfo(param_name: LayerInfo; param_value_size: UIntPtr; var param_value: cl_layer_api_version; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetLayerInfo_4(param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetLayerInfo(param_name: LayerInfo; param_value_size: UIntPtr; var param_value: cl_layer_api_version; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetLayerInfo_3(param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetLayerInfo(param_name: LayerInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetLayerInfo_2(param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetLayerInfo(param_name: LayerInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetLayerInfo_1(param_name, param_value_size, param_value, param_value_size_ret);
    
    private static function z_InitLayer_1(num_entries: UInt32; target_dispatch: IntPtr; num_entries_ret: IntPtr; layer_dispatch: pointer): ErrorCode;
    external 'opencl' name 'clInitLayer';
    private static function z_InitLayer_2(num_entries: UInt32; target_dispatch: IntPtr; num_entries_ret: IntPtr; var layer_dispatch: IntPtr): ErrorCode;
    external 'opencl' name 'clInitLayer';
    private static function z_InitLayer_3(num_entries: UInt32; target_dispatch: IntPtr; var num_entries_ret: UInt32; layer_dispatch: pointer): ErrorCode;
    external 'opencl' name 'clInitLayer';
    private static function z_InitLayer_4(num_entries: UInt32; target_dispatch: IntPtr; var num_entries_ret: UInt32; var layer_dispatch: IntPtr): ErrorCode;
    external 'opencl' name 'clInitLayer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function InitLayer(num_entries: UInt32; target_dispatch: IntPtr; var num_entries_ret: UInt32; var layer_dispatch: IntPtr): ErrorCode :=
    z_InitLayer_4(num_entries, target_dispatch, num_entries_ret, layer_dispatch);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function InitLayer(num_entries: UInt32; target_dispatch: IntPtr; var num_entries_ret: UInt32; layer_dispatch: pointer): ErrorCode :=
    z_InitLayer_3(num_entries, target_dispatch, num_entries_ret, layer_dispatch);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function InitLayer(num_entries: UInt32; target_dispatch: IntPtr; num_entries_ret: IntPtr; var layer_dispatch: IntPtr): ErrorCode :=
    z_InitLayer_2(num_entries, target_dispatch, num_entries_ret, layer_dispatch);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function InitLayer(num_entries: UInt32; target_dispatch: IntPtr; num_entries_ret: IntPtr; layer_dispatch: pointer): ErrorCode :=
    z_InitLayer_1(num_entries, target_dispatch, num_entries_ret, layer_dispatch);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clIlProgramKHR = static class
    public const _ExtStr = 'cl_khr_il_program';
    
    private static function z_CreateProgramWithILKHR_1(context: cl_context; il: IntPtr; length: UIntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithILKHR';
    private static function z_CreateProgramWithILKHR_2(context: cl_context; var il: byte; length: UIntPtr; var errcode_ret: ErrorCode): cl_program;
    external 'opencl' name 'clCreateProgramWithILKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithILKHR(context: cl_context; il: array of byte; length: UIntPtr; var errcode_ret: ErrorCode): cl_program;
    type Pbyte=^byte;
    begin
      Result := if (il<>nil) and (il.Length<>0) then
        z_CreateProgramWithILKHR_2(context, il[0], length, errcode_ret) else
        z_CreateProgramWithILKHR_2(context, Pbyte(nil)^, length, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithILKHR(context: cl_context; var il: byte; length: UIntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithILKHR_2(context, il, length, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateProgramWithILKHR(context: cl_context; il: IntPtr; length: UIntPtr; var errcode_ret: ErrorCode): cl_program :=
    z_CreateProgramWithILKHR_1(context, il, length, errcode_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clTerminateContextKHR = static class
    public const _ExtStr = 'cl_khr_terminate_context';
    
    private static function z_TerminateContextKHR_1(context: cl_context): ErrorCode;
    external 'opencl' name 'clTerminateContextKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function TerminateContextKHR(context: cl_context): ErrorCode :=
    z_TerminateContextKHR_1(context);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clCreateCommandQueueKHR = static class
    public const _ExtStr = 'cl_khr_create_command_queue';
    
    private static function z_CreateCommandQueueWithPropertiesKHR_1(context: cl_context; device: cl_device_id; properties: IntPtr; var errcode_ret: ErrorCode): cl_command_queue;
    external 'opencl' name 'clCreateCommandQueueWithPropertiesKHR';
    private static function z_CreateCommandQueueWithPropertiesKHR_2(context: cl_context; device: cl_device_id; var properties: UInt64; var errcode_ret: ErrorCode): cl_command_queue;
    external 'opencl' name 'clCreateCommandQueueWithPropertiesKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandQueueWithPropertiesKHR(context: cl_context; device: cl_device_id; properties: array of UInt64; var errcode_ret: ErrorCode): cl_command_queue;
    type PUInt64=^UInt64;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateCommandQueueWithPropertiesKHR_2(context, device, properties[0], errcode_ret) else
        z_CreateCommandQueueWithPropertiesKHR_2(context, device, PUInt64(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandQueueWithPropertiesKHR(context: cl_context; device: cl_device_id; var properties: UInt64; var errcode_ret: ErrorCode): cl_command_queue :=
    z_CreateCommandQueueWithPropertiesKHR_2(context, device, properties, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandQueueWithPropertiesKHR(context: cl_context; device: cl_device_id; properties: IntPtr; var errcode_ret: ErrorCode): cl_command_queue :=
    z_CreateCommandQueueWithPropertiesKHR_1(context, device, properties, errcode_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clDeviceFissionEXT = static class
    public const _ExtStr = 'cl_ext_device_fission';
    
    private static function z_ReleaseDeviceEXT_1(device: cl_device_id): ErrorCode;
    external 'opencl' name 'clReleaseDeviceEXT';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseDeviceEXT(device: cl_device_id): ErrorCode :=
    z_ReleaseDeviceEXT_1(device);
    
    private static function z_RetainDeviceEXT_1(device: cl_device_id): ErrorCode;
    external 'opencl' name 'clRetainDeviceEXT';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainDeviceEXT(device: cl_device_id): ErrorCode :=
    z_RetainDeviceEXT_1(device);
    
    private static function z_CreateSubDevicesEXT_1(in_device: cl_device_id; properties: IntPtr; num_entries: UInt32; out_devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateSubDevicesEXT';
    private static function z_CreateSubDevicesEXT_2(in_device: cl_device_id; properties: IntPtr; num_entries: UInt32; out_devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clCreateSubDevicesEXT';
    private static function z_CreateSubDevicesEXT_3(in_device: cl_device_id; properties: IntPtr; num_entries: UInt32; var out_devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateSubDevicesEXT';
    private static function z_CreateSubDevicesEXT_4(in_device: cl_device_id; properties: IntPtr; num_entries: UInt32; var out_devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clCreateSubDevicesEXT';
    private static function z_CreateSubDevicesEXT_5(in_device: cl_device_id; var properties: DevicePartitionPropertyExt; num_entries: UInt32; out_devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateSubDevicesEXT';
    private static function z_CreateSubDevicesEXT_6(in_device: cl_device_id; var properties: DevicePartitionPropertyExt; num_entries: UInt32; out_devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clCreateSubDevicesEXT';
    private static function z_CreateSubDevicesEXT_7(in_device: cl_device_id; var properties: DevicePartitionPropertyExt; num_entries: UInt32; var out_devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clCreateSubDevicesEXT';
    private static function z_CreateSubDevicesEXT_8(in_device: cl_device_id; var properties: DevicePartitionPropertyExt; num_entries: UInt32; var out_devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clCreateSubDevicesEXT';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; properties: array of DevicePartitionPropertyExt; num_entries: UInt32; var out_devices: cl_device_id; num_devices: array of UInt32): ErrorCode;
    type PDevicePartitionPropertyExt=^DevicePartitionPropertyExt;
    type PUInt32=^UInt32;
    begin
      Result := if (num_devices<>nil) and (num_devices.Length<>0) then
        if (properties<>nil) and (properties.Length<>0) then
          z_CreateSubDevicesEXT_8(in_device, properties[0], num_entries, out_devices, num_devices[0]) else
          z_CreateSubDevicesEXT_8(in_device, PDevicePartitionPropertyExt(nil)^, num_entries, out_devices, num_devices[0]) else
        if (properties<>nil) and (properties.Length<>0) then
          z_CreateSubDevicesEXT_8(in_device, properties[0], num_entries, out_devices, PUInt32(nil)^) else
          z_CreateSubDevicesEXT_8(in_device, PDevicePartitionPropertyExt(nil)^, num_entries, out_devices, PUInt32(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; properties: array of DevicePartitionPropertyExt; num_entries: UInt32; out_devices: IntPtr; num_devices: array of UInt32): ErrorCode;
    type PDevicePartitionPropertyExt=^DevicePartitionPropertyExt;
    type PUInt32=^UInt32;
    begin
      Result := if (num_devices<>nil) and (num_devices.Length<>0) then
        if (properties<>nil) and (properties.Length<>0) then
          z_CreateSubDevicesEXT_6(in_device, properties[0], num_entries, out_devices, num_devices[0]) else
          z_CreateSubDevicesEXT_6(in_device, PDevicePartitionPropertyExt(nil)^, num_entries, out_devices, num_devices[0]) else
        if (properties<>nil) and (properties.Length<>0) then
          z_CreateSubDevicesEXT_6(in_device, properties[0], num_entries, out_devices, PUInt32(nil)^) else
          z_CreateSubDevicesEXT_6(in_device, PDevicePartitionPropertyExt(nil)^, num_entries, out_devices, PUInt32(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; var properties: DevicePartitionPropertyExt; num_entries: UInt32; var out_devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_CreateSubDevicesEXT_8(in_device, properties, num_entries, out_devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; var properties: DevicePartitionPropertyExt; num_entries: UInt32; var out_devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_CreateSubDevicesEXT_7(in_device, properties, num_entries, out_devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; var properties: DevicePartitionPropertyExt; num_entries: UInt32; out_devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_CreateSubDevicesEXT_6(in_device, properties, num_entries, out_devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; var properties: DevicePartitionPropertyExt; num_entries: UInt32; out_devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_CreateSubDevicesEXT_5(in_device, properties, num_entries, out_devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; properties: IntPtr; num_entries: UInt32; var out_devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_CreateSubDevicesEXT_4(in_device, properties, num_entries, out_devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; properties: IntPtr; num_entries: UInt32; var out_devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_CreateSubDevicesEXT_3(in_device, properties, num_entries, out_devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; properties: IntPtr; num_entries: UInt32; out_devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_CreateSubDevicesEXT_2(in_device, properties, num_entries, out_devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSubDevicesEXT(in_device: cl_device_id; properties: IntPtr; num_entries: UInt32; out_devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_CreateSubDevicesEXT_1(in_device, properties, num_entries, out_devices, num_devices);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clMigrateMemobjectEXT = static class
    public const _ExtStr = 'cl_ext_migrate_memobject';
    
    private static function z_EnqueueMigrateMemObjectEXT_1(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjectEXT';
    private static function z_EnqueueMigrateMemObjectEXT_2(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjectEXT';
    private static function z_EnqueueMigrateMemObjectEXT_3(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjectEXT';
    private static function z_EnqueueMigrateMemObjectEXT_4(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjectEXT';
    private static function z_EnqueueMigrateMemObjectEXT_5(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjectEXT';
    private static function z_EnqueueMigrateMemObjectEXT_6(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjectEXT';
    private static function z_EnqueueMigrateMemObjectEXT_7(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjectEXT';
    private static function z_EnqueueMigrateMemObjectEXT_8(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemObjectEXT';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueMigrateMemObjectEXT_6(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueMigrateMemObjectEXT_6(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueMigrateMemObjectEXT_5(command_queue, num_mem_objects, mem_objects[0], flags, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueMigrateMemObjectEXT_5(command_queue, num_mem_objects, Pcl_mem(nil)^, flags, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemObjectEXT_8(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemObjectEXT_7(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemObjectEXT_6(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemObjectEXT_5(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemObjectEXT_4(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemObjectEXT_4(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemObjectEXT_3(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemObjectEXT_3(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemObjectEXT_4(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemObjectEXT_3(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemObjectEXT_2(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemObjectEXT(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; flags: MemMigrationFlagsExt; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemObjectEXT_1(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clExtHostPtrQCOM = static class
    public const _ExtStr = 'cl_qcom_ext_host_ptr';
    
    private static function z_GetDeviceImageInfoQCOM_1(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; image_format: IntPtr; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceImageInfoQCOM';
    private static function z_GetDeviceImageInfoQCOM_2(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; image_format: IntPtr; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceImageInfoQCOM';
    private static function z_GetDeviceImageInfoQCOM_3(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; var image_format: cl_image_format; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceImageInfoQCOM';
    private static function z_GetDeviceImageInfoQCOM_4(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; var image_format: cl_image_format; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceImageInfoQCOM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceImageInfoQCOM(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; image_format: array of cl_image_format; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    type Pcl_image_format=^cl_image_format;
    begin
      Result := if (image_format<>nil) and (image_format.Length<>0) then
        z_GetDeviceImageInfoQCOM_4(device, image_width, image_height, image_format[0], param_name, param_value_size, param_value, param_value_size_ret) else
        z_GetDeviceImageInfoQCOM_4(device, image_width, image_height, Pcl_image_format(nil)^, param_name, param_value_size, param_value, param_value_size_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceImageInfoQCOM(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; image_format: array of cl_image_format; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    type Pcl_image_format=^cl_image_format;
    begin
      Result := if (image_format<>nil) and (image_format.Length<>0) then
        z_GetDeviceImageInfoQCOM_3(device, image_width, image_height, image_format[0], param_name, param_value_size, param_value, param_value_size_ret) else
        z_GetDeviceImageInfoQCOM_3(device, image_width, image_height, Pcl_image_format(nil)^, param_name, param_value_size, param_value, param_value_size_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceImageInfoQCOM(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; var image_format: cl_image_format; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceImageInfoQCOM_4(device, image_width, image_height, image_format, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceImageInfoQCOM(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; var image_format: cl_image_format; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceImageInfoQCOM_3(device, image_width, image_height, image_format, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceImageInfoQCOM(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; image_format: IntPtr; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetDeviceImageInfoQCOM_2(device, image_width, image_height, image_format, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceImageInfoQCOM(device: cl_device_id; image_width: UIntPtr; image_height: UIntPtr; image_format: IntPtr; param_name: ImagePitchInfoQcom; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetDeviceImageInfoQCOM_1(device, image_width, image_height, image_format, param_name, param_value_size, param_value, param_value_size_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clUseGrallocPtrIMG = static class
    public const _ExtStr = 'cl_img_use_gralloc_ptr';
    
    private static function z_EnqueueAcquireGrallocObjectsIMG_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGrallocObjectsIMG';
    private static function z_EnqueueAcquireGrallocObjectsIMG_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGrallocObjectsIMG';
    private static function z_EnqueueAcquireGrallocObjectsIMG_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGrallocObjectsIMG';
    private static function z_EnqueueAcquireGrallocObjectsIMG_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGrallocObjectsIMG';
    private static function z_EnqueueAcquireGrallocObjectsIMG_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGrallocObjectsIMG';
    private static function z_EnqueueAcquireGrallocObjectsIMG_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGrallocObjectsIMG';
    private static function z_EnqueueAcquireGrallocObjectsIMG_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGrallocObjectsIMG';
    private static function z_EnqueueAcquireGrallocObjectsIMG_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGrallocObjectsIMG';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireGrallocObjectsIMG_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireGrallocObjectsIMG_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireGrallocObjectsIMG_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireGrallocObjectsIMG_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireGrallocObjectsIMG_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireGrallocObjectsIMG_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireGrallocObjectsIMG_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireGrallocObjectsIMG_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireGrallocObjectsIMG_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireGrallocObjectsIMG_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireGrallocObjectsIMG_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireGrallocObjectsIMG_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireGrallocObjectsIMG_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireGrallocObjectsIMG_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireGrallocObjectsIMG_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireGrallocObjectsIMG_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseGrallocObjectsIMG_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGrallocObjectsIMG';
    private static function z_EnqueueReleaseGrallocObjectsIMG_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGrallocObjectsIMG';
    private static function z_EnqueueReleaseGrallocObjectsIMG_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGrallocObjectsIMG';
    private static function z_EnqueueReleaseGrallocObjectsIMG_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGrallocObjectsIMG';
    private static function z_EnqueueReleaseGrallocObjectsIMG_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGrallocObjectsIMG';
    private static function z_EnqueueReleaseGrallocObjectsIMG_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGrallocObjectsIMG';
    private static function z_EnqueueReleaseGrallocObjectsIMG_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGrallocObjectsIMG';
    private static function z_EnqueueReleaseGrallocObjectsIMG_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGrallocObjectsIMG';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseGrallocObjectsIMG_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseGrallocObjectsIMG_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseGrallocObjectsIMG_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseGrallocObjectsIMG_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseGrallocObjectsIMG_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseGrallocObjectsIMG_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseGrallocObjectsIMG_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseGrallocObjectsIMG_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseGrallocObjectsIMG_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseGrallocObjectsIMG_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseGrallocObjectsIMG_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseGrallocObjectsIMG_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseGrallocObjectsIMG_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseGrallocObjectsIMG_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseGrallocObjectsIMG_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGrallocObjectsIMG(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseGrallocObjectsIMG_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSubgroupsKHR = static class
    public const _ExtStr = 'cl_khr_subgroups';
    
    private static function z_GetKernelSubGroupInfoKHR_1(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfoKHR';
    private static function z_GetKernelSubGroupInfoKHR_2(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfoKHR';
    private static function z_GetKernelSubGroupInfoKHR_3(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfoKHR';
    private static function z_GetKernelSubGroupInfoKHR_4(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfoKHR';
    private static function z_GetKernelSubGroupInfoKHR_5(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; var input_value: UIntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfoKHR';
    private static function z_GetKernelSubGroupInfoKHR_6(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; var input_value: UIntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSubGroupInfoKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfoKHR(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; var input_value: UIntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelSubGroupInfoKHR_6(in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfoKHR(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; var input_value: UIntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelSubGroupInfoKHR_5(in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfoKHR(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelSubGroupInfoKHR_4(in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfoKHR(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; var param_value: UIntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelSubGroupInfoKHR_3(in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfoKHR(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetKernelSubGroupInfoKHR_2(in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSubGroupInfoKHR(in_kernel: cl_kernel; in_device: cl_device_id; param_name: KernelSubGroupInfo; input_value_size: UIntPtr; input_value: IntPtr; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetKernelSubGroupInfoKHR_1(in_kernel, in_device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clImportMemoryARM = static class
    public const _ExtStr = 'cl_arm_import_memory';
    
    private static function z_ImportMemoryARM_1(context: cl_context; flags: MemFlags; properties: IntPtr; memory: IntPtr; size: UIntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clImportMemoryARM';
    private static function z_ImportMemoryARM_2(context: cl_context; flags: MemFlags; var properties: ImportPropertiesArm; memory: IntPtr; size: UIntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clImportMemoryARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ImportMemoryARM(context: cl_context; flags: MemFlags; properties: array of ImportPropertiesArm; memory: IntPtr; size: UIntPtr; var errcode_ret: ErrorCode): cl_mem;
    type PImportPropertiesArm=^ImportPropertiesArm;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_ImportMemoryARM_2(context, flags, properties[0], memory, size, errcode_ret) else
        z_ImportMemoryARM_2(context, flags, PImportPropertiesArm(nil)^, memory, size, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ImportMemoryARM(context: cl_context; flags: MemFlags; var properties: ImportPropertiesArm; memory: IntPtr; size: UIntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_ImportMemoryARM_2(context, flags, properties, memory, size, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ImportMemoryARM(context: cl_context; flags: MemFlags; properties: IntPtr; memory: IntPtr; size: UIntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_ImportMemoryARM_1(context, flags, properties, memory, size, errcode_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSharedVirtualMemoryARM = static class
    public const _ExtStr = 'cl_arm_shared_virtual_memory';
    
    private static function z_SVMAllocARM_1(context: cl_context; flags: SvmMemFlagsArm; size: UIntPtr; alignment: UInt32): IntPtr;
    external 'opencl' name 'clSVMAllocARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SVMAllocARM(context: cl_context; flags: SvmMemFlagsArm; size: UIntPtr; alignment: UInt32): IntPtr :=
    z_SVMAllocARM_1(context, flags, size, alignment);
    
    private static procedure z_SVMFreeARM_1(context: cl_context; svm_pointer: IntPtr);
    external 'opencl' name 'clSVMFreeARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure SVMFreeARM(context: cl_context; svm_pointer: IntPtr) :=
    z_SVMFreeARM_1(context, svm_pointer);
    
    private static function z_EnqueueSVMFreeARM_1(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFreeARM';
    private static function z_EnqueueSVMFreeARM_2(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFreeARM';
    private static function z_EnqueueSVMFreeARM_3(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFreeARM';
    private static function z_EnqueueSVMFreeARM_4(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFreeARM';
    private static function z_EnqueueSVMFreeARM_5(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFreeARM';
    private static function z_EnqueueSVMFreeARM_6(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFreeARM';
    private static function z_EnqueueSVMFreeARM_7(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFreeARM';
    private static function z_EnqueueSVMFreeARM_8(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMFreeARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
          z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    begin
      Result := if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
        z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    begin
      Result := if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
        z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PIntPtr=^IntPtr;
    begin
      Result := if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
        z_EnqueueSVMFreeARM_6(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueSVMFreeARM_6(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: array of IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PIntPtr=^IntPtr;
    begin
      Result := if (svm_pointers<>nil) and (svm_pointers.Length<>0) then
        z_EnqueueSVMFreeARM_5(command_queue, num_svm_pointers, svm_pointers[0], pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueSVMFreeARM_5(command_queue, num_svm_pointers, PIntPtr(nil)^, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMFreeARM_8(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMFreeARM_7(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMFreeARM_6(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; var svm_pointers: IntPtr; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMFreeARM_5(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMFreeARM_4(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMFreeARM_4(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMFreeARM_3(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMFreeARM_3(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMFreeARM_4(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMFreeARM_3(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMFreeARM_2(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMFreeARM(command_queue: cl_command_queue; num_svm_pointers: UInt32; svm_pointers: pointer; pfn_free_func: EnqueueSVMFreeCallback; user_data: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMFreeARM_1(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueSVMMemcpyARM_1(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemcpyARM';
    private static function z_EnqueueSVMMemcpyARM_2(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemcpyARM';
    private static function z_EnqueueSVMMemcpyARM_3(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemcpyARM';
    private static function z_EnqueueSVMMemcpyARM_4(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemcpyARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpyARM(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemcpyARM_4(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemcpyARM_4(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpyARM(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemcpyARM_3(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemcpyARM_3(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpyARM(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMemcpyARM_4(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpyARM(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMemcpyARM_3(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpyARM(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMemcpyARM_2(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemcpyARM(command_queue: cl_command_queue; blocking_copy: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMemcpyARM_1(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueSVMMemFillARM_1(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFillARM';
    private static function z_EnqueueSVMMemFillARM_2(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFillARM';
    private static function z_EnqueueSVMMemFillARM_3(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFillARM';
    private static function z_EnqueueSVMMemFillARM_4(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFillARM';
    private static function z_EnqueueSVMMemFillARM_5(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: Byte; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFillARM';
    private static function z_EnqueueSVMMemFillARM_6(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: Byte; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFillARM';
    private static function z_EnqueueSVMMemFillARM_7(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: Byte; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFillARM';
    private static function z_EnqueueSVMMemFillARM_8(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: Byte; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMemFillARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFillARM(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFillARM(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFillARM(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFillARM(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFillARM(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFillARM(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFillARM(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFillARM(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFillARM(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFillARM(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: array of T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    type PT=^T;
    begin
      Result := if (pattern<>nil) and (pattern.Length<>0) then
        EnqueueSVMMemFillARM(command_queue, svm_ptr, pattern[0], pattern_size, size, num_events_in_wait_list, event_wait_list, &event) else
        EnqueueSVMMemFillARM(command_queue, svm_ptr, PT(nil)^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemFillARM_8(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemFillARM_8(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode; where T: record;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemFillARM_7(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemFillARM_7(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueSVMMemFillARM_8(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueSVMMemFillARM_7(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode; where T: record;
    begin
      Result := z_EnqueueSVMMemFillARM_6(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM<T>(command_queue: cl_command_queue; svm_ptr: IntPtr; var pattern: T; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_EnqueueSVMMemFillARM_5(command_queue, svm_ptr, PByte(pointer(@pattern))^, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemFillARM_4(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemFillARM_4(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMemFillARM_3(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMemFillARM_3(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMemFillARM_4(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMemFillARM_3(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMemFillARM_2(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMemFillARM(command_queue: cl_command_queue; svm_ptr: IntPtr; pattern: pointer; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMemFillARM_1(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueSVMMapARM_1(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMapARM';
    private static function z_EnqueueSVMMapARM_2(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMapARM';
    private static function z_EnqueueSVMMapARM_3(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMapARM';
    private static function z_EnqueueSVMMapARM_4(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMMapARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMapARM(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMapARM_4(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMapARM_4(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMapARM(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMMapARM_3(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMMapARM_3(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMapARM(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMapARM_4(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMapARM(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMapARM_3(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMapARM(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMMapARM_2(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMMapARM(command_queue: cl_command_queue; blocking_map: Bool; flags: MapFlags; svm_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMMapARM_1(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueSVMUnmapARM_1(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMUnmapARM';
    private static function z_EnqueueSVMUnmapARM_2(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMUnmapARM';
    private static function z_EnqueueSVMUnmapARM_3(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSVMUnmapARM';
    private static function z_EnqueueSVMUnmapARM_4(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSVMUnmapARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmapARM(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMUnmapARM_4(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMUnmapARM_4(command_queue, svm_ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmapARM(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSVMUnmapARM_3(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSVMUnmapARM_3(command_queue, svm_ptr, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmapARM(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMUnmapARM_4(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmapARM(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMUnmapARM_3(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmapARM(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSVMUnmapARM_2(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSVMUnmapARM(command_queue: cl_command_queue; svm_ptr: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSVMUnmapARM_1(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_SetKernelArgSVMPointerARM_1(kernel: cl_kernel; arg_index: UInt32; arg_value: IntPtr): ErrorCode;
    external 'opencl' name 'clSetKernelArgSVMPointerARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelArgSVMPointerARM(kernel: cl_kernel; arg_index: UInt32; arg_value: IntPtr): ErrorCode :=
    z_SetKernelArgSVMPointerARM_1(kernel, arg_index, arg_value);
    
    private static function z_SetKernelExecInfoARM_1(kernel: cl_kernel; param_name: KernelExecInfoArm; param_value_size: UIntPtr; param_value: pointer): ErrorCode;
    external 'opencl' name 'clSetKernelExecInfoARM';
    private static function z_SetKernelExecInfoARM_2(kernel: cl_kernel; param_name: KernelExecInfoArm; param_value_size: UIntPtr; var param_value: IntPtr): ErrorCode;
    external 'opencl' name 'clSetKernelExecInfoARM';
    private static function z_SetKernelExecInfoARM_3(kernel: cl_kernel; param_name: KernelExecInfoArm; param_value_size: UIntPtr; var param_value: Bool): ErrorCode;
    external 'opencl' name 'clSetKernelExecInfoARM';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelExecInfoARM(kernel: cl_kernel; param_name: KernelExecInfoArm; param_value_size: UIntPtr; var param_value: Bool): ErrorCode :=
    z_SetKernelExecInfoARM_3(kernel, param_name, param_value_size, param_value);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelExecInfoARM(kernel: cl_kernel; param_name: KernelExecInfoArm; param_value_size: UIntPtr; var param_value: IntPtr): ErrorCode :=
    z_SetKernelExecInfoARM_2(kernel, param_name, param_value_size, param_value);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelExecInfoARM(kernel: cl_kernel; param_name: KernelExecInfoArm; param_value_size: UIntPtr; param_value: pointer): ErrorCode :=
    z_SetKernelExecInfoARM_1(kernel, param_name, param_value_size, param_value);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clAcceleratorINTEL = static class
    public const _ExtStr = 'cl_intel_accelerator';
    
    private static function z_CreateAcceleratorINTEL_1(context: cl_context; accelerator_type: AcceleratorTypeIntel; descriptor_size: UIntPtr; descriptor: IntPtr; var errcode_ret: ErrorCode): cl_accelerator_intel;
    external 'opencl' name 'clCreateAcceleratorINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateAcceleratorINTEL(context: cl_context; accelerator_type: AcceleratorTypeIntel; descriptor_size: UIntPtr; descriptor: IntPtr; var errcode_ret: ErrorCode): cl_accelerator_intel :=
    z_CreateAcceleratorINTEL_1(context, accelerator_type, descriptor_size, descriptor, errcode_ret);
    
    private static function z_GetAcceleratorInfoINTEL_1(accelerator: cl_accelerator_intel; param_name: AcceleratorInfoIntel; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetAcceleratorInfoINTEL';
    private static function z_GetAcceleratorInfoINTEL_2(accelerator: cl_accelerator_intel; param_name: AcceleratorInfoIntel; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetAcceleratorInfoINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetAcceleratorInfoINTEL(accelerator: cl_accelerator_intel; param_name: AcceleratorInfoIntel; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetAcceleratorInfoINTEL_2(accelerator, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetAcceleratorInfoINTEL(accelerator: cl_accelerator_intel; param_name: AcceleratorInfoIntel; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetAcceleratorInfoINTEL_1(accelerator, param_name, param_value_size, param_value, param_value_size_ret);
    
    private static function z_RetainAcceleratorINTEL_1(accelerator: cl_accelerator_intel): ErrorCode;
    external 'opencl' name 'clRetainAcceleratorINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainAcceleratorINTEL(accelerator: cl_accelerator_intel): ErrorCode :=
    z_RetainAcceleratorINTEL_1(accelerator);
    
    private static function z_ReleaseAcceleratorINTEL_1(accelerator: cl_accelerator_intel): ErrorCode;
    external 'opencl' name 'clReleaseAcceleratorINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseAcceleratorINTEL(accelerator: cl_accelerator_intel): ErrorCode :=
    z_ReleaseAcceleratorINTEL_1(accelerator);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clGlEventKHR = static class
    public const _ExtStr = 'cl_khr_gl_event';
    
    private static function z_CreateEventFromGLsyncKHR_1(context: cl_context; sync: IntPtr; var errcode_ret: ErrorCode): cl_event;
    external 'opencl' name 'clCreateEventFromGLsyncKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateEventFromGLsyncKHR(context: cl_context; sync: IntPtr; var errcode_ret: ErrorCode): cl_event :=
    z_CreateEventFromGLsyncKHR_1(context, sync, errcode_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clVaApiMediaSharingINTEL = static class
    public const _ExtStr = 'cl_intel_va_api_media_sharing';
    
    private static function z_GetDeviceIDsFromVA_APIMediaAdapterINTEL_1(platform: cl_platform_id; media_adapter_type: VaApiDeviceSourceIntel; media_adapter: IntPtr; media_adapter_set: VaApiDeviceSetIntel; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromVA_APIMediaAdapterINTEL';
    private static function z_GetDeviceIDsFromVA_APIMediaAdapterINTEL_2(platform: cl_platform_id; media_adapter_type: VaApiDeviceSourceIntel; media_adapter: IntPtr; media_adapter_set: VaApiDeviceSetIntel; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromVA_APIMediaAdapterINTEL';
    private static function z_GetDeviceIDsFromVA_APIMediaAdapterINTEL_3(platform: cl_platform_id; media_adapter_type: VaApiDeviceSourceIntel; media_adapter: IntPtr; media_adapter_set: VaApiDeviceSetIntel; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromVA_APIMediaAdapterINTEL';
    private static function z_GetDeviceIDsFromVA_APIMediaAdapterINTEL_4(platform: cl_platform_id; media_adapter_type: VaApiDeviceSourceIntel; media_adapter: IntPtr; media_adapter_set: VaApiDeviceSetIntel; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromVA_APIMediaAdapterINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromVA_APIMediaAdapterINTEL(platform: cl_platform_id; media_adapter_type: VaApiDeviceSourceIntel; media_adapter: IntPtr; media_adapter_set: VaApiDeviceSetIntel; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromVA_APIMediaAdapterINTEL_4(platform, media_adapter_type, media_adapter, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromVA_APIMediaAdapterINTEL(platform: cl_platform_id; media_adapter_type: VaApiDeviceSourceIntel; media_adapter: IntPtr; media_adapter_set: VaApiDeviceSetIntel; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromVA_APIMediaAdapterINTEL_3(platform, media_adapter_type, media_adapter, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromVA_APIMediaAdapterINTEL(platform: cl_platform_id; media_adapter_type: VaApiDeviceSourceIntel; media_adapter: IntPtr; media_adapter_set: VaApiDeviceSetIntel; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromVA_APIMediaAdapterINTEL_2(platform, media_adapter_type, media_adapter, media_adapter_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromVA_APIMediaAdapterINTEL(platform: cl_platform_id; media_adapter_type: VaApiDeviceSourceIntel; media_adapter: IntPtr; media_adapter_set: VaApiDeviceSetIntel; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromVA_APIMediaAdapterINTEL_1(platform, media_adapter_type, media_adapter, media_adapter_set, num_entries, devices, num_devices);
    
    private static function z_CreateFromVA_APIMediaSurfaceINTEL_1(context: cl_context; flags: MemFlags; surface: pointer; plane: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromVA_APIMediaSurfaceINTEL';
    private static function z_CreateFromVA_APIMediaSurfaceINTEL_2(context: cl_context; flags: MemFlags; var surface: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromVA_APIMediaSurfaceINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromVA_APIMediaSurfaceINTEL(context: cl_context; flags: MemFlags; surface: array of IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (surface<>nil) and (surface.Length<>0) then
        z_CreateFromVA_APIMediaSurfaceINTEL_2(context, flags, surface[0], plane, errcode_ret) else
        z_CreateFromVA_APIMediaSurfaceINTEL_2(context, flags, PIntPtr(nil)^, plane, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromVA_APIMediaSurfaceINTEL(context: cl_context; flags: MemFlags; var surface: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromVA_APIMediaSurfaceINTEL_2(context, flags, surface, plane, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromVA_APIMediaSurfaceINTEL(context: cl_context; flags: MemFlags; surface: pointer; plane: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromVA_APIMediaSurfaceINTEL_1(context, flags, surface, plane, errcode_ret);
    
    private static function z_EnqueueAcquireVA_APIMediaSurfacesINTEL_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueAcquireVA_APIMediaSurfacesINTEL_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueAcquireVA_APIMediaSurfacesINTEL_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueAcquireVA_APIMediaSurfacesINTEL_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueAcquireVA_APIMediaSurfacesINTEL_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueAcquireVA_APIMediaSurfacesINTEL_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireVA_APIMediaSurfacesINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireVA_APIMediaSurfacesINTEL_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireVA_APIMediaSurfacesINTEL_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireVA_APIMediaSurfacesINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireVA_APIMediaSurfacesINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireVA_APIMediaSurfacesINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireVA_APIMediaSurfacesINTEL_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireVA_APIMediaSurfacesINTEL_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseVA_APIMediaSurfacesINTEL_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueReleaseVA_APIMediaSurfacesINTEL_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueReleaseVA_APIMediaSurfacesINTEL_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueReleaseVA_APIMediaSurfacesINTEL_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueReleaseVA_APIMediaSurfacesINTEL_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueReleaseVA_APIMediaSurfacesINTEL_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseVA_APIMediaSurfacesINTEL';
    private static function z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseVA_APIMediaSurfacesINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseVA_APIMediaSurfacesINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseVA_APIMediaSurfacesINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseVA_APIMediaSurfacesINTEL_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseVA_APIMediaSurfacesINTEL_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseVA_APIMediaSurfacesINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseVA_APIMediaSurfacesINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseVA_APIMediaSurfacesINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseVA_APIMediaSurfacesINTEL_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseVA_APIMediaSurfacesINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseVA_APIMediaSurfacesINTEL_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clDx9MediaSharingINTEL = static class
    public const _ExtStr = 'cl_intel_dx9_media_sharing';
    
    private static function z_GetDeviceIDsFromDX9INTEL_1(platform: cl_platform_id; dx9_device_source: Dx9DeviceSourceIntel; dx9_object: IntPtr; dx9_device_set: Dx9DeviceSetIntel; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9INTEL';
    private static function z_GetDeviceIDsFromDX9INTEL_2(platform: cl_platform_id; dx9_device_source: Dx9DeviceSourceIntel; dx9_object: IntPtr; dx9_device_set: Dx9DeviceSetIntel; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9INTEL';
    private static function z_GetDeviceIDsFromDX9INTEL_3(platform: cl_platform_id; dx9_device_source: Dx9DeviceSourceIntel; dx9_object: IntPtr; dx9_device_set: Dx9DeviceSetIntel; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9INTEL';
    private static function z_GetDeviceIDsFromDX9INTEL_4(platform: cl_platform_id; dx9_device_source: Dx9DeviceSourceIntel; dx9_object: IntPtr; dx9_device_set: Dx9DeviceSetIntel; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode;
    external 'opencl' name 'clGetDeviceIDsFromDX9INTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9INTEL(platform: cl_platform_id; dx9_device_source: Dx9DeviceSourceIntel; dx9_object: IntPtr; dx9_device_set: Dx9DeviceSetIntel; num_entries: UInt32; var devices: cl_device_id; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromDX9INTEL_4(platform, dx9_device_source, dx9_object, dx9_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9INTEL(platform: cl_platform_id; dx9_device_source: Dx9DeviceSourceIntel; dx9_object: IntPtr; dx9_device_set: Dx9DeviceSetIntel; num_entries: UInt32; var devices: cl_device_id; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromDX9INTEL_3(platform, dx9_device_source, dx9_object, dx9_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9INTEL(platform: cl_platform_id; dx9_device_source: Dx9DeviceSourceIntel; dx9_object: IntPtr; dx9_device_set: Dx9DeviceSetIntel; num_entries: UInt32; devices: IntPtr; var num_devices: UInt32): ErrorCode :=
    z_GetDeviceIDsFromDX9INTEL_2(platform, dx9_device_source, dx9_object, dx9_device_set, num_entries, devices, num_devices);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetDeviceIDsFromDX9INTEL(platform: cl_platform_id; dx9_device_source: Dx9DeviceSourceIntel; dx9_object: IntPtr; dx9_device_set: Dx9DeviceSetIntel; num_entries: UInt32; devices: IntPtr; num_devices: IntPtr): ErrorCode :=
    z_GetDeviceIDsFromDX9INTEL_1(platform, dx9_device_source, dx9_object, dx9_device_set, num_entries, devices, num_devices);
    
    private static function z_CreateFromDX9MediaSurfaceINTEL_1(context: cl_context; flags: MemFlags; resource: pointer; sharedHandle: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromDX9MediaSurfaceINTEL';
    private static function z_CreateFromDX9MediaSurfaceINTEL_2(context: cl_context; flags: MemFlags; var resource: IntPtr; sharedHandle: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromDX9MediaSurfaceINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromDX9MediaSurfaceINTEL(context: cl_context; flags: MemFlags; resource: array of IntPtr; sharedHandle: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem;
    type PIntPtr=^IntPtr;
    begin
      Result := if (resource<>nil) and (resource.Length<>0) then
        z_CreateFromDX9MediaSurfaceINTEL_2(context, flags, resource[0], sharedHandle, plane, errcode_ret) else
        z_CreateFromDX9MediaSurfaceINTEL_2(context, flags, PIntPtr(nil)^, sharedHandle, plane, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromDX9MediaSurfaceINTEL(context: cl_context; flags: MemFlags; var resource: IntPtr; sharedHandle: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromDX9MediaSurfaceINTEL_2(context, flags, resource, sharedHandle, plane, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromDX9MediaSurfaceINTEL(context: cl_context; flags: MemFlags; resource: pointer; sharedHandle: IntPtr; plane: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromDX9MediaSurfaceINTEL_1(context, flags, resource, sharedHandle, plane, errcode_ret);
    
    private static function z_EnqueueAcquireDX9ObjectsINTEL_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9ObjectsINTEL';
    private static function z_EnqueueAcquireDX9ObjectsINTEL_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9ObjectsINTEL';
    private static function z_EnqueueAcquireDX9ObjectsINTEL_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9ObjectsINTEL';
    private static function z_EnqueueAcquireDX9ObjectsINTEL_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9ObjectsINTEL';
    private static function z_EnqueueAcquireDX9ObjectsINTEL_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9ObjectsINTEL';
    private static function z_EnqueueAcquireDX9ObjectsINTEL_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9ObjectsINTEL';
    private static function z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9ObjectsINTEL';
    private static function z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireDX9ObjectsINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireDX9ObjectsINTEL_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireDX9ObjectsINTEL_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireDX9ObjectsINTEL_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireDX9ObjectsINTEL_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireDX9ObjectsINTEL_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireDX9ObjectsINTEL_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireDX9ObjectsINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireDX9ObjectsINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireDX9ObjectsINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireDX9ObjectsINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireDX9ObjectsINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireDX9ObjectsINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireDX9ObjectsINTEL_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireDX9ObjectsINTEL_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseDX9ObjectsINTEL_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9ObjectsINTEL';
    private static function z_EnqueueReleaseDX9ObjectsINTEL_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9ObjectsINTEL';
    private static function z_EnqueueReleaseDX9ObjectsINTEL_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9ObjectsINTEL';
    private static function z_EnqueueReleaseDX9ObjectsINTEL_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9ObjectsINTEL';
    private static function z_EnqueueReleaseDX9ObjectsINTEL_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9ObjectsINTEL';
    private static function z_EnqueueReleaseDX9ObjectsINTEL_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9ObjectsINTEL';
    private static function z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9ObjectsINTEL';
    private static function z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseDX9ObjectsINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseDX9ObjectsINTEL_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseDX9ObjectsINTEL_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseDX9ObjectsINTEL_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseDX9ObjectsINTEL_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseDX9ObjectsINTEL_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseDX9ObjectsINTEL_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseDX9ObjectsINTEL_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseDX9ObjectsINTEL_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseDX9ObjectsINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseDX9ObjectsINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseDX9ObjectsINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseDX9ObjectsINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseDX9ObjectsINTEL_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseDX9ObjectsINTEL_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseDX9ObjectsINTEL_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseDX9ObjectsINTEL(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseDX9ObjectsINTEL_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clGlSharingKHR = static class
    public const _ExtStr = 'cl_khr_gl_sharing';
    
    private static function z_GetGLContextInfoKHR_1(properties: IntPtr; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetGLContextInfoKHR';
    private static function z_GetGLContextInfoKHR_2(properties: IntPtr; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetGLContextInfoKHR';
    private static function z_GetGLContextInfoKHR_3(var properties: ContextProperties; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetGLContextInfoKHR';
    private static function z_GetGLContextInfoKHR_4(var properties: ContextProperties; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetGLContextInfoKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLContextInfoKHR(properties: array of ContextProperties; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    type PContextProperties=^ContextProperties;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_GetGLContextInfoKHR_4(properties[0], param_name, param_value_size, param_value, param_value_size_ret) else
        z_GetGLContextInfoKHR_4(PContextProperties(nil)^, param_name, param_value_size, param_value, param_value_size_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLContextInfoKHR(properties: array of ContextProperties; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    type PContextProperties=^ContextProperties;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_GetGLContextInfoKHR_3(properties[0], param_name, param_value_size, param_value, param_value_size_ret) else
        z_GetGLContextInfoKHR_3(PContextProperties(nil)^, param_name, param_value_size, param_value, param_value_size_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLContextInfoKHR(var properties: ContextProperties; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetGLContextInfoKHR_4(properties, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLContextInfoKHR(var properties: ContextProperties; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetGLContextInfoKHR_3(properties, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLContextInfoKHR(properties: IntPtr; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetGLContextInfoKHR_2(properties, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLContextInfoKHR(properties: IntPtr; param_name: GlContextInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetGLContextInfoKHR_1(properties, param_name, param_value_size, param_value, param_value_size_ret);
    
    private static function z_CreateFromGLBuffer_1(context: cl_context; flags: MemFlags; bufobj: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromGLBuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromGLBuffer(context: cl_context; flags: MemFlags; bufobj: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromGLBuffer_1(context, flags, bufobj, errcode_ret);
    
    private static function z_CreateFromGLTexture_1(context: cl_context; flags: MemFlags; target: UInt32; miplevel: Int32; texture: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromGLTexture';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromGLTexture(context: cl_context; flags: MemFlags; target: UInt32; miplevel: Int32; texture: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromGLTexture_1(context, flags, target, miplevel, texture, errcode_ret);
    
    private static function z_CreateFromGLRenderbuffer_1(context: cl_context; flags: MemFlags; renderbuffer: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromGLRenderbuffer';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromGLRenderbuffer(context: cl_context; flags: MemFlags; renderbuffer: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromGLRenderbuffer_1(context, flags, renderbuffer, errcode_ret);
    
    private static function z_GetGLObjectInfo_1(memobj: cl_mem; gl_object_type: IntPtr; gl_object_name: IntPtr): ErrorCode;
    external 'opencl' name 'clGetGLObjectInfo';
    private static function z_GetGLObjectInfo_2(memobj: cl_mem; gl_object_type: IntPtr; var gl_object_name: UInt32): ErrorCode;
    external 'opencl' name 'clGetGLObjectInfo';
    private static function z_GetGLObjectInfo_3(memobj: cl_mem; var gl_object_type: GlObjectType; gl_object_name: IntPtr): ErrorCode;
    external 'opencl' name 'clGetGLObjectInfo';
    private static function z_GetGLObjectInfo_4(memobj: cl_mem; var gl_object_type: GlObjectType; var gl_object_name: UInt32): ErrorCode;
    external 'opencl' name 'clGetGLObjectInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLObjectInfo(memobj: cl_mem; var gl_object_type: GlObjectType; var gl_object_name: UInt32): ErrorCode :=
    z_GetGLObjectInfo_4(memobj, gl_object_type, gl_object_name);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLObjectInfo(memobj: cl_mem; var gl_object_type: GlObjectType; gl_object_name: IntPtr): ErrorCode :=
    z_GetGLObjectInfo_3(memobj, gl_object_type, gl_object_name);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLObjectInfo(memobj: cl_mem; gl_object_type: IntPtr; var gl_object_name: UInt32): ErrorCode :=
    z_GetGLObjectInfo_2(memobj, gl_object_type, gl_object_name);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLObjectInfo(memobj: cl_mem; gl_object_type: IntPtr; gl_object_name: IntPtr): ErrorCode :=
    z_GetGLObjectInfo_1(memobj, gl_object_type, gl_object_name);
    
    private static function z_GetGLTextureInfo_1(memobj: cl_mem; param_name: GlTextureInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetGLTextureInfo';
    private static function z_GetGLTextureInfo_2(memobj: cl_mem; param_name: GlTextureInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetGLTextureInfo';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLTextureInfo(memobj: cl_mem; param_name: GlTextureInfo; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetGLTextureInfo_2(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetGLTextureInfo(memobj: cl_mem; param_name: GlTextureInfo; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetGLTextureInfo_1(memobj, param_name, param_value_size, param_value, param_value_size_ret);
    
    private static function z_EnqueueAcquireGLObjects_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGLObjects';
    private static function z_EnqueueAcquireGLObjects_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGLObjects';
    private static function z_EnqueueAcquireGLObjects_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGLObjects';
    private static function z_EnqueueAcquireGLObjects_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGLObjects';
    private static function z_EnqueueAcquireGLObjects_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGLObjects';
    private static function z_EnqueueAcquireGLObjects_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGLObjects';
    private static function z_EnqueueAcquireGLObjects_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGLObjects';
    private static function z_EnqueueAcquireGLObjects_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireGLObjects';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireGLObjects_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireGLObjects_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireGLObjects_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireGLObjects_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireGLObjects_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireGLObjects_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireGLObjects_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireGLObjects_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireGLObjects_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireGLObjects_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireGLObjects_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireGLObjects_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireGLObjects_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireGLObjects_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireGLObjects_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireGLObjects_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireGLObjects_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireGLObjects_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireGLObjects_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireGLObjects_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireGLObjects_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireGLObjects_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireGLObjects_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireGLObjects_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireGLObjects_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireGLObjects_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireGLObjects_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireGLObjects_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireGLObjects_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireGLObjects_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireGLObjects_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireGLObjects_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseGLObjects_1(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGLObjects';
    private static function z_EnqueueReleaseGLObjects_2(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGLObjects';
    private static function z_EnqueueReleaseGLObjects_3(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGLObjects';
    private static function z_EnqueueReleaseGLObjects_4(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGLObjects';
    private static function z_EnqueueReleaseGLObjects_5(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGLObjects';
    private static function z_EnqueueReleaseGLObjects_6(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGLObjects';
    private static function z_EnqueueReleaseGLObjects_7(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGLObjects';
    private static function z_EnqueueReleaseGLObjects_8(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseGLObjects';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseGLObjects_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseGLObjects_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseGLObjects_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseGLObjects_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseGLObjects_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseGLObjects_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseGLObjects_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseGLObjects_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseGLObjects_8(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseGLObjects_8(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseGLObjects_7(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseGLObjects_7(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseGLObjects_6(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseGLObjects_6(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseGLObjects_5(command_queue, num_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseGLObjects_5(command_queue, num_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseGLObjects_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseGLObjects_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseGLObjects_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseGLObjects_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseGLObjects_8(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseGLObjects_7(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseGLObjects_6(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseGLObjects_5(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseGLObjects_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseGLObjects_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseGLObjects_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseGLObjects_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseGLObjects_4(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseGLObjects_3(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseGLObjects_2(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseGLObjects(command_queue: cl_command_queue; num_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseGLObjects_1(command_queue, num_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_CreateFromGLTexture2D_1(context: cl_context; flags: MemFlags; target: UInt32; miplevel: Int32; texture: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromGLTexture2D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromGLTexture2D(context: cl_context; flags: MemFlags; target: UInt32; miplevel: Int32; texture: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromGLTexture2D_1(context, flags, target, miplevel, texture, errcode_ret);
    
    private static function z_CreateFromGLTexture3D_1(context: cl_context; flags: MemFlags; target: UInt32; miplevel: Int32; texture: UInt32; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateFromGLTexture3D';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateFromGLTexture3D(context: cl_context; flags: MemFlags; target: UInt32; miplevel: Int32; texture: UInt32; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateFromGLTexture3D_1(context, flags, target, miplevel, texture, errcode_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clUnifiedSharedMemoryINTEL = static class
    public const _ExtStr = 'cl_intel_unified_shared_memory';
    
    private static function z_HostMemAllocINTEL_1(context: cl_context; properties: IntPtr; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clHostMemAllocINTEL';
    private static function z_HostMemAllocINTEL_2(context: cl_context; var properties: MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clHostMemAllocINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function HostMemAllocINTEL(context: cl_context; properties: array of MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    type PMemPropertiesIntel=^MemPropertiesIntel;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_HostMemAllocINTEL_2(context, properties[0], size, alignment, errcode_ret) else
        z_HostMemAllocINTEL_2(context, PMemPropertiesIntel(nil)^, size, alignment, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function HostMemAllocINTEL(context: cl_context; var properties: MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr :=
    z_HostMemAllocINTEL_2(context, properties, size, alignment, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function HostMemAllocINTEL(context: cl_context; properties: IntPtr; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr :=
    z_HostMemAllocINTEL_1(context, properties, size, alignment, errcode_ret);
    
    private static function z_DeviceMemAllocINTEL_1(context: cl_context; device: cl_device_id; properties: IntPtr; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clDeviceMemAllocINTEL';
    private static function z_DeviceMemAllocINTEL_2(context: cl_context; device: cl_device_id; var properties: MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clDeviceMemAllocINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DeviceMemAllocINTEL(context: cl_context; device: cl_device_id; properties: array of MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    type PMemPropertiesIntel=^MemPropertiesIntel;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_DeviceMemAllocINTEL_2(context, device, properties[0], size, alignment, errcode_ret) else
        z_DeviceMemAllocINTEL_2(context, device, PMemPropertiesIntel(nil)^, size, alignment, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DeviceMemAllocINTEL(context: cl_context; device: cl_device_id; var properties: MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr :=
    z_DeviceMemAllocINTEL_2(context, device, properties, size, alignment, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function DeviceMemAllocINTEL(context: cl_context; device: cl_device_id; properties: IntPtr; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr :=
    z_DeviceMemAllocINTEL_1(context, device, properties, size, alignment, errcode_ret);
    
    private static function z_SharedMemAllocINTEL_1(context: cl_context; device: cl_device_id; properties: IntPtr; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clSharedMemAllocINTEL';
    private static function z_SharedMemAllocINTEL_2(context: cl_context; device: cl_device_id; var properties: MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    external 'opencl' name 'clSharedMemAllocINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SharedMemAllocINTEL(context: cl_context; device: cl_device_id; properties: array of MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr;
    type PMemPropertiesIntel=^MemPropertiesIntel;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_SharedMemAllocINTEL_2(context, device, properties[0], size, alignment, errcode_ret) else
        z_SharedMemAllocINTEL_2(context, device, PMemPropertiesIntel(nil)^, size, alignment, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SharedMemAllocINTEL(context: cl_context; device: cl_device_id; var properties: MemPropertiesIntel; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr :=
    z_SharedMemAllocINTEL_2(context, device, properties, size, alignment, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SharedMemAllocINTEL(context: cl_context; device: cl_device_id; properties: IntPtr; size: UIntPtr; alignment: UInt32; var errcode_ret: ErrorCode): IntPtr :=
    z_SharedMemAllocINTEL_1(context, device, properties, size, alignment, errcode_ret);
    
    private static function z_MemFreeINTEL_1(context: cl_context; ptr: IntPtr): ErrorCode;
    external 'opencl' name 'clMemFreeINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function MemFreeINTEL(context: cl_context; ptr: IntPtr): ErrorCode :=
    z_MemFreeINTEL_1(context, ptr);
    
    private static function z_MemBlockingFreeINTEL_1(context: cl_context; ptr: IntPtr): ErrorCode;
    external 'opencl' name 'clMemBlockingFreeINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function MemBlockingFreeINTEL(context: cl_context; ptr: IntPtr): ErrorCode :=
    z_MemBlockingFreeINTEL_1(context, ptr);
    
    private static function z_GetMemAllocInfoINTEL_1(context: cl_context; ptr: IntPtr; param_name: UInt32; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetMemAllocInfoINTEL';
    private static function z_GetMemAllocInfoINTEL_2(context: cl_context; ptr: IntPtr; param_name: UInt32; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetMemAllocInfoINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemAllocInfoINTEL(context: cl_context; ptr: IntPtr; param_name: UInt32; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetMemAllocInfoINTEL_2(context, ptr, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetMemAllocInfoINTEL(context: cl_context; ptr: IntPtr; param_name: UInt32; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetMemAllocInfoINTEL_1(context, ptr, param_name, param_value_size, param_value, param_value_size_ret);
    
    private static function z_SetKernelArgMemPointerINTEL_1(kernel: cl_kernel; arg_index: UInt32; arg_value: IntPtr): ErrorCode;
    external 'opencl' name 'clSetKernelArgMemPointerINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetKernelArgMemPointerINTEL(kernel: cl_kernel; arg_index: UInt32; arg_value: IntPtr): ErrorCode :=
    z_SetKernelArgMemPointerINTEL_1(kernel, arg_index, arg_value);
    
    private static function z_EnqueueMemFillINTEL_1(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMemFillINTEL';
    private static function z_EnqueueMemFillINTEL_2(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMemFillINTEL';
    private static function z_EnqueueMemFillINTEL_3(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMemFillINTEL';
    private static function z_EnqueueMemFillINTEL_4(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMemFillINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemFillINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMemFillINTEL_4(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMemFillINTEL_4(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemFillINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMemFillINTEL_3(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMemFillINTEL_3(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemFillINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMemFillINTEL_4(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemFillINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMemFillINTEL_3(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemFillINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMemFillINTEL_2(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemFillINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; pattern: IntPtr; pattern_size: UIntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMemFillINTEL_1(command_queue, dst_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueMemcpyINTEL_1(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMemcpyINTEL';
    private static function z_EnqueueMemcpyINTEL_2(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMemcpyINTEL';
    private static function z_EnqueueMemcpyINTEL_3(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMemcpyINTEL';
    private static function z_EnqueueMemcpyINTEL_4(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMemcpyINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemcpyINTEL(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMemcpyINTEL_4(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMemcpyINTEL_4(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemcpyINTEL(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMemcpyINTEL_3(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMemcpyINTEL_3(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemcpyINTEL(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMemcpyINTEL_4(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemcpyINTEL(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMemcpyINTEL_3(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemcpyINTEL(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMemcpyINTEL_2(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemcpyINTEL(command_queue: cl_command_queue; blocking: Bool; dst_ptr: IntPtr; src_ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMemcpyINTEL_1(command_queue, blocking, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueMemAdviseINTEL_1(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMemAdviseINTEL';
    private static function z_EnqueueMemAdviseINTEL_2(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMemAdviseINTEL';
    private static function z_EnqueueMemAdviseINTEL_3(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMemAdviseINTEL';
    private static function z_EnqueueMemAdviseINTEL_4(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMemAdviseINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemAdviseINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMemAdviseINTEL_4(command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMemAdviseINTEL_4(command_queue, ptr, size, advice, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemAdviseINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMemAdviseINTEL_3(command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMemAdviseINTEL_3(command_queue, ptr, size, advice, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemAdviseINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMemAdviseINTEL_4(command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemAdviseINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMemAdviseINTEL_3(command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemAdviseINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMemAdviseINTEL_2(command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemAdviseINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; advice: UInt32; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMemAdviseINTEL_1(command_queue, ptr, size, advice, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueMigrateMemINTEL_1(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemINTEL';
    private static function z_EnqueueMigrateMemINTEL_2(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemINTEL';
    private static function z_EnqueueMigrateMemINTEL_3(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemINTEL';
    private static function z_EnqueueMigrateMemINTEL_4(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMigrateMemINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemINTEL_4(command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemINTEL_4(command_queue, ptr, size, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMigrateMemINTEL_3(command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMigrateMemINTEL_3(command_queue, ptr, size, flags, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemINTEL_4(command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemINTEL_3(command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMigrateMemINTEL_2(command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMigrateMemINTEL(command_queue: cl_command_queue; ptr: IntPtr; size: UIntPtr; flags: MemMigrationFlags; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMigrateMemINTEL_1(command_queue, ptr, size, flags, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueMemsetINTEL_1(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMemsetINTEL';
    private static function z_EnqueueMemsetINTEL_2(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMemsetINTEL';
    private static function z_EnqueueMemsetINTEL_3(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueMemsetINTEL';
    private static function z_EnqueueMemsetINTEL_4(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueMemsetINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemsetINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMemsetINTEL_4(command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMemsetINTEL_4(command_queue, dst_ptr, value, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemsetINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueMemsetINTEL_3(command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueMemsetINTEL_3(command_queue, dst_ptr, value, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemsetINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueMemsetINTEL_4(command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemsetINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueMemsetINTEL_3(command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemsetINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueMemsetINTEL_2(command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueMemsetINTEL(command_queue: cl_command_queue; dst_ptr: IntPtr; value: Int32; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueMemsetINTEL_1(command_queue, dst_ptr, value, size, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clCreateBufferWithPropertiesINTEL = static class
    public const _ExtStr = 'cl_intel_create_buffer_with_properties';
    
    private static function z_CreateBufferWithPropertiesINTEL_1(context: cl_context; properties: IntPtr; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateBufferWithPropertiesINTEL';
    private static function z_CreateBufferWithPropertiesINTEL_2(context: cl_context; var properties: MemPropertiesIntel; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    external 'opencl' name 'clCreateBufferWithPropertiesINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBufferWithPropertiesINTEL(context: cl_context; properties: array of MemPropertiesIntel; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem;
    type PMemPropertiesIntel=^MemPropertiesIntel;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        z_CreateBufferWithPropertiesINTEL_2(context, properties[0], flags, size, host_ptr, errcode_ret) else
        z_CreateBufferWithPropertiesINTEL_2(context, PMemPropertiesIntel(nil)^, flags, size, host_ptr, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBufferWithPropertiesINTEL(context: cl_context; var properties: MemPropertiesIntel; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateBufferWithPropertiesINTEL_2(context, properties, flags, size, host_ptr, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateBufferWithPropertiesINTEL(context: cl_context; properties: IntPtr; flags: MemFlags; size: UIntPtr; host_ptr: IntPtr; var errcode_ret: ErrorCode): cl_mem :=
    z_CreateBufferWithPropertiesINTEL_1(context, properties, flags, size, host_ptr, errcode_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clGenerateMipmapIMG = static class
    public const _ExtStr = 'cl_img_generate_mipmap';
    
    private static function z_EnqueueGenerateMipmapIMG_1(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_2(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_3(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_4(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_5(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_6(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_7(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_8(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_9(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_10(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_11(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_12(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_13(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_14(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_15(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    private static function z_EnqueueGenerateMipmapIMG_16(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueGenerateMipmapIMG';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: array of UIntPtr; mip_region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mip_region<>nil) and (mip_region.Length<>0) then
          if (array_region<>nil) and (array_region.Length<>0) then
            z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], mip_region[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, mip_region[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (array_region<>nil) and (array_region.Length<>0) then
            z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mip_region<>nil) and (mip_region.Length<>0) then
          if (array_region<>nil) and (array_region.Length<>0) then
            z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], mip_region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, mip_region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (array_region<>nil) and (array_region.Length<>0) then
            z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: array of UIntPtr; mip_region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mip_region<>nil) and (mip_region.Length<>0) then
          if (array_region<>nil) and (array_region.Length<>0) then
            z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], mip_region[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, mip_region[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (array_region<>nil) and (array_region.Length<>0) then
            z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mip_region<>nil) and (mip_region.Length<>0) then
          if (array_region<>nil) and (array_region.Length<>0) then
            z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], mip_region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, mip_region[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (array_region<>nil) and (array_region.Length<>0) then
            z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: array of UIntPtr; mip_region: array of UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (mip_region<>nil) and (mip_region.Length<>0) then
        if (array_region<>nil) and (array_region.Length<>0) then
          z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], mip_region[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, mip_region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (array_region<>nil) and (array_region.Length<>0) then
          z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: array of UIntPtr; mip_region: array of UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (mip_region<>nil) and (mip_region.Length<>0) then
        if (array_region<>nil) and (array_region.Length<>0) then
          z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], mip_region[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, mip_region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (array_region<>nil) and (array_region.Length<>0) then
          z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: array of UIntPtr; mip_region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (mip_region<>nil) and (mip_region.Length<>0) then
        if (array_region<>nil) and (array_region.Length<>0) then
          z_EnqueueGenerateMipmapIMG_14(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], mip_region[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueGenerateMipmapIMG_14(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, mip_region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (array_region<>nil) and (array_region.Length<>0) then
          z_EnqueueGenerateMipmapIMG_14(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueGenerateMipmapIMG_14(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: array of UIntPtr; mip_region: array of UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (mip_region<>nil) and (mip_region.Length<>0) then
        if (array_region<>nil) and (array_region.Length<>0) then
          z_EnqueueGenerateMipmapIMG_13(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], mip_region[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueGenerateMipmapIMG_13(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, mip_region[0], num_events_in_wait_list, event_wait_list, &event) else
        if (array_region<>nil) and (array_region.Length<>0) then
          z_EnqueueGenerateMipmapIMG_13(command_queue, src_image, dst_image, mipmap_filter_mode, array_region[0], PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueGenerateMipmapIMG_13(command_queue, src_image, dst_image, mipmap_filter_mode, PUIntPtr(nil)^, PUIntPtr(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_16(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_15(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_14(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_13(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueGenerateMipmapIMG_12(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueGenerateMipmapIMG_12(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueGenerateMipmapIMG_11(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueGenerateMipmapIMG_11(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_12(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_11(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_10(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; var array_region: UIntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_9(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueGenerateMipmapIMG_8(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueGenerateMipmapIMG_8(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueGenerateMipmapIMG_7(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueGenerateMipmapIMG_7(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_8(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_7(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_6(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; var mip_region: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_5(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueGenerateMipmapIMG_4(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueGenerateMipmapIMG_4(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueGenerateMipmapIMG_3(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueGenerateMipmapIMG_3(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_4(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_3(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_2(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueGenerateMipmapIMG(command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; mipmap_filter_mode: MipmapFilterModeImg; array_region: IntPtr; mip_region: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueGenerateMipmapIMG_1(command_queue, src_image, dst_image, mipmap_filter_mode, array_region, mip_region, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSuggestedLocalWorkSizeKHR = static class
    public const _ExtStr = 'cl_khr_suggested_local_work_size';
    
    private static function z_GetKernelSuggestedLocalWorkSizeKHR_1(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; suggested_local_work_size: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSuggestedLocalWorkSizeKHR';
    private static function z_GetKernelSuggestedLocalWorkSizeKHR_2(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; var suggested_local_work_size: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSuggestedLocalWorkSizeKHR';
    private static function z_GetKernelSuggestedLocalWorkSizeKHR_3(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; suggested_local_work_size: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSuggestedLocalWorkSizeKHR';
    private static function z_GetKernelSuggestedLocalWorkSizeKHR_4(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var suggested_local_work_size: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSuggestedLocalWorkSizeKHR';
    private static function z_GetKernelSuggestedLocalWorkSizeKHR_5(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; global_work_size: IntPtr; suggested_local_work_size: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSuggestedLocalWorkSizeKHR';
    private static function z_GetKernelSuggestedLocalWorkSizeKHR_6(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; global_work_size: IntPtr; var suggested_local_work_size: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSuggestedLocalWorkSizeKHR';
    private static function z_GetKernelSuggestedLocalWorkSizeKHR_7(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; suggested_local_work_size: IntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSuggestedLocalWorkSizeKHR';
    private static function z_GetKernelSuggestedLocalWorkSizeKHR_8(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var suggested_local_work_size: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetKernelSuggestedLocalWorkSizeKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: array of UIntPtr; global_work_size: array of UIntPtr; var suggested_local_work_size: UIntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (global_work_size<>nil) and (global_work_size.Length<>0) then
        if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
          z_GetKernelSuggestedLocalWorkSizeKHR_8(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], suggested_local_work_size) else
          z_GetKernelSuggestedLocalWorkSizeKHR_8(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], suggested_local_work_size) else
        if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
          z_GetKernelSuggestedLocalWorkSizeKHR_8(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, suggested_local_work_size) else
          z_GetKernelSuggestedLocalWorkSizeKHR_8(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, suggested_local_work_size);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: array of UIntPtr; global_work_size: array of UIntPtr; suggested_local_work_size: IntPtr): ErrorCode;
    type PUIntPtr=^UIntPtr;
    begin
      Result := if (global_work_size<>nil) and (global_work_size.Length<>0) then
        if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
          z_GetKernelSuggestedLocalWorkSizeKHR_7(command_queue, kernel, work_dim, global_work_offset[0], global_work_size[0], suggested_local_work_size) else
          z_GetKernelSuggestedLocalWorkSizeKHR_7(command_queue, kernel, work_dim, PUIntPtr(nil)^, global_work_size[0], suggested_local_work_size) else
        if (global_work_offset<>nil) and (global_work_offset.Length<>0) then
          z_GetKernelSuggestedLocalWorkSizeKHR_7(command_queue, kernel, work_dim, global_work_offset[0], PUIntPtr(nil)^, suggested_local_work_size) else
          z_GetKernelSuggestedLocalWorkSizeKHR_7(command_queue, kernel, work_dim, PUIntPtr(nil)^, PUIntPtr(nil)^, suggested_local_work_size);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var suggested_local_work_size: UIntPtr): ErrorCode :=
    z_GetKernelSuggestedLocalWorkSizeKHR_8(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; suggested_local_work_size: IntPtr): ErrorCode :=
    z_GetKernelSuggestedLocalWorkSizeKHR_7(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; global_work_size: IntPtr; var suggested_local_work_size: UIntPtr): ErrorCode :=
    z_GetKernelSuggestedLocalWorkSizeKHR_6(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; global_work_size: IntPtr; suggested_local_work_size: IntPtr): ErrorCode :=
    z_GetKernelSuggestedLocalWorkSizeKHR_5(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; var suggested_local_work_size: UIntPtr): ErrorCode :=
    z_GetKernelSuggestedLocalWorkSizeKHR_4(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; var global_work_size: UIntPtr; suggested_local_work_size: IntPtr): ErrorCode :=
    z_GetKernelSuggestedLocalWorkSizeKHR_3(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; var suggested_local_work_size: UIntPtr): ErrorCode :=
    z_GetKernelSuggestedLocalWorkSizeKHR_2(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetKernelSuggestedLocalWorkSizeKHR(command_queue: cl_command_queue; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; suggested_local_work_size: IntPtr): ErrorCode :=
    z_GetKernelSuggestedLocalWorkSizeKHR_1(command_queue, kernel, work_dim, global_work_offset, global_work_size, suggested_local_work_size);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSemaphoreKHR = static class
    public const _ExtStr = 'cl_khr_semaphore';
    
    private static function z_CreateSemaphoreWithPropertiesKHR_1(context: cl_context; sema_props: IntPtr; var errcode_ret: ErrorCode): cl_semaphore;
    external 'opencl' name 'clCreateSemaphoreWithPropertiesKHR';
    private static function z_CreateSemaphoreWithPropertiesKHR_2(context: cl_context; var sema_props: SemaphorePropertiesKhr; var errcode_ret: ErrorCode): cl_semaphore;
    external 'opencl' name 'clCreateSemaphoreWithPropertiesKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSemaphoreWithPropertiesKHR(context: cl_context; sema_props: array of SemaphorePropertiesKhr; var errcode_ret: ErrorCode): cl_semaphore;
    type PSemaphorePropertiesKhr=^SemaphorePropertiesKhr;
    begin
      Result := if (sema_props<>nil) and (sema_props.Length<>0) then
        z_CreateSemaphoreWithPropertiesKHR_2(context, sema_props[0], errcode_ret) else
        z_CreateSemaphoreWithPropertiesKHR_2(context, PSemaphorePropertiesKhr(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSemaphoreWithPropertiesKHR(context: cl_context; var sema_props: SemaphorePropertiesKhr; var errcode_ret: ErrorCode): cl_semaphore :=
    z_CreateSemaphoreWithPropertiesKHR_2(context, sema_props, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateSemaphoreWithPropertiesKHR(context: cl_context; sema_props: IntPtr; var errcode_ret: ErrorCode): cl_semaphore :=
    z_CreateSemaphoreWithPropertiesKHR_1(context, sema_props, errcode_ret);
    
    private static function z_EnqueueWaitSemaphoresKHR_1(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_2(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_3(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_4(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_5(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_6(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_7(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_8(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_9(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_10(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_11(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_12(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_13(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_14(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_15(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    private static function z_EnqueueWaitSemaphoresKHR_16(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWaitSemaphoresKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    begin
      Result := if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    begin
      Result := if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    begin
      Result := if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueWaitSemaphoresKHR_14(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueWaitSemaphoresKHR_14(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueWaitSemaphoresKHR_14(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueWaitSemaphoresKHR_14(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    begin
      Result := if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueWaitSemaphoresKHR_13(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueWaitSemaphoresKHR_13(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueWaitSemaphoresKHR_13(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueWaitSemaphoresKHR_13(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_14(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_13(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWaitSemaphoresKHR_12(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWaitSemaphoresKHR_12(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWaitSemaphoresKHR_11(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWaitSemaphoresKHR_11(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_12(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_11(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_10(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_9(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWaitSemaphoresKHR_8(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWaitSemaphoresKHR_8(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWaitSemaphoresKHR_7(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWaitSemaphoresKHR_7(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_8(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_7(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_6(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_5(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWaitSemaphoresKHR_4(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWaitSemaphoresKHR_4(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWaitSemaphoresKHR_3(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWaitSemaphoresKHR_3(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_4(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_3(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_2(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWaitSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueWaitSemaphoresKHR_1(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueSignalSemaphoresKHR_1(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_2(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_3(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_4(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_5(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_6(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_7(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_8(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_9(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_10(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_11(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_12(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_13(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_14(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_15(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    private static function z_EnqueueSignalSemaphoresKHR_16(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueSignalSemaphoresKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list[0], &event) else
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
            z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          if (sema_objects<>nil) and (sema_objects.Length<>0) then
            z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event) else
            z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    begin
      Result := if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    begin
      Result := if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    begin
      Result := if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueSignalSemaphoresKHR_14(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSignalSemaphoresKHR_14(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueSignalSemaphoresKHR_14(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSignalSemaphoresKHR_14(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: array of cl_semaphore; sema_payload_list: array of UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_semaphore=^cl_semaphore;
    type PUInt64=^UInt64;
    begin
      Result := if (sema_payload_list<>nil) and (sema_payload_list.Length<>0) then
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueSignalSemaphoresKHR_13(command_queue, num_sema_objects, sema_objects[0], sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSignalSemaphoresKHR_13(command_queue, num_sema_objects, Pcl_semaphore(nil)^, sema_payload_list[0], num_events_in_wait_list, event_wait_list, &event) else
        if (sema_objects<>nil) and (sema_objects.Length<>0) then
          z_EnqueueSignalSemaphoresKHR_13(command_queue, num_sema_objects, sema_objects[0], PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event) else
          z_EnqueueSignalSemaphoresKHR_13(command_queue, num_sema_objects, Pcl_semaphore(nil)^, PUInt64(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_16(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_15(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_14(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_13(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSignalSemaphoresKHR_12(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSignalSemaphoresKHR_12(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSignalSemaphoresKHR_11(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSignalSemaphoresKHR_11(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_12(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_11(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_10(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; var sema_objects: cl_semaphore; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_9(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSignalSemaphoresKHR_8(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSignalSemaphoresKHR_8(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSignalSemaphoresKHR_7(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSignalSemaphoresKHR_7(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_8(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_7(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_6(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; var sema_payload_list: UInt64; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_5(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSignalSemaphoresKHR_4(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSignalSemaphoresKHR_4(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueSignalSemaphoresKHR_3(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueSignalSemaphoresKHR_3(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_4(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_3(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_2(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueSignalSemaphoresKHR(command_queue: cl_command_queue; num_sema_objects: UInt32; sema_objects: IntPtr; sema_payload_list: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueSignalSemaphoresKHR_1(command_queue, num_sema_objects, sema_objects, sema_payload_list, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_GetSemaphoreInfoKHR_1(sema_object: cl_semaphore; param_name: SemaphoreInfoKhr; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSemaphoreInfoKHR';
    private static function z_GetSemaphoreInfoKHR_2(sema_object: cl_semaphore; param_name: SemaphoreInfoKhr; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetSemaphoreInfoKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSemaphoreInfoKHR(sema_object: cl_semaphore; param_name: SemaphoreInfoKhr; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetSemaphoreInfoKHR_2(sema_object, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSemaphoreInfoKHR(sema_object: cl_semaphore; param_name: SemaphoreInfoKhr; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetSemaphoreInfoKHR_1(sema_object, param_name, param_value_size, param_value, param_value_size_ret);
    
    private static function z_ReleaseSemaphoreKHR_1(sema_object: cl_semaphore): ErrorCode;
    external 'opencl' name 'clReleaseSemaphoreKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseSemaphoreKHR(sema_object: cl_semaphore): ErrorCode :=
    z_ReleaseSemaphoreKHR_1(sema_object);
    
    private static function z_RetainSemaphoreKHR_1(sema_object: cl_semaphore): ErrorCode;
    external 'opencl' name 'clRetainSemaphoreKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainSemaphoreKHR(sema_object: cl_semaphore): ErrorCode :=
    z_RetainSemaphoreKHR_1(sema_object);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clExternalSemaphoreKHR = static class
    public const _ExtStr = 'cl_khr_external_semaphore';
    
    private static function z_GetSemaphoreHandleForTypeKHR_1(sema_object: cl_semaphore; device: cl_device_id; handle_type: ExternalSemaphoreHandleTypeKhr; handle_size: UIntPtr; handle_ptr: IntPtr; handle_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSemaphoreHandleForTypeKHR';
    private static function z_GetSemaphoreHandleForTypeKHR_2(sema_object: cl_semaphore; device: cl_device_id; handle_type: ExternalSemaphoreHandleTypeKhr; handle_size: UIntPtr; handle_ptr: IntPtr; var handle_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetSemaphoreHandleForTypeKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSemaphoreHandleForTypeKHR(sema_object: cl_semaphore; device: cl_device_id; handle_type: ExternalSemaphoreHandleTypeKhr; handle_size: UIntPtr; handle_ptr: IntPtr; var handle_size_ret: UIntPtr): ErrorCode :=
    z_GetSemaphoreHandleForTypeKHR_2(sema_object, device, handle_type, handle_size, handle_ptr, handle_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSemaphoreHandleForTypeKHR(sema_object: cl_semaphore; device: cl_device_id; handle_type: ExternalSemaphoreHandleTypeKhr; handle_size: UIntPtr; handle_ptr: IntPtr; handle_size_ret: IntPtr): ErrorCode :=
    z_GetSemaphoreHandleForTypeKHR_1(sema_object, device, handle_type, handle_size, handle_ptr, handle_size_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clExternalMemoryKHR = static class
    public const _ExtStr = 'cl_khr_external_memory';
    
    private static function z_EnqueueAcquireExternalMemObjectsKHR_1(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireExternalMemObjectsKHR';
    private static function z_EnqueueAcquireExternalMemObjectsKHR_2(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireExternalMemObjectsKHR';
    private static function z_EnqueueAcquireExternalMemObjectsKHR_3(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireExternalMemObjectsKHR';
    private static function z_EnqueueAcquireExternalMemObjectsKHR_4(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireExternalMemObjectsKHR';
    private static function z_EnqueueAcquireExternalMemObjectsKHR_5(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireExternalMemObjectsKHR';
    private static function z_EnqueueAcquireExternalMemObjectsKHR_6(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireExternalMemObjectsKHR';
    private static function z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireExternalMemObjectsKHR';
    private static function z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueAcquireExternalMemObjectsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireExternalMemObjectsKHR_6(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireExternalMemObjectsKHR_6(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueAcquireExternalMemObjectsKHR_5(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueAcquireExternalMemObjectsKHR_5(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireExternalMemObjectsKHR_6(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireExternalMemObjectsKHR_5(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireExternalMemObjectsKHR_4(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireExternalMemObjectsKHR_4(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueAcquireExternalMemObjectsKHR_3(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueAcquireExternalMemObjectsKHR_3(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireExternalMemObjectsKHR_4(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireExternalMemObjectsKHR_3(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueAcquireExternalMemObjectsKHR_2(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueAcquireExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueAcquireExternalMemObjectsKHR_1(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueReleaseExternalMemObjectsKHR_1(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseExternalMemObjectsKHR';
    private static function z_EnqueueReleaseExternalMemObjectsKHR_2(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseExternalMemObjectsKHR';
    private static function z_EnqueueReleaseExternalMemObjectsKHR_3(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseExternalMemObjectsKHR';
    private static function z_EnqueueReleaseExternalMemObjectsKHR_4(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseExternalMemObjectsKHR';
    private static function z_EnqueueReleaseExternalMemObjectsKHR_5(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseExternalMemObjectsKHR';
    private static function z_EnqueueReleaseExternalMemObjectsKHR_6(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseExternalMemObjectsKHR';
    private static function z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseExternalMemObjectsKHR';
    private static function z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReleaseExternalMemObjectsKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list[0], &event) else
        if (mem_objects<>nil) and (mem_objects.Length<>0) then
          z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseExternalMemObjectsKHR_6(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseExternalMemObjectsKHR_6(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: array of cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_mem=^cl_mem;
    begin
      Result := if (mem_objects<>nil) and (mem_objects.Length<>0) then
        z_EnqueueReleaseExternalMemObjectsKHR_5(command_queue, num_mem_objects, mem_objects[0], num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueReleaseExternalMemObjectsKHR_5(command_queue, num_mem_objects, Pcl_mem(nil)^, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseExternalMemObjectsKHR_8(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseExternalMemObjectsKHR_7(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseExternalMemObjectsKHR_6(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; var mem_objects: cl_mem; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseExternalMemObjectsKHR_5(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseExternalMemObjectsKHR_4(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseExternalMemObjectsKHR_4(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReleaseExternalMemObjectsKHR_3(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReleaseExternalMemObjectsKHR_3(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseExternalMemObjectsKHR_4(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseExternalMemObjectsKHR_3(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReleaseExternalMemObjectsKHR_2(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReleaseExternalMemObjectsKHR(command_queue: cl_command_queue; num_mem_objects: UInt32; mem_objects: IntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReleaseExternalMemObjectsKHR_1(command_queue, num_mem_objects, mem_objects, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSharingFormatQueryGlINTEL = static class
    public const _ExtStr = 'cl_intel_sharing_format_query_gl';
    
    private static function z_GetSupportedGLTextureFormatsINTEL_1(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; gl_formats: IntPtr; num_texture_formats: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSupportedGLTextureFormatsINTEL';
    private static function z_GetSupportedGLTextureFormatsINTEL_2(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; gl_formats: IntPtr; var num_texture_formats: UInt32): ErrorCode;
    external 'opencl' name 'clGetSupportedGLTextureFormatsINTEL';
    private static function z_GetSupportedGLTextureFormatsINTEL_3(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; var gl_formats: UInt32; num_texture_formats: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSupportedGLTextureFormatsINTEL';
    private static function z_GetSupportedGLTextureFormatsINTEL_4(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; var gl_formats: UInt32; var num_texture_formats: UInt32): ErrorCode;
    external 'opencl' name 'clGetSupportedGLTextureFormatsINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedGLTextureFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; var gl_formats: UInt32; var num_texture_formats: UInt32): ErrorCode :=
    z_GetSupportedGLTextureFormatsINTEL_4(context, flags, image_type, num_entries, gl_formats, num_texture_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedGLTextureFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; var gl_formats: UInt32; num_texture_formats: IntPtr): ErrorCode :=
    z_GetSupportedGLTextureFormatsINTEL_3(context, flags, image_type, num_entries, gl_formats, num_texture_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedGLTextureFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; gl_formats: IntPtr; var num_texture_formats: UInt32): ErrorCode :=
    z_GetSupportedGLTextureFormatsINTEL_2(context, flags, image_type, num_entries, gl_formats, num_texture_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedGLTextureFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; gl_formats: IntPtr; num_texture_formats: IntPtr): ErrorCode :=
    z_GetSupportedGLTextureFormatsINTEL_1(context, flags, image_type, num_entries, gl_formats, num_texture_formats);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSharingFormatQueryDx9INTEL = static class
    public const _ExtStr = 'cl_intel_sharing_format_query_dx9';
    
    private static function z_GetSupportedDX9MediaSurfaceFormatsINTEL_1(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; dx9_formats: IntPtr; num_surface_formats: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSupportedDX9MediaSurfaceFormatsINTEL';
    private static function z_GetSupportedDX9MediaSurfaceFormatsINTEL_2(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; dx9_formats: IntPtr; var num_surface_formats: UInt32): ErrorCode;
    external 'opencl' name 'clGetSupportedDX9MediaSurfaceFormatsINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedDX9MediaSurfaceFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; dx9_formats: IntPtr; var num_surface_formats: UInt32): ErrorCode :=
    z_GetSupportedDX9MediaSurfaceFormatsINTEL_2(context, flags, image_type, plane, num_entries, dx9_formats, num_surface_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedDX9MediaSurfaceFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; dx9_formats: IntPtr; num_surface_formats: IntPtr): ErrorCode :=
    z_GetSupportedDX9MediaSurfaceFormatsINTEL_1(context, flags, image_type, plane, num_entries, dx9_formats, num_surface_formats);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSharingFormatQueryD3d10INTEL = static class
    public const _ExtStr = 'cl_intel_sharing_format_query_d3d10';
    
    private static function z_GetSupportedD3D10TextureFormatsINTEL_1(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; d3d10_formats: IntPtr; num_texture_formats: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSupportedD3D10TextureFormatsINTEL';
    private static function z_GetSupportedD3D10TextureFormatsINTEL_2(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; d3d10_formats: IntPtr; var num_texture_formats: UInt32): ErrorCode;
    external 'opencl' name 'clGetSupportedD3D10TextureFormatsINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedD3D10TextureFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; d3d10_formats: IntPtr; var num_texture_formats: UInt32): ErrorCode :=
    z_GetSupportedD3D10TextureFormatsINTEL_2(context, flags, image_type, num_entries, d3d10_formats, num_texture_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedD3D10TextureFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; num_entries: UInt32; d3d10_formats: IntPtr; num_texture_formats: IntPtr): ErrorCode :=
    z_GetSupportedD3D10TextureFormatsINTEL_1(context, flags, image_type, num_entries, d3d10_formats, num_texture_formats);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSharingFormatQueryD3d11INTEL = static class
    public const _ExtStr = 'cl_intel_sharing_format_query_d3d11';
    
    private static function z_GetSupportedD3D11TextureFormatsINTEL_1(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; d3d11_formats: IntPtr; num_texture_formats: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSupportedD3D11TextureFormatsINTEL';
    private static function z_GetSupportedD3D11TextureFormatsINTEL_2(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; d3d11_formats: IntPtr; var num_texture_formats: UInt32): ErrorCode;
    external 'opencl' name 'clGetSupportedD3D11TextureFormatsINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedD3D11TextureFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; d3d11_formats: IntPtr; var num_texture_formats: UInt32): ErrorCode :=
    z_GetSupportedD3D11TextureFormatsINTEL_2(context, flags, image_type, plane, num_entries, d3d11_formats, num_texture_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedD3D11TextureFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; d3d11_formats: IntPtr; num_texture_formats: IntPtr): ErrorCode :=
    z_GetSupportedD3D11TextureFormatsINTEL_1(context, flags, image_type, plane, num_entries, d3d11_formats, num_texture_formats);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clSharingFormatQueryVaApiINTEL = static class
    public const _ExtStr = 'cl_intel_sharing_format_query_va_api';
    
    private static function z_GetSupportedVA_APIMediaSurfaceFormatsINTEL_1(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; va_api_formats: IntPtr; num_surface_formats: IntPtr): ErrorCode;
    external 'opencl' name 'clGetSupportedVA_APIMediaSurfaceFormatsINTEL';
    private static function z_GetSupportedVA_APIMediaSurfaceFormatsINTEL_2(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; va_api_formats: IntPtr; var num_surface_formats: UInt32): ErrorCode;
    external 'opencl' name 'clGetSupportedVA_APIMediaSurfaceFormatsINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedVA_APIMediaSurfaceFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; va_api_formats: IntPtr; var num_surface_formats: UInt32): ErrorCode :=
    z_GetSupportedVA_APIMediaSurfaceFormatsINTEL_2(context, flags, image_type, plane, num_entries, va_api_formats, num_surface_formats);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetSupportedVA_APIMediaSurfaceFormatsINTEL(context: cl_context; flags: MemFlags; image_type: MemObjectType; plane: UInt32; num_entries: UInt32; va_api_formats: IntPtr; num_surface_formats: IntPtr): ErrorCode :=
    z_GetSupportedVA_APIMediaSurfaceFormatsINTEL_1(context, flags, image_type, plane, num_entries, va_api_formats, num_surface_formats);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clContentSizePOCL = static class
    public const _ExtStr = 'cl_pocl_content_size';
    
    private static function z_SetContentSizeBufferPoCL_1(buffer: cl_mem; content_size_buffer: cl_mem): ErrorCode;
    external 'opencl' name 'clSetContentSizeBufferPoCL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function SetContentSizeBufferPoCL(buffer: cl_mem; content_size_buffer: cl_mem): ErrorCode :=
    z_SetContentSizeBufferPoCL_1(buffer, content_size_buffer);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clCommandBufferKHR = static class
    public const _ExtStr = 'cl_khr_command_buffer';
    
    private static function z_CreateCommandBufferKHR_1(num_queues: UInt32; queues: IntPtr; properties: IntPtr; var errcode_ret: ErrorCode): cl_command_buffer;
    external 'opencl' name 'clCreateCommandBufferKHR';
    private static function z_CreateCommandBufferKHR_2(num_queues: UInt32; queues: IntPtr; var properties: CommandBufferPropertiesKhr; var errcode_ret: ErrorCode): cl_command_buffer;
    external 'opencl' name 'clCreateCommandBufferKHR';
    private static function z_CreateCommandBufferKHR_3(num_queues: UInt32; var queues: cl_command_queue; properties: IntPtr; var errcode_ret: ErrorCode): cl_command_buffer;
    external 'opencl' name 'clCreateCommandBufferKHR';
    private static function z_CreateCommandBufferKHR_4(num_queues: UInt32; var queues: cl_command_queue; var properties: CommandBufferPropertiesKhr; var errcode_ret: ErrorCode): cl_command_buffer;
    external 'opencl' name 'clCreateCommandBufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandBufferKHR(num_queues: UInt32; queues: array of cl_command_queue; properties: array of CommandBufferPropertiesKhr; var errcode_ret: ErrorCode): cl_command_buffer;
    type Pcl_command_queue=^cl_command_queue;
    type PCommandBufferPropertiesKhr=^CommandBufferPropertiesKhr;
    begin
      Result := if (properties<>nil) and (properties.Length<>0) then
        if (queues<>nil) and (queues.Length<>0) then
          z_CreateCommandBufferKHR_4(num_queues, queues[0], properties[0], errcode_ret) else
          z_CreateCommandBufferKHR_4(num_queues, Pcl_command_queue(nil)^, properties[0], errcode_ret) else
        if (queues<>nil) and (queues.Length<>0) then
          z_CreateCommandBufferKHR_4(num_queues, queues[0], PCommandBufferPropertiesKhr(nil)^, errcode_ret) else
          z_CreateCommandBufferKHR_4(num_queues, Pcl_command_queue(nil)^, PCommandBufferPropertiesKhr(nil)^, errcode_ret);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandBufferKHR(num_queues: UInt32; var queues: cl_command_queue; var properties: CommandBufferPropertiesKhr; var errcode_ret: ErrorCode): cl_command_buffer :=
    z_CreateCommandBufferKHR_4(num_queues, queues, properties, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandBufferKHR(num_queues: UInt32; var queues: cl_command_queue; properties: IntPtr; var errcode_ret: ErrorCode): cl_command_buffer :=
    z_CreateCommandBufferKHR_3(num_queues, queues, properties, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandBufferKHR(num_queues: UInt32; queues: IntPtr; var properties: CommandBufferPropertiesKhr; var errcode_ret: ErrorCode): cl_command_buffer :=
    z_CreateCommandBufferKHR_2(num_queues, queues, properties, errcode_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CreateCommandBufferKHR(num_queues: UInt32; queues: IntPtr; properties: IntPtr; var errcode_ret: ErrorCode): cl_command_buffer :=
    z_CreateCommandBufferKHR_1(num_queues, queues, properties, errcode_ret);
    
    private static function z_FinalizeCommandBufferKHR_1(command_buffer: cl_command_buffer): ErrorCode;
    external 'opencl' name 'clFinalizeCommandBufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function FinalizeCommandBufferKHR(command_buffer: cl_command_buffer): ErrorCode :=
    z_FinalizeCommandBufferKHR_1(command_buffer);
    
    private static function z_RetainCommandBufferKHR_1(command_buffer: cl_command_buffer): ErrorCode;
    external 'opencl' name 'clRetainCommandBufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function RetainCommandBufferKHR(command_buffer: cl_command_buffer): ErrorCode :=
    z_RetainCommandBufferKHR_1(command_buffer);
    
    private static function z_ReleaseCommandBufferKHR_1(command_buffer: cl_command_buffer): ErrorCode;
    external 'opencl' name 'clReleaseCommandBufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function ReleaseCommandBufferKHR(command_buffer: cl_command_buffer): ErrorCode :=
    z_ReleaseCommandBufferKHR_1(command_buffer);
    
    private static function z_EnqueueCommandBufferKHR_1(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCommandBufferKHR';
    private static function z_EnqueueCommandBufferKHR_2(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCommandBufferKHR';
    private static function z_EnqueueCommandBufferKHR_3(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCommandBufferKHR';
    private static function z_EnqueueCommandBufferKHR_4(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCommandBufferKHR';
    private static function z_EnqueueCommandBufferKHR_5(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCommandBufferKHR';
    private static function z_EnqueueCommandBufferKHR_6(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCommandBufferKHR';
    private static function z_EnqueueCommandBufferKHR_7(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueCommandBufferKHR';
    private static function z_EnqueueCommandBufferKHR_8(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueCommandBufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: array of cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_command_queue=^cl_command_queue;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (queues<>nil) and (queues.Length<>0) then
          z_EnqueueCommandBufferKHR_8(num_queues, queues[0], command_buffer, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueCommandBufferKHR_8(num_queues, Pcl_command_queue(nil)^, command_buffer, num_events_in_wait_list, event_wait_list[0], &event) else
        if (queues<>nil) and (queues.Length<>0) then
          z_EnqueueCommandBufferKHR_8(num_queues, queues[0], command_buffer, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueCommandBufferKHR_8(num_queues, Pcl_command_queue(nil)^, command_buffer, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: array of cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_command_queue=^cl_command_queue;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        if (queues<>nil) and (queues.Length<>0) then
          z_EnqueueCommandBufferKHR_7(num_queues, queues[0], command_buffer, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueCommandBufferKHR_7(num_queues, Pcl_command_queue(nil)^, command_buffer, num_events_in_wait_list, event_wait_list[0], &event) else
        if (queues<>nil) and (queues.Length<>0) then
          z_EnqueueCommandBufferKHR_7(num_queues, queues[0], command_buffer, num_events_in_wait_list, Pcl_event(nil)^, &event) else
          z_EnqueueCommandBufferKHR_7(num_queues, Pcl_command_queue(nil)^, command_buffer, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: array of cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    type Pcl_command_queue=^cl_command_queue;
    begin
      Result := if (queues<>nil) and (queues.Length<>0) then
        z_EnqueueCommandBufferKHR_8(num_queues, queues[0], command_buffer, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueCommandBufferKHR_8(num_queues, Pcl_command_queue(nil)^, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: array of cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    type Pcl_command_queue=^cl_command_queue;
    begin
      Result := if (queues<>nil) and (queues.Length<>0) then
        z_EnqueueCommandBufferKHR_7(num_queues, queues[0], command_buffer, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueCommandBufferKHR_7(num_queues, Pcl_command_queue(nil)^, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: array of cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    type Pcl_command_queue=^cl_command_queue;
    begin
      Result := if (queues<>nil) and (queues.Length<>0) then
        z_EnqueueCommandBufferKHR_6(num_queues, queues[0], command_buffer, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueCommandBufferKHR_6(num_queues, Pcl_command_queue(nil)^, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: array of cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    type Pcl_command_queue=^cl_command_queue;
    begin
      Result := if (queues<>nil) and (queues.Length<>0) then
        z_EnqueueCommandBufferKHR_5(num_queues, queues[0], command_buffer, num_events_in_wait_list, event_wait_list, &event) else
        z_EnqueueCommandBufferKHR_5(num_queues, Pcl_command_queue(nil)^, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCommandBufferKHR_8(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCommandBufferKHR_8(num_queues, queues, command_buffer, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCommandBufferKHR_7(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCommandBufferKHR_7(num_queues, queues, command_buffer, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueCommandBufferKHR_8(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueCommandBufferKHR_7(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueCommandBufferKHR_6(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; var queues: cl_command_queue; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueCommandBufferKHR_5(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCommandBufferKHR_4(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCommandBufferKHR_4(num_queues, queues, command_buffer, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueCommandBufferKHR_3(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueCommandBufferKHR_3(num_queues, queues, command_buffer, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueCommandBufferKHR_4(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueCommandBufferKHR_3(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueCommandBufferKHR_2(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueCommandBufferKHR(num_queues: UInt32; queues: IntPtr; command_buffer: cl_command_buffer; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueCommandBufferKHR_1(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_CommandBarrierWithWaitListKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandBarrierWithWaitListKHR';
    private static function z_CommandBarrierWithWaitListKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandBarrierWithWaitListKHR';
    private static function z_CommandBarrierWithWaitListKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandBarrierWithWaitListKHR';
    private static function z_CommandBarrierWithWaitListKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandBarrierWithWaitListKHR';
    private static function z_CommandBarrierWithWaitListKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandBarrierWithWaitListKHR';
    private static function z_CommandBarrierWithWaitListKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandBarrierWithWaitListKHR';
    private static function z_CommandBarrierWithWaitListKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandBarrierWithWaitListKHR';
    private static function z_CommandBarrierWithWaitListKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandBarrierWithWaitListKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: array of UInt32; sync_point: array of UInt32; mutable_handle: array of cl_mutable_command): ErrorCode;
    type PUInt32=^UInt32;
    type Pcl_mutable_command=^cl_mutable_command;
    begin
      Result := if (mutable_handle<>nil) and (mutable_handle.Length<>0) then
        if (sync_point<>nil) and (sync_point.Length<>0) then
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list[0], sync_point[0], mutable_handle[0]) else
            z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, PUInt32(nil)^, sync_point[0], mutable_handle[0]) else
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list[0], PUInt32(nil)^, mutable_handle[0]) else
            z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, PUInt32(nil)^, PUInt32(nil)^, mutable_handle[0]) else
        if (sync_point<>nil) and (sync_point.Length<>0) then
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list[0], sync_point[0], Pcl_mutable_command(nil)^) else
            z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, PUInt32(nil)^, sync_point[0], Pcl_mutable_command(nil)^) else
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list[0], PUInt32(nil)^, Pcl_mutable_command(nil)^) else
            z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, PUInt32(nil)^, PUInt32(nil)^, Pcl_mutable_command(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandBarrierWithWaitListKHR_8(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandBarrierWithWaitListKHR_7(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandBarrierWithWaitListKHR_6(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode :=
    z_CommandBarrierWithWaitListKHR_5(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandBarrierWithWaitListKHR_4(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandBarrierWithWaitListKHR_3(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandBarrierWithWaitListKHR_2(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandBarrierWithWaitListKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode :=
    z_CommandBarrierWithWaitListKHR_1(command_buffer, command_queue, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_CommandCopyBufferKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferKHR';
    private static function z_CommandCopyBufferKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferKHR';
    private static function z_CommandCopyBufferKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferKHR';
    private static function z_CommandCopyBufferKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferKHR';
    private static function z_CommandCopyBufferKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferKHR';
    private static function z_CommandCopyBufferKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferKHR';
    private static function z_CommandCopyBufferKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferKHR';
    private static function z_CommandCopyBufferKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: array of UInt32; sync_point: array of UInt32; mutable_handle: array of cl_mutable_command): ErrorCode;
    type PUInt32=^UInt32;
    type Pcl_mutable_command=^cl_mutable_command;
    begin
      Result := if (mutable_handle<>nil) and (mutable_handle.Length<>0) then
        if (sync_point<>nil) and (sync_point.Length<>0) then
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list[0], sync_point[0], mutable_handle[0]) else
            z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, PUInt32(nil)^, sync_point[0], mutable_handle[0]) else
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list[0], PUInt32(nil)^, mutable_handle[0]) else
            z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, PUInt32(nil)^, PUInt32(nil)^, mutable_handle[0]) else
        if (sync_point<>nil) and (sync_point.Length<>0) then
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list[0], sync_point[0], Pcl_mutable_command(nil)^) else
            z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, PUInt32(nil)^, sync_point[0], Pcl_mutable_command(nil)^) else
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list[0], PUInt32(nil)^, Pcl_mutable_command(nil)^) else
            z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, PUInt32(nil)^, PUInt32(nil)^, Pcl_mutable_command(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferKHR_7(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferKHR_6(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferKHR_5(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferKHR_4(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferKHR_3(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferKHR_2(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_offset: UIntPtr; dst_offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferKHR_1(command_buffer, command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_CommandCopyBufferRectKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferRectKHR';
    private static function z_CommandCopyBufferRectKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferRectKHR';
    private static function z_CommandCopyBufferRectKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferRectKHR';
    private static function z_CommandCopyBufferRectKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferRectKHR';
    private static function z_CommandCopyBufferRectKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferRectKHR';
    private static function z_CommandCopyBufferRectKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferRectKHR';
    private static function z_CommandCopyBufferRectKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferRectKHR';
    private static function z_CommandCopyBufferRectKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferRectKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferRectKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferRectKHR_8(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferRectKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferRectKHR_7(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferRectKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferRectKHR_6(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferRectKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferRectKHR_5(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferRectKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferRectKHR_4(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferRectKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferRectKHR_3(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferRectKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferRectKHR_2(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferRectKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; src_row_pitch: UIntPtr; src_slice_pitch: UIntPtr; dst_row_pitch: UIntPtr; dst_slice_pitch: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferRectKHR_1(command_buffer, command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_CommandCopyBufferToImageKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferToImageKHR';
    private static function z_CommandCopyBufferToImageKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferToImageKHR';
    private static function z_CommandCopyBufferToImageKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferToImageKHR';
    private static function z_CommandCopyBufferToImageKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferToImageKHR';
    private static function z_CommandCopyBufferToImageKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferToImageKHR';
    private static function z_CommandCopyBufferToImageKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferToImageKHR';
    private static function z_CommandCopyBufferToImageKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferToImageKHR';
    private static function z_CommandCopyBufferToImageKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyBufferToImageKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferToImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferToImageKHR_8(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferToImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferToImageKHR_7(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferToImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferToImageKHR_6(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferToImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferToImageKHR_5(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferToImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferToImageKHR_4(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferToImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferToImageKHR_3(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferToImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyBufferToImageKHR_2(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyBufferToImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_buffer: cl_mem; dst_image: cl_mem; src_offset: UIntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyBufferToImageKHR_1(command_buffer, command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_CommandCopyImageKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyImageKHR';
    private static function z_CommandCopyImageKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyImageKHR';
    private static function z_CommandCopyImageKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyImageKHR';
    private static function z_CommandCopyImageKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyImageKHR';
    private static function z_CommandCopyImageKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyImageKHR';
    private static function z_CommandCopyImageKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyImageKHR';
    private static function z_CommandCopyImageKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyImageKHR';
    private static function z_CommandCopyImageKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyImageKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyImageKHR_8(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyImageKHR_7(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyImageKHR_6(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; var src_origin: UIntPtr; var dst_origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyImageKHR_5(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyImageKHR_4(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyImageKHR_3(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyImageKHR_2(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_image: cl_mem; src_origin: IntPtr; dst_origin: IntPtr; region: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyImageKHR_1(command_buffer, command_queue, src_image, dst_image, src_origin, dst_origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_CommandCopyImageToBufferKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; region: IntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyImageToBufferKHR';
    private static function z_CommandCopyImageToBufferKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; region: IntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyImageToBufferKHR';
    private static function z_CommandCopyImageToBufferKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; region: IntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyImageToBufferKHR';
    private static function z_CommandCopyImageToBufferKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; region: IntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyImageToBufferKHR';
    private static function z_CommandCopyImageToBufferKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyImageToBufferKHR';
    private static function z_CommandCopyImageToBufferKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyImageToBufferKHR';
    private static function z_CommandCopyImageToBufferKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandCopyImageToBufferKHR';
    private static function z_CommandCopyImageToBufferKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandCopyImageToBufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageToBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyImageToBufferKHR_8(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageToBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyImageToBufferKHR_7(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageToBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyImageToBufferKHR_6(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageToBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; var src_origin: UIntPtr; var region: UIntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyImageToBufferKHR_5(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageToBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; region: IntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyImageToBufferKHR_4(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageToBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; region: IntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyImageToBufferKHR_3(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageToBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; region: IntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandCopyImageToBufferKHR_2(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandCopyImageToBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; src_image: cl_mem; dst_buffer: cl_mem; src_origin: IntPtr; region: IntPtr; dst_offset: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandCopyImageToBufferKHR_1(command_buffer, command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_CommandFillBufferKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandFillBufferKHR';
    private static function z_CommandFillBufferKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandFillBufferKHR';
    private static function z_CommandFillBufferKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandFillBufferKHR';
    private static function z_CommandFillBufferKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandFillBufferKHR';
    private static function z_CommandFillBufferKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandFillBufferKHR';
    private static function z_CommandFillBufferKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandFillBufferKHR';
    private static function z_CommandFillBufferKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandFillBufferKHR';
    private static function z_CommandFillBufferKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandFillBufferKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: array of UInt32; sync_point: array of UInt32; mutable_handle: array of cl_mutable_command): ErrorCode;
    type PUInt32=^UInt32;
    type Pcl_mutable_command=^cl_mutable_command;
    begin
      Result := if (mutable_handle<>nil) and (mutable_handle.Length<>0) then
        if (sync_point<>nil) and (sync_point.Length<>0) then
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list[0], sync_point[0], mutable_handle[0]) else
            z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, PUInt32(nil)^, sync_point[0], mutable_handle[0]) else
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list[0], PUInt32(nil)^, mutable_handle[0]) else
            z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, PUInt32(nil)^, PUInt32(nil)^, mutable_handle[0]) else
        if (sync_point<>nil) and (sync_point.Length<>0) then
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list[0], sync_point[0], Pcl_mutable_command(nil)^) else
            z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, PUInt32(nil)^, sync_point[0], Pcl_mutable_command(nil)^) else
          if (sync_point_wait_list<>nil) and (sync_point_wait_list.Length<>0) then
            z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list[0], PUInt32(nil)^, Pcl_mutable_command(nil)^) else
            z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, PUInt32(nil)^, PUInt32(nil)^, Pcl_mutable_command(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandFillBufferKHR_8(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandFillBufferKHR_7(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandFillBufferKHR_6(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode :=
    z_CommandFillBufferKHR_5(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandFillBufferKHR_4(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandFillBufferKHR_3(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandFillBufferKHR_2(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillBufferKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; buffer: cl_mem; pattern: IntPtr; pattern_size: UIntPtr; offset: UIntPtr; size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; sync_point: IntPtr; mutable_handle: IntPtr): ErrorCode :=
    z_CommandFillBufferKHR_1(command_buffer, command_queue, buffer, pattern, pattern_size, offset, size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_CommandFillImageKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandFillImageKHR';
    private static function z_CommandFillImageKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandFillImageKHR';
    private static function z_CommandFillImageKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandFillImageKHR';
    private static function z_CommandFillImageKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandFillImageKHR';
    private static function z_CommandFillImageKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; var fill_color: Byte; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandFillImageKHR';
    private static function z_CommandFillImageKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; var fill_color: Byte; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandFillImageKHR';
    private static function z_CommandFillImageKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; var fill_color: Byte; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandFillImageKHR';
    private static function z_CommandFillImageKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; var fill_color: Byte; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandFillImageKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillImageKHR<T>(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode; where T: record;
    begin
      Result := z_CommandFillImageKHR_8(command_buffer, command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillImageKHR<T>(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_CommandFillImageKHR_7(command_buffer, command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillImageKHR<T>(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode; where T: record;
    begin
      Result := z_CommandFillImageKHR_6(command_buffer, command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillImageKHR<T>(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; var fill_color: T; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode; where T: record;
    begin
      Result := z_CommandFillImageKHR_5(command_buffer, command_queue, image, PByte(pointer(@fill_color))^, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandFillImageKHR_4(command_buffer, command_queue, image, fill_color, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandFillImageKHR_3(command_buffer, command_queue, image, fill_color, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandFillImageKHR_2(command_buffer, command_queue, image, fill_color, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandFillImageKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; image: cl_mem; fill_color: pointer; var origin: UIntPtr; var region: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandFillImageKHR_1(command_buffer, command_queue, image, fill_color, origin, region, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_CommandNDRangeKernelKHR_1(command_buffer: cl_command_buffer; command_queue: cl_command_queue; properties: IntPtr; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; local_work_size: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandNDRangeKernelKHR';
    private static function z_CommandNDRangeKernelKHR_2(command_buffer: cl_command_buffer; command_queue: cl_command_queue; properties: IntPtr; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; local_work_size: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandNDRangeKernelKHR';
    private static function z_CommandNDRangeKernelKHR_3(command_buffer: cl_command_buffer; command_queue: cl_command_queue; properties: IntPtr; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; local_work_size: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandNDRangeKernelKHR';
    private static function z_CommandNDRangeKernelKHR_4(command_buffer: cl_command_buffer; command_queue: cl_command_queue; properties: IntPtr; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; local_work_size: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandNDRangeKernelKHR';
    private static function z_CommandNDRangeKernelKHR_5(command_buffer: cl_command_buffer; command_queue: cl_command_queue; var properties: UInt64; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandNDRangeKernelKHR';
    private static function z_CommandNDRangeKernelKHR_6(command_buffer: cl_command_buffer; command_queue: cl_command_queue; var properties: UInt64; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandNDRangeKernelKHR';
    private static function z_CommandNDRangeKernelKHR_7(command_buffer: cl_command_buffer; command_queue: cl_command_queue; var properties: UInt64; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode;
    external 'opencl' name 'clCommandNDRangeKernelKHR';
    private static function z_CommandNDRangeKernelKHR_8(command_buffer: cl_command_buffer; command_queue: cl_command_queue; var properties: UInt64; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode;
    external 'opencl' name 'clCommandNDRangeKernelKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandNDRangeKernelKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; var properties: UInt64; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandNDRangeKernelKHR_8(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandNDRangeKernelKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; var properties: UInt64; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandNDRangeKernelKHR_7(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandNDRangeKernelKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; var properties: UInt64; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandNDRangeKernelKHR_6(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandNDRangeKernelKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; var properties: UInt64; kernel: cl_kernel; work_dim: UInt32; var global_work_offset: UIntPtr; var global_work_size: UIntPtr; var local_work_size: UIntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandNDRangeKernelKHR_5(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandNDRangeKernelKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; properties: IntPtr; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; local_work_size: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandNDRangeKernelKHR_4(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandNDRangeKernelKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; properties: IntPtr; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; local_work_size: IntPtr; num_sync_points_in_wait_list: UInt32; var sync_point_wait_list: UInt32; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandNDRangeKernelKHR_3(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandNDRangeKernelKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; properties: IntPtr; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; local_work_size: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; var mutable_handle: cl_mutable_command): ErrorCode :=
    z_CommandNDRangeKernelKHR_2(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function CommandNDRangeKernelKHR(command_buffer: cl_command_buffer; command_queue: cl_command_queue; properties: IntPtr; kernel: cl_kernel; work_dim: UInt32; global_work_offset: IntPtr; global_work_size: IntPtr; local_work_size: IntPtr; num_sync_points_in_wait_list: UInt32; sync_point_wait_list: IntPtr; var sync_point: UInt32; mutable_handle: IntPtr): ErrorCode :=
    z_CommandNDRangeKernelKHR_1(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);
    
    private static function z_GetCommandBufferInfoKHR_1(command_buffer: cl_command_buffer; param_name: CommandBufferInfoKhr; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandBufferInfoKHR';
    private static function z_GetCommandBufferInfoKHR_2(command_buffer: cl_command_buffer; param_name: CommandBufferInfoKhr; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode;
    external 'opencl' name 'clGetCommandBufferInfoKHR';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandBufferInfoKHR(command_buffer: cl_command_buffer; param_name: CommandBufferInfoKhr; param_value_size: UIntPtr; param_value: IntPtr; var param_value_size_ret: UIntPtr): ErrorCode :=
    z_GetCommandBufferInfoKHR_2(command_buffer, param_name, param_value_size, param_value, param_value_size_ret);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function GetCommandBufferInfoKHR(command_buffer: cl_command_buffer; param_name: CommandBufferInfoKhr; param_value_size: UIntPtr; param_value: IntPtr; param_value_size_ret: IntPtr): ErrorCode :=
    z_GetCommandBufferInfoKHR_1(command_buffer, param_name, param_value_size, param_value, param_value_size_ret);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  clProgramScopeHostPipeINTEL = static class
    public const _ExtStr = 'cl_intel_program_scope_host_pipe';
    
    private static function z_EnqueueReadHostPipeINTEL_1(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadHostPipeINTEL';
    private static function z_EnqueueReadHostPipeINTEL_2(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadHostPipeINTEL';
    private static function z_EnqueueReadHostPipeINTEL_3(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueReadHostPipeINTEL';
    private static function z_EnqueueReadHostPipeINTEL_4(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueReadHostPipeINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
          z_EnqueueReadHostPipeINTEL_4(command_queue, &program, pipe_symbol_str_ptr, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReadHostPipeINTEL_4(command_queue, &program, pipe_symbol_str_ptr, blocking_read, ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
          z_EnqueueReadHostPipeINTEL_3(command_queue, &program, pipe_symbol_str_ptr, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueReadHostPipeINTEL_3(command_queue, &program, pipe_symbol_str_ptr, blocking_read, ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := z_EnqueueReadHostPipeINTEL_4(command_queue, &program, pipe_symbol_str_ptr, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := z_EnqueueReadHostPipeINTEL_3(command_queue, &program, pipe_symbol_str_ptr, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := z_EnqueueReadHostPipeINTEL_2(command_queue, &program, pipe_symbol_str_ptr, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := z_EnqueueReadHostPipeINTEL_1(command_queue, &program, pipe_symbol_str_ptr, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadHostPipeINTEL_4(command_queue, &program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadHostPipeINTEL_4(command_queue, &program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueReadHostPipeINTEL_3(command_queue, &program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueReadHostPipeINTEL_3(command_queue, &program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueReadHostPipeINTEL_4(command_queue, &program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueReadHostPipeINTEL_3(command_queue, &program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueReadHostPipeINTEL_2(command_queue, &program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueReadHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_read: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueReadHostPipeINTEL_1(command_queue, &program, pipe_symbol, blocking_read, ptr, size, num_events_in_wait_list, event_wait_list, &event);
    
    private static function z_EnqueueWriteHostPipeINTEL_1(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteHostPipeINTEL';
    private static function z_EnqueueWriteHostPipeINTEL_2(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteHostPipeINTEL';
    private static function z_EnqueueWriteHostPipeINTEL_3(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    external 'opencl' name 'clEnqueueWriteHostPipeINTEL';
    private static function z_EnqueueWriteHostPipeINTEL_4(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    external 'opencl' name 'clEnqueueWriteHostPipeINTEL';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
          z_EnqueueWriteHostPipeINTEL_4(command_queue, &program, pipe_symbol_str_ptr, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueWriteHostPipeINTEL_4(command_queue, &program, pipe_symbol_str_ptr, blocking_write, ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
          z_EnqueueWriteHostPipeINTEL_3(command_queue, &program, pipe_symbol_str_ptr, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
          z_EnqueueWriteHostPipeINTEL_3(command_queue, &program, pipe_symbol_str_ptr, blocking_write, ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := z_EnqueueWriteHostPipeINTEL_4(command_queue, &program, pipe_symbol_str_ptr, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := z_EnqueueWriteHostPipeINTEL_3(command_queue, &program, pipe_symbol_str_ptr, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := z_EnqueueWriteHostPipeINTEL_2(command_queue, &program, pipe_symbol_str_ptr, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: string; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode;
    begin
      var pipe_symbol_str_ptr: IntPtr;
      try
        pipe_symbol_str_ptr := Marshal.StringToHGlobalAnsi(pipe_symbol);
        Result := z_EnqueueWriteHostPipeINTEL_1(command_queue, &program, pipe_symbol_str_ptr, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, &event);
      finally
        Marshal.FreeHGlobal(pipe_symbol_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; var &event: cl_event): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteHostPipeINTEL_4(command_queue, &program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteHostPipeINTEL_4(command_queue, &program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: array of cl_event; &event: IntPtr): ErrorCode;
    type Pcl_event=^cl_event;
    begin
      Result := if (event_wait_list<>nil) and (event_wait_list.Length<>0) then
        z_EnqueueWriteHostPipeINTEL_3(command_queue, &program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list[0], &event) else
        z_EnqueueWriteHostPipeINTEL_3(command_queue, &program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, Pcl_event(nil)^, &event);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; var &event: cl_event): ErrorCode :=
    z_EnqueueWriteHostPipeINTEL_4(command_queue, &program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; var event_wait_list: cl_event; &event: IntPtr): ErrorCode :=
    z_EnqueueWriteHostPipeINTEL_3(command_queue, &program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; var &event: cl_event): ErrorCode :=
    z_EnqueueWriteHostPipeINTEL_2(command_queue, &program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, &event);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function EnqueueWriteHostPipeINTEL(command_queue: cl_command_queue; &program: cl_program; pipe_symbol: IntPtr; blocking_write: Bool; ptr: IntPtr; size: UIntPtr; num_events_in_wait_list: UInt32; event_wait_list: IntPtr; &event: IntPtr): ErrorCode :=
    z_EnqueueWriteHostPipeINTEL_1(command_queue, &program, pipe_symbol, blocking_write, ptr, size, num_events_in_wait_list, event_wait_list, &event);
    
  end;
  
  {$endregion Extensions}
  
  
  