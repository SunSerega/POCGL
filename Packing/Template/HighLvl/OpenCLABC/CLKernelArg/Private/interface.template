    
    
    
    {$region Managed}
    
    {$region Array}
    
    public static function FromArray<T>(a: CommandQueue<array of T>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(a: array of T): CLKernelArgPrivate; where T: record;
    begin Result := FromArray&<T>(a) end;
    public static function operator implicit<T>(a: CommandQueue<array of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray&<T>(a) end;
    public static function operator implicit<T>(a: ConstQueue<array of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray&<T>(a) end;
    public static function operator implicit<T>(a: ParameterQueue<array of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray&<T>(a) end;
    
    {$endregion Array}
    
    {$region Array2}
    
    public static function FromArray2<T>(a2: CommandQueue<array[,] of T>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(a2: array[,] of T): CLKernelArgPrivate; where T: record;
    begin Result := FromArray2&<T>(a2) end;
    public static function operator implicit<T>(a2: CommandQueue<array[,] of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray2&<T>(a2) end;
    public static function operator implicit<T>(a2: ConstQueue<array[,] of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray2&<T>(a2) end;
    public static function operator implicit<T>(a2: ParameterQueue<array[,] of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray2&<T>(a2) end;
    
    {$endregion Array2}
    
    {$region Array3}
    
    public static function FromArray3<T>(a3: CommandQueue<array[,,] of T>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(a3: array[,,] of T): CLKernelArgPrivate; where T: record;
    begin Result := FromArray3&<T>(a3) end;
    public static function operator implicit<T>(a3: CommandQueue<array[,,] of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray3&<T>(a3) end;
    public static function operator implicit<T>(a3: ConstQueue<array[,,] of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray3&<T>(a3) end;
    public static function operator implicit<T>(a3: ParameterQueue<array[,,] of T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArray3&<T>(a3) end;
    
    {$endregion Array3}
    
    {$region ArraySegment}
    
    public static function FromArraySegment<T>(seg: CommandQueue<ArraySegment<T>>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(seg: ArraySegment<T>): CLKernelArgPrivate; where T: record;
    begin Result := FromArraySegment&<T>(seg) end;
    public static function operator implicit<T>(seg: CommandQueue<ArraySegment<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromArraySegment&<T>(seg) end;
    public static function operator implicit<T>(seg: ConstQueue<ArraySegment<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromArraySegment&<T>(seg) end;
    public static function operator implicit<T>(seg: ParameterQueue<ArraySegment<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromArraySegment&<T>(seg) end;
    
    {$endregion ArraySegment}
    
    {$endregion Managed}
    
    {$region NativeArea}
    
    {$region NativeMemoryArea}
    
    public static function FromNativeMemoryArea(ntv_mem_area: CommandQueue<NativeMemoryArea>): CLKernelArgPrivate;
    public static function operator implicit(ntv_mem_area: NativeMemoryArea): CLKernelArgPrivate;
    begin Result := FromNativeMemoryArea(ntv_mem_area) end;
    public static function operator implicit(ntv_mem_area: CommandQueue<NativeMemoryArea>): CLKernelArgPrivate;
    begin Result := FromNativeMemoryArea(ntv_mem_area) end;
    public static function operator implicit(ntv_mem_area: ConstQueue<NativeMemoryArea>): CLKernelArgPrivate;
    begin Result := FromNativeMemoryArea(ntv_mem_area) end;
    public static function operator implicit(ntv_mem_area: ParameterQueue<NativeMemoryArea>): CLKernelArgPrivate;
    begin Result := FromNativeMemoryArea(ntv_mem_area) end;
    
    {$endregion NativeMemoryArea}
    
    {$region NativeValueArea}
    
    public static function FromNativeValueArea<T>(ntv_val_area: CommandQueue<NativeValueArea<T>>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(ntv_val_area: NativeValueArea<T>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeValueArea&<T>(ntv_val_area) end;
    public static function operator implicit<T>(ntv_val_area: CommandQueue<NativeValueArea<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeValueArea&<T>(ntv_val_area) end;
    public static function operator implicit<T>(ntv_val_area: ConstQueue<NativeValueArea<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeValueArea&<T>(ntv_val_area) end;
    public static function operator implicit<T>(ntv_val_area: ParameterQueue<NativeValueArea<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeValueArea&<T>(ntv_val_area) end;
    
    {$endregion NativeValueArea}
    
    {$region NativeArrayArea}
    
    public static function FromNativeArrayArea<T>(ntv_arr_area: CommandQueue<NativeArrayArea<T>>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(ntv_arr_area: NativeArrayArea<T>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeArrayArea&<T>(ntv_arr_area) end;
    public static function operator implicit<T>(ntv_arr_area: CommandQueue<NativeArrayArea<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeArrayArea&<T>(ntv_arr_area) end;
    public static function operator implicit<T>(ntv_arr_area: ConstQueue<NativeArrayArea<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeArrayArea&<T>(ntv_arr_area) end;
    public static function operator implicit<T>(ntv_arr_area: ParameterQueue<NativeArrayArea<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeArrayArea&<T>(ntv_arr_area) end;
    
    {$endregion NativeArrayArea}
    
    {$endregion NativeArea}
    
    {$region Native}
    
    {$region NativeMemory}
    
    public static function FromNativeMemory(ntv_mem: CommandQueue<NativeMemory>): CLKernelArgPrivate;
    public static function operator implicit(ntv_mem: NativeMemory): CLKernelArgPrivate;
    begin Result := FromNativeMemory(ntv_mem) end;
    public static function operator implicit(ntv_mem: CommandQueue<NativeMemory>): CLKernelArgPrivate;
    begin Result := FromNativeMemory(ntv_mem) end;
    public static function operator implicit(ntv_mem: ConstQueue<NativeMemory>): CLKernelArgPrivate;
    begin Result := FromNativeMemory(ntv_mem) end;
    public static function operator implicit(ntv_mem: ParameterQueue<NativeMemory>): CLKernelArgPrivate;
    begin Result := FromNativeMemory(ntv_mem) end;
    
    {$endregion NativeMemory}
    
    {$region NativeValue}
    
    public static function FromNativeValue<T>(ntv_val: CommandQueue<NativeValue<T>>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(ntv_val: NativeValue<T>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeValue&<T>(ntv_val) end;
    public static function operator implicit<T>(ntv_val: CommandQueue<NativeValue<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeValue&<T>(ntv_val) end;
    public static function operator implicit<T>(ntv_val: ConstQueue<NativeValue<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeValue&<T>(ntv_val) end;
    public static function operator implicit<T>(ntv_val: ParameterQueue<NativeValue<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeValue&<T>(ntv_val) end;
    
    {$endregion NativeValue}
    
    {$region NativeArray}
    
    public static function FromNativeArray<T>(ntv_arr: CommandQueue<NativeArray<T>>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(ntv_arr: NativeArray<T>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeArray&<T>(ntv_arr) end;
    public static function operator implicit<T>(ntv_arr: CommandQueue<NativeArray<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeArray&<T>(ntv_arr) end;
    public static function operator implicit<T>(ntv_arr: ConstQueue<NativeArray<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeArray&<T>(ntv_arr) end;
    public static function operator implicit<T>(ntv_arr: ParameterQueue<NativeArray<T>>): CLKernelArgPrivate; where T: record;
    begin Result := FromNativeArray&<T>(ntv_arr) end;
    
    {$endregion NativeArray}
    
    {$endregion Native}
    
    {$region Value}
    
    public static function FromValue<T>(val: CommandQueue<T>): CLKernelArgPrivate; where T: record;
    public static function operator implicit<T>(val: T): CLKernelArgPrivate; where T: record;
    begin Result := FromValue&<T>(val) end;
    public static function operator implicit<T>(val: CommandQueue<T>): CLKernelArgPrivate; where T: record;
    begin Result := FromValue&<T>(val) end;
    public static function operator implicit<T>(val: ConstQueue<T>): CLKernelArgPrivate; where T: record;
    begin Result := FromValue&<T>(val) end;
    public static function operator implicit<T>(val: ParameterQueue<T>): CLKernelArgPrivate; where T: record;
    begin Result := FromValue&<T>(val) end;
    
    {$endregion Value}
    
    
    