  
  
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  v = static class
    
    private static procedure z_1NoParam_1;
    external 'virtual.dll' name 'v1NoParam';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 1NoParam :=
    z_1NoParam_1();
    
    private static procedure z_2InpString_1(s: IntPtr);
    external 'virtual.dll' name 'v2InpString';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 2InpString(s: IntPtr) :=
    z_2InpString_1(s);
    
    private static procedure z_2InpStringReadOnly_1(s: IntPtr);
    external 'virtual.dll' name 'v2InpStringReadOnly';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 2InpStringReadOnly(s: string);
    begin
      var s_str_ptr: IntPtr;
      try
        s_str_ptr := Marshal.StringToHGlobalAnsi(s);
        z_2InpStringReadOnly_1(s_str_ptr);
      finally
        Marshal.FreeHGlobal(s_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 2InpStringReadOnly(s: IntPtr) :=
    z_2InpStringReadOnly_1(s);
    
    private static function z_3ResString_1: IntPtr;
    external 'virtual.dll' name 'v3ResString';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 3ResString: string;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_3ResString_1();
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    
    private static function z_3ResStringReadOnly_1: IntPtr;
    external 'virtual.dll' name 'v3ResStringReadOnly';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 3ResStringReadOnly: string;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_3ResStringReadOnly_1();
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
    end;
    
    private static procedure z_4Arrrrrray_1(a: pointer);
    external 'virtual.dll' name 'v4Arrrrrray';
    private static procedure z_4Arrrrrray_2(var a: IntPtr);
    external 'virtual.dll' name 'v4Arrrrrray';
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure temp_4Arrrrrray_1(a: array of IntPtr);
    type PIntPtr=^IntPtr;
    begin
      if (a<>nil) and (a.Length<>0) then
        z_4Arrrrrray_2(a[0]) else
        z_4Arrrrrray_2(PIntPtr(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 4Arrrrrray<T>(a: array of array of array of array of array of T); where T: record;
    begin
      var a_temp_arr: array of array of array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            arr_el2?.ConvertAll(arr_el3->
              arr_el3?.ConvertAll(managed_a->
                if (managed_a=nil) or (managed_a.Length=0) then
                  Result := IntPtr.Zero else
                begin
                  var l := managed_a.Length*Marshal.SizeOf&<T>;
                  Result := Marshal.AllocHGlobal(l);
                  Marshal.Copy(managed_a,0,Result,l);
                end
              )
            )
          )
        );
        4Arrrrrray(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            if arr_el2<>nil then foreach var arr_el3 in arr_el2 do
              if arr_el3<>nil then foreach var arr_el4 in arr_el3 do
                Marshal.FreeHGlobal(arr_el4);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 4Arrrrrray(a: array of array of array of array of IntPtr);
    begin
      var a_temp_arr: array of array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            arr_el2?.ConvertAll(managed_a->
              if (managed_a=nil) or (managed_a.Length=0) then
                Result := IntPtr.Zero else
              begin
                var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
                Result := Marshal.AllocHGlobal(l);
                Marshal.Copy(managed_a,0,Result,l);
              end
            )
          )
        );
        4Arrrrrray(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            if arr_el2<>nil then foreach var arr_el3 in arr_el2 do
              Marshal.FreeHGlobal(arr_el3);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 4Arrrrrray(a: array of array of array of IntPtr);
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        4Arrrrrray(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 4Arrrrrray(a: array of array of IntPtr);
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        temp_4Arrrrrray_1(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 4Arrrrrray(var a: IntPtr) :=
    z_4Arrrrrray_2(a);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 4Arrrrrray(a: pointer) :=
    z_4Arrrrrray_1(a);
    
    private static procedure z_5Generic_1(a: IntPtr);
    external 'virtual.dll' name 'v5Generic';
    private static procedure z_5Generic_2(var a: Byte);
    external 'virtual.dll' name 'v5Generic';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 5Generic<T>(a: array of T); where T: record;
    type PT=^T;
    begin
      if (a<>nil) and (a.Length<>0) then
        5Generic(a[0]) else
        5Generic(PT(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 5Generic<T>(var a: T); where T: record;
    begin
      z_5Generic_2(PByte(pointer(@a))^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 5Generic(a: IntPtr) :=
    z_5Generic_1(a);
    
    private static procedure z_6Generic_1(a: IntPtr);
    external 'virtual.dll' name 'v6Generic';
    private static procedure z_6Generic_2(var a: Byte);
    external 'virtual.dll' name 'v6Generic';
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure temp_6Generic_1<T>(var a: T); where T: record;
    begin
      z_6Generic_2(PByte(pointer(@a))^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 6Generic<T>(a: array of T); where T: record;
    type PT=^T;
    begin
      if (a<>nil) and (a.Length<>0) then
        temp_6Generic_1(a[0]) else
        temp_6Generic_1(PT(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 6Generic(a: IntPtr) :=
    z_6Generic_1(a);
    
    private static function z_7Mix_1(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: pointer): IntPtr;
    external 'virtual.dll' name 'v7Mix';
    private static function z_7Mix_2(s1: IntPtr; s2: IntPtr; gen: IntPtr; var a: IntPtr): IntPtr;
    external 'virtual.dll' name 'v7Mix';
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_7Mix_1(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: array of IntPtr): string;
    type PIntPtr=^IntPtr;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := if (a<>nil) and (a.Length<>0) then
        z_7Mix_2(s1, s2, gen, a[0]) else
        z_7Mix_2(s1, s2, gen, PIntPtr(nil)^);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    private static function z_7Mix_3(s1: IntPtr; s2: IntPtr; var gen: Byte; a: pointer): IntPtr;
    external 'virtual.dll' name 'v7Mix';
    private static function z_7Mix_4(s1: IntPtr; s2: IntPtr; var gen: Byte; var a: IntPtr): IntPtr;
    external 'virtual.dll' name 'v7Mix';
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_7Mix_2<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; a: array of IntPtr): string; where T1: record;
    type PIntPtr=^IntPtr;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := if (a<>nil) and (a.Length<>0) then
        z_7Mix_4(s1, s2, PByte(pointer(@gen))^, a[0]) else
        z_7Mix_4(s1, s2, PByte(pointer(@gen))^, PIntPtr(nil)^);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_7Mix_3(s1: IntPtr; s2: string; gen: IntPtr; a: array of IntPtr): string;
    type PIntPtr=^IntPtr;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := if (a<>nil) and (a.Length<>0) then
          z_7Mix_2(s1, s2_str_ptr, gen, a[0]) else
          z_7Mix_2(s1, s2_str_ptr, gen, PIntPtr(nil)^);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static function temp_7Mix_4<T1>(s1: IntPtr; s2: string; var gen: T1; a: array of IntPtr): string; where T1: record;
    type PIntPtr=^IntPtr;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := if (a<>nil) and (a.Length<>0) then
          z_7Mix_4(s1, s2_str_ptr, PByte(pointer(@gen))^, a[0]) else
          z_7Mix_4(s1, s2_str_ptr, PByte(pointer(@gen))^, PIntPtr(nil)^);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1,T2>(s1: IntPtr; s2: string; gen: array of T1; a: array of array of array of array of T2): string; where T1, T2: record;
    type PT1=^T1;
    begin
      var a_temp_arr: array of array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            arr_el2?.ConvertAll(managed_a->
              if (managed_a=nil) or (managed_a.Length=0) then
                Result := IntPtr.Zero else
              begin
                var l := managed_a.Length*Marshal.SizeOf&<T2>;
                Result := Marshal.AllocHGlobal(l);
                Marshal.Copy(managed_a,0,Result,l);
              end
            )
          )
        );
        Result := if (gen<>nil) and (gen.Length<>0) then
          7Mix(s1, s2, gen[0], a_temp_arr) else
          7Mix(s1, s2, PT1(nil)^, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            if arr_el2<>nil then foreach var arr_el3 in arr_el2 do
              Marshal.FreeHGlobal(arr_el3);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1,T2>(s1: IntPtr; s2: IntPtr; gen: array of T1; a: array of array of array of array of T2): string; where T1, T2: record;
    type PT1=^T1;
    begin
      var a_temp_arr: array of array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            arr_el2?.ConvertAll(managed_a->
              if (managed_a=nil) or (managed_a.Length=0) then
                Result := IntPtr.Zero else
              begin
                var l := managed_a.Length*Marshal.SizeOf&<T2>;
                Result := Marshal.AllocHGlobal(l);
                Marshal.Copy(managed_a,0,Result,l);
              end
            )
          )
        );
        Result := if (gen<>nil) and (gen.Length<>0) then
          7Mix(s1, s2, gen[0], a_temp_arr) else
          7Mix(s1, s2, PT1(nil)^, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            if arr_el2<>nil then foreach var arr_el3 in arr_el2 do
              Marshal.FreeHGlobal(arr_el3);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1>(s1: IntPtr; s2: string; var gen: T1; a: array of array of array of IntPtr): string; where T1: record;
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        Result := 7Mix(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1>(s1: IntPtr; s2: string; var gen: T1; a: array of array of IntPtr): string; where T1: record;
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_7Mix_4(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1>(s1: IntPtr; s2: string; var gen: T1; var a: IntPtr): string; where T1: record;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := z_7Mix_4(s1, s2_str_ptr, PByte(pointer(@gen))^, a);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1>(s1: IntPtr; s2: string; var gen: T1; a: pointer): string; where T1: record;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := z_7Mix_3(s1, s2_str_ptr, PByte(pointer(@gen))^, a);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix(s1: IntPtr; s2: string; gen: IntPtr; a: array of array of array of IntPtr): string;
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        Result := 7Mix(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix(s1: IntPtr; s2: string; gen: IntPtr; a: array of array of IntPtr): string;
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_7Mix_3(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix(s1: IntPtr; s2: string; gen: IntPtr; var a: IntPtr): string;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := z_7Mix_2(s1, s2_str_ptr, gen, a);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix(s1: IntPtr; s2: string; gen: IntPtr; a: pointer): string;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := z_7Mix_1(s1, s2_str_ptr, gen, a);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; a: array of array of array of IntPtr): string; where T1: record;
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        Result := 7Mix(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; a: array of array of IntPtr): string; where T1: record;
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_7Mix_2(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; var a: IntPtr): string; where T1: record;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_7Mix_4(s1, s2, PByte(pointer(@gen))^, a);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; a: pointer): string; where T1: record;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_7Mix_3(s1, s2, PByte(pointer(@gen))^, a);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: array of array of array of IntPtr): string;
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        Result := 7Mix(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: array of array of IntPtr): string;
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_7Mix_1(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix(s1: IntPtr; s2: IntPtr; gen: IntPtr; var a: IntPtr): string;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_7Mix_2(s1, s2, gen, a);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static function 7Mix(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: pointer): string;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_7Mix_1(s1, s2, gen, a);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    
    private static procedure z_8BoolPtr_1(b: IntPtr);
    external 'virtual.dll' name 'v8BoolPtr';
    private static procedure z_8BoolPtr_2(var b: boolean);
    external 'virtual.dll' name 'v8BoolPtr';
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 8BoolPtr(var b: boolean) :=
    z_8BoolPtr_2(b);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 8BoolPtr(b: IntPtr) :=
    z_8BoolPtr_1(b);
    
    private static procedure z_9StringArray_1(a: pointer);
    external 'virtual.dll' name 'v9StringArray';
    private static procedure z_9StringArray_2(var a: IntPtr);
    external 'virtual.dll' name 'v9StringArray';
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure temp_9StringArray_1(a: array of IntPtr);
    type PIntPtr=^IntPtr;
    begin
      if (a<>nil) and (a.Length<>0) then
        z_9StringArray_2(a[0]) else
        z_9StringArray_2(PIntPtr(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 9StringArray(a: array of array of string);
    begin
      var a_str_ptrs: array of array of IntPtr;
      try
        a_str_ptrs := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            Marshal.StringToHGlobalAnsi(arr_el2)
          )
        );
        9StringArray(a_str_ptrs);
      finally
        if a_str_ptrs<>nil then foreach var arr_el1 in a_str_ptrs do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 9StringArray(a: array of array of IntPtr);
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        temp_9StringArray_1(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 9StringArray(var a: IntPtr) :=
    z_9StringArray_2(a);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] static procedure 9StringArray(a: pointer) :=
    z_9StringArray_1(a);
    
  end;
  
  [PCUNotRestore]
  [System.Security.SuppressUnmanagedCodeSecurity]
  vDyn = sealed partial class
    public constructor(loader: PlatformLoader);
    private constructor := raise new System.NotSupportedException;
    private function GetProcAddress(name: string): IntPtr;
    private static function GetProcOrNil<T>(fadr: IntPtr) :=
    fadr=IntPtr.Zero ? default(T) :
    Marshal.GetDelegateForFunctionPointer&<T>(fadr);
    
    private z_1NoParam_adr := GetProcAddress('vDyn1NoParam');
    private z_1NoParam_1 := GetProcOrNil&<procedure>(z_1NoParam_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 1NoParam :=
    z_1NoParam_1();
    
    private z_2InpString_adr := GetProcAddress('vDyn2InpString');
    private z_2InpString_1 := GetProcOrNil&<procedure(s: IntPtr)>(z_2InpString_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 2InpString(s: IntPtr) :=
    z_2InpString_1(s);
    
    private z_2InpStringReadOnly_adr := GetProcAddress('vDyn2InpStringReadOnly');
    private z_2InpStringReadOnly_1 := GetProcOrNil&<procedure(s: IntPtr)>(z_2InpStringReadOnly_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 2InpStringReadOnly(s: string);
    begin
      var s_str_ptr: IntPtr;
      try
        s_str_ptr := Marshal.StringToHGlobalAnsi(s);
        z_2InpStringReadOnly_1(s_str_ptr);
      finally
        Marshal.FreeHGlobal(s_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 2InpStringReadOnly(s: IntPtr) :=
    z_2InpStringReadOnly_1(s);
    
    private z_3ResString_adr := GetProcAddress('vDyn3ResString');
    private z_3ResString_1 := GetProcOrNil&<function: IntPtr>(z_3ResString_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 3ResString: string;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_3ResString_1();
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    
    private z_3ResStringReadOnly_adr := GetProcAddress('vDyn3ResStringReadOnly');
    private z_3ResStringReadOnly_1 := GetProcOrNil&<function: IntPtr>(z_3ResStringReadOnly_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 3ResStringReadOnly: string;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_3ResStringReadOnly_1();
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
    end;
    
    private z_4Arrrrrray_adr := GetProcAddress('vDyn4Arrrrrray');
    private z_4Arrrrrray_1 := GetProcOrNil&<procedure(a: pointer)>(z_4Arrrrrray_adr);
    private z_4Arrrrrray_2 := GetProcOrNil&<procedure(var a: IntPtr)>(z_4Arrrrrray_adr);
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure temp_4Arrrrrray_1(a: array of IntPtr);
    type PIntPtr=^IntPtr;
    begin
      if (a<>nil) and (a.Length<>0) then
        z_4Arrrrrray_2(a[0]) else
        z_4Arrrrrray_2(PIntPtr(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 4Arrrrrray<T>(a: array of array of array of array of array of T); where T: record;
    begin
      var a_temp_arr: array of array of array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            arr_el2?.ConvertAll(arr_el3->
              arr_el3?.ConvertAll(managed_a->
                if (managed_a=nil) or (managed_a.Length=0) then
                  Result := IntPtr.Zero else
                begin
                  var l := managed_a.Length*Marshal.SizeOf&<T>;
                  Result := Marshal.AllocHGlobal(l);
                  Marshal.Copy(managed_a,0,Result,l);
                end
              )
            )
          )
        );
        4Arrrrrray(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            if arr_el2<>nil then foreach var arr_el3 in arr_el2 do
              if arr_el3<>nil then foreach var arr_el4 in arr_el3 do
                Marshal.FreeHGlobal(arr_el4);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 4Arrrrrray(a: array of array of array of array of IntPtr);
    begin
      var a_temp_arr: array of array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            arr_el2?.ConvertAll(managed_a->
              if (managed_a=nil) or (managed_a.Length=0) then
                Result := IntPtr.Zero else
              begin
                var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
                Result := Marshal.AllocHGlobal(l);
                Marshal.Copy(managed_a,0,Result,l);
              end
            )
          )
        );
        4Arrrrrray(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            if arr_el2<>nil then foreach var arr_el3 in arr_el2 do
              Marshal.FreeHGlobal(arr_el3);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 4Arrrrrray(a: array of array of array of IntPtr);
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        4Arrrrrray(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 4Arrrrrray(a: array of array of IntPtr);
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        temp_4Arrrrrray_1(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 4Arrrrrray(var a: IntPtr) :=
    z_4Arrrrrray_2(a);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 4Arrrrrray(a: pointer) :=
    z_4Arrrrrray_1(a);
    
    private z_5Generic_adr := GetProcAddress('vDyn5Generic');
    private z_5Generic_1 := GetProcOrNil&<procedure(a: IntPtr)>(z_5Generic_adr);
    private z_5Generic_2 := GetProcOrNil&<procedure(var a: Byte)>(z_5Generic_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 5Generic<T>(a: array of T); where T: record;
    type PT=^T;
    begin
      if (a<>nil) and (a.Length<>0) then
        5Generic(a[0]) else
        5Generic(PT(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 5Generic<T>(var a: T); where T: record;
    begin
      z_5Generic_2(PByte(pointer(@a))^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 5Generic(a: IntPtr) :=
    z_5Generic_1(a);
    
    private z_6Generic_adr := GetProcAddress('vDyn6Generic');
    private z_6Generic_1 := GetProcOrNil&<procedure(a: IntPtr)>(z_6Generic_adr);
    private z_6Generic_2 := GetProcOrNil&<procedure(var a: Byte)>(z_6Generic_adr);
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure temp_6Generic_1<T>(var a: T); where T: record;
    begin
      z_6Generic_2(PByte(pointer(@a))^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 6Generic<T>(a: array of T); where T: record;
    type PT=^T;
    begin
      if (a<>nil) and (a.Length<>0) then
        temp_6Generic_1(a[0]) else
        temp_6Generic_1(PT(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 6Generic(a: IntPtr) :=
    z_6Generic_1(a);
    
    private z_7Mix_adr := GetProcAddress('vDyn7Mix');
    private z_7Mix_1 := GetProcOrNil&<function(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: pointer): IntPtr>(z_7Mix_adr);
    private z_7Mix_2 := GetProcOrNil&<function(s1: IntPtr; s2: IntPtr; gen: IntPtr; var a: IntPtr): IntPtr>(z_7Mix_adr);
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] function temp_7Mix_1(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: array of IntPtr): string;
    type PIntPtr=^IntPtr;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := if (a<>nil) and (a.Length<>0) then
        z_7Mix_2(s1, s2, gen, a[0]) else
        z_7Mix_2(s1, s2, gen, PIntPtr(nil)^);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    private z_7Mix_3 := GetProcOrNil&<function(s1: IntPtr; s2: IntPtr; var gen: Byte; a: pointer): IntPtr>(z_7Mix_adr);
    private z_7Mix_4 := GetProcOrNil&<function(s1: IntPtr; s2: IntPtr; var gen: Byte; var a: IntPtr): IntPtr>(z_7Mix_adr);
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] function temp_7Mix_2<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; a: array of IntPtr): string; where T1: record;
    type PIntPtr=^IntPtr;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := if (a<>nil) and (a.Length<>0) then
        z_7Mix_4(s1, s2, PByte(pointer(@gen))^, a[0]) else
        z_7Mix_4(s1, s2, PByte(pointer(@gen))^, PIntPtr(nil)^);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] function temp_7Mix_3(s1: IntPtr; s2: string; gen: IntPtr; a: array of IntPtr): string;
    type PIntPtr=^IntPtr;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := if (a<>nil) and (a.Length<>0) then
          z_7Mix_2(s1, s2_str_ptr, gen, a[0]) else
          z_7Mix_2(s1, s2_str_ptr, gen, PIntPtr(nil)^);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] function temp_7Mix_4<T1>(s1: IntPtr; s2: string; var gen: T1; a: array of IntPtr): string; where T1: record;
    type PIntPtr=^IntPtr;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := if (a<>nil) and (a.Length<>0) then
          z_7Mix_4(s1, s2_str_ptr, PByte(pointer(@gen))^, a[0]) else
          z_7Mix_4(s1, s2_str_ptr, PByte(pointer(@gen))^, PIntPtr(nil)^);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1,T2>(s1: IntPtr; s2: string; gen: array of T1; a: array of array of array of array of T2): string; where T1, T2: record;
    type PT1=^T1;
    begin
      var a_temp_arr: array of array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            arr_el2?.ConvertAll(managed_a->
              if (managed_a=nil) or (managed_a.Length=0) then
                Result := IntPtr.Zero else
              begin
                var l := managed_a.Length*Marshal.SizeOf&<T2>;
                Result := Marshal.AllocHGlobal(l);
                Marshal.Copy(managed_a,0,Result,l);
              end
            )
          )
        );
        Result := if (gen<>nil) and (gen.Length<>0) then
          7Mix(s1, s2, gen[0], a_temp_arr) else
          7Mix(s1, s2, PT1(nil)^, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            if arr_el2<>nil then foreach var arr_el3 in arr_el2 do
              Marshal.FreeHGlobal(arr_el3);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1,T2>(s1: IntPtr; s2: IntPtr; gen: array of T1; a: array of array of array of array of T2): string; where T1, T2: record;
    type PT1=^T1;
    begin
      var a_temp_arr: array of array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            arr_el2?.ConvertAll(managed_a->
              if (managed_a=nil) or (managed_a.Length=0) then
                Result := IntPtr.Zero else
              begin
                var l := managed_a.Length*Marshal.SizeOf&<T2>;
                Result := Marshal.AllocHGlobal(l);
                Marshal.Copy(managed_a,0,Result,l);
              end
            )
          )
        );
        Result := if (gen<>nil) and (gen.Length<>0) then
          7Mix(s1, s2, gen[0], a_temp_arr) else
          7Mix(s1, s2, PT1(nil)^, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            if arr_el2<>nil then foreach var arr_el3 in arr_el2 do
              Marshal.FreeHGlobal(arr_el3);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1>(s1: IntPtr; s2: string; var gen: T1; a: array of array of array of IntPtr): string; where T1: record;
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        Result := 7Mix(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1>(s1: IntPtr; s2: string; var gen: T1; a: array of array of IntPtr): string; where T1: record;
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_7Mix_4(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1>(s1: IntPtr; s2: string; var gen: T1; var a: IntPtr): string; where T1: record;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := z_7Mix_4(s1, s2_str_ptr, PByte(pointer(@gen))^, a);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1>(s1: IntPtr; s2: string; var gen: T1; a: pointer): string; where T1: record;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := z_7Mix_3(s1, s2_str_ptr, PByte(pointer(@gen))^, a);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix(s1: IntPtr; s2: string; gen: IntPtr; a: array of array of array of IntPtr): string;
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        Result := 7Mix(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix(s1: IntPtr; s2: string; gen: IntPtr; a: array of array of IntPtr): string;
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_7Mix_3(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix(s1: IntPtr; s2: string; gen: IntPtr; var a: IntPtr): string;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := z_7Mix_2(s1, s2_str_ptr, gen, a);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix(s1: IntPtr; s2: string; gen: IntPtr; a: pointer): string;
    begin
      var Result_str_ptr, s2_str_ptr: IntPtr;
      try
        s2_str_ptr := Marshal.StringToHGlobalAnsi(s2);
        Result_str_ptr := z_7Mix_1(s1, s2_str_ptr, gen, a);
      finally
        Result := Marshal.PtrToStringAnsi(Result_str_ptr);
        Marshal.FreeHGlobal(Result_str_ptr);
        Marshal.FreeHGlobal(s2_str_ptr);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; a: array of array of array of IntPtr): string; where T1: record;
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        Result := 7Mix(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; a: array of array of IntPtr): string; where T1: record;
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_7Mix_2(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; var a: IntPtr): string; where T1: record;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_7Mix_4(s1, s2, PByte(pointer(@gen))^, a);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix<T1>(s1: IntPtr; s2: IntPtr; var gen: T1; a: pointer): string; where T1: record;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_7Mix_3(s1, s2, PByte(pointer(@gen))^, a);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: array of array of array of IntPtr): string;
    begin
      var a_temp_arr: array of array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(managed_a->
            if (managed_a=nil) or (managed_a.Length=0) then
              Result := IntPtr.Zero else
            begin
              var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
              Result := Marshal.AllocHGlobal(l);
              Marshal.Copy(managed_a,0,Result,l);
            end
          )
        );
        Result := 7Mix(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: array of array of IntPtr): string;
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        Result := temp_7Mix_1(s1, s2, gen, a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix(s1: IntPtr; s2: IntPtr; gen: IntPtr; var a: IntPtr): string;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_7Mix_2(s1, s2, gen, a);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] function 7Mix(s1: IntPtr; s2: IntPtr; gen: IntPtr; a: pointer): string;
    begin
      var Result_str_ptr: IntPtr;
      Result_str_ptr := z_7Mix_1(s1, s2, gen, a);
      Result := Marshal.PtrToStringAnsi(Result_str_ptr);
      Marshal.FreeHGlobal(Result_str_ptr);
    end;
    
    private z_8BoolPtr_adr := GetProcAddress('vDyn8BoolPtr');
    private z_8BoolPtr_1 := GetProcOrNil&<procedure(b: IntPtr)>(z_8BoolPtr_adr);
    private z_8BoolPtr_2 := GetProcOrNil&<procedure(var b: boolean)>(z_8BoolPtr_adr);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 8BoolPtr(var b: boolean) :=
    z_8BoolPtr_2(b);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 8BoolPtr(b: IntPtr) :=
    z_8BoolPtr_1(b);
    
    private z_9StringArray_adr := GetProcAddress('vDyn9StringArray');
    private z_9StringArray_1 := GetProcOrNil&<procedure(a: pointer)>(z_9StringArray_adr);
    private z_9StringArray_2 := GetProcOrNil&<procedure(var a: IntPtr)>(z_9StringArray_adr);
    private [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure temp_9StringArray_1(a: array of IntPtr);
    type PIntPtr=^IntPtr;
    begin
      if (a<>nil) and (a.Length<>0) then
        z_9StringArray_2(a[0]) else
        z_9StringArray_2(PIntPtr(nil)^);
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 9StringArray(a: array of array of string);
    begin
      var a_str_ptrs: array of array of IntPtr;
      try
        a_str_ptrs := a?.ConvertAll(arr_el1->
          arr_el1?.ConvertAll(arr_el2->
            Marshal.StringToHGlobalAnsi(arr_el2)
          )
        );
        9StringArray(a_str_ptrs);
      finally
        if a_str_ptrs<>nil then foreach var arr_el1 in a_str_ptrs do
          if arr_el1<>nil then foreach var arr_el2 in arr_el1 do
            Marshal.FreeHGlobal(arr_el2);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 9StringArray(a: array of array of IntPtr);
    begin
      var a_temp_arr: array of IntPtr;
      try
        a_temp_arr := a?.ConvertAll(managed_a->
          if (managed_a=nil) or (managed_a.Length=0) then
            Result := IntPtr.Zero else
          begin
            var l := managed_a.Length*Marshal.SizeOf&<IntPtr>;
            Result := Marshal.AllocHGlobal(l);
            Marshal.Copy(managed_a,0,Result,l);
          end
        );
        temp_9StringArray_1(a_temp_arr);
      finally
        if a_temp_arr<>nil then foreach var arr_el1 in a_temp_arr do
          Marshal.FreeHGlobal(arr_el1);
      end;
    end;
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 9StringArray(var a: IntPtr) :=
    z_9StringArray_2(a);
    public [MethodImpl(MethodImplOptions.AggressiveInlining)] procedure 9StringArray(a: pointer) :=
    z_9StringArray_1(a);
    
  end;
  
  
  